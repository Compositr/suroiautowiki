module.exports = {

"[project]/node_modules/.pnpm/@swc+helpers@0.5.2/node_modules/@swc/helpers/esm/_interop_require_default.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "_": ()=>_interop_require_default,
    "_interop_require_default": ()=>_interop_require_default
});
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
;

})()),
"[project]/node_modules/.pnpm/@swc+helpers@0.5.2/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
exports._ = exports._interop_require_default = _interop_require_default;
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

}.call(this) }),
"[project]/node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ module.exports = function isBuffer(obj) {
    return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

}.call(this) }),
"[project]/node_modules/.pnpm/vfile-matter@3.0.1/node_modules/vfile-matter/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('vfile').VFile} VFile
 * @typedef {import('js-yaml').LoadOptions} LoadOptions
 *
 * @typedef Options VFile matter options
 * @property {boolean} [strip=false] Remove the YAML front matter from the file
 * @property {Omit<LoadOptions, 'filename'>} [yaml] Options for the YAML parser
 */ __turbopack_esm__({
    "matter": ()=>matter
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$buffer$40$2$2e$0$2e$5$2f$node_modules$2f$is$2d$buffer$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$js$2d$yaml$40$4$2e$1$2e$0$2f$node_modules$2f$js$2d$yaml$2f$dist$2f$js$2d$yaml$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/dist/js-yaml.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function matter(file, options = {}) {
    var strip = options.strip;
    var yamlOptions = options.yaml || {};
    var doc = String(file);
    var match = /^---(?:\r?\n|\r)(?:([\s\S]*?)(?:\r?\n|\r))?---(?:\r?\n|\r|$)/.exec(doc);
    if (match) {
        file.data.matter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$js$2d$yaml$40$4$2e$1$2e$0$2f$node_modules$2f$js$2d$yaml$2f$dist$2f$js$2d$yaml$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["load"](match[1], Object.assign({}, yamlOptions, {
            filename: file.path
        }));
        if (strip) {
            doc = doc.slice(match[0].length);
            file.value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$buffer$40$2$2e$0$2e$5$2f$node_modules$2f$is$2d$buffer$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](file.value) ? Buffer.from(doc) : doc;
        }
    } else {
        file.data.matter = {};
    }
    return file;
}

})()),
"[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.shared.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef URL
 * @property {string} hash
 * @property {string} host
 * @property {string} hostname
 * @property {string} href
 * @property {string} origin
 * @property {string} password
 * @property {string} pathname
 * @property {string} port
 * @property {string} protocol
 * @property {string} search
 * @property {any} searchParams
 * @property {string} username
 * @property {() => string} toString
 * @property {() => string} toJSON
 */ /**
 * Check if `fileUrlOrPath` looks like a URL.
 *
 * @param {unknown} fileUrlOrPath
 *   File path or URL.
 * @returns {fileUrlOrPath is URL}
 *   Whether it’s a URL.
 */ // From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
__turbopack_esm__({
    "isUrl": ()=>isUrl
});
function isUrl(fileUrlOrPath) {
    return fileUrlOrPath !== null && typeof fileUrlOrPath === 'object' && // @ts-expect-error: indexable.
    fileUrlOrPath.href && // @ts-expect-error: indexable.
    fileUrlOrPath.origin;
}

})()),
"[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "isUrl": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$shared$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isUrl"],
    "urlToPath": ()=>__TURBOPACK__external__url__["fileURLToPath"]
});
var __TURBOPACK__external__url__ = __turbopack_external_require__("url", true);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$shared$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.shared.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),
"[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minproc.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "proc": ()=>__TURBOPACK__external__process__["default"]
});
var __TURBOPACK__external__process__ = __turbopack_external_require__("process", true);
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minpath.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "path": ()=>__TURBOPACK__external__path__["default"]
});
var __TURBOPACK__external__path__ = __turbopack_external_require__("path", true);
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {import('./minurl.shared.js').URL} URL
 * @typedef {import('../index.js').Data} Data
 * @typedef {import('../index.js').Value} Value
 */ /**
 * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike
 *
 * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding
 *   Encodings supported by the buffer class.
 *
 *   This is a copy of the types from Node, copied to prevent Node globals from
 *   being needed.
 *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>
 *
 * @typedef {Options | URL | Value | VFile} Compatible
 *   Things that can be passed to the constructor.
 *
 * @typedef VFileCoreOptions
 *   Set multiple values.
 * @property {Value | null | undefined} [value]
 *   Set `value`.
 * @property {string | null | undefined} [cwd]
 *   Set `cwd`.
 * @property {Array<string> | null | undefined} [history]
 *   Set `history`.
 * @property {URL | string | null | undefined} [path]
 *   Set `path`.
 * @property {string | null | undefined} [basename]
 *   Set `basename`.
 * @property {string | null | undefined} [stem]
 *   Set `stem`.
 * @property {string | null | undefined} [extname]
 *   Set `extname`.
 * @property {string | null | undefined} [dirname]
 *   Set `dirname`.
 * @property {Data | null | undefined} [data]
 *   Set `data`.
 *
 * @typedef Map
 *   Raw source map.
 *
 *   See:
 *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.
 * @property {number} version
 *   Which version of the source map spec this map is following.
 * @property {Array<string>} sources
 *   An array of URLs to the original source files.
 * @property {Array<string>} names
 *   An array of identifiers which can be referenced by individual mappings.
 * @property {string | undefined} [sourceRoot]
 *   The URL root from which all sources are relative.
 * @property {Array<string> | undefined} [sourcesContent]
 *   An array of contents of the original source files.
 * @property {string} mappings
 *   A string of base64 VLQs which contain the actual mappings.
 * @property {string} file
 *   The generated file this source map is associated with.
 *
 * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options
 *   Configuration.
 *
 *   A bunch of keys that will be shallow copied over to the new file.
 *
 * @typedef {Record<string, unknown>} ReporterSettings
 *   Configuration for reporters.
 */ /**
 * @template {ReporterSettings} Settings
 *   Options type.
 * @callback Reporter
 *   Type for a reporter.
 * @param {Array<VFile>} files
 *   Files to report.
 * @param {Settings} options
 *   Configuration.
 * @returns {string}
 *   Report.
 */ __turbopack_esm__({
    "VFile": ()=>VFile
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$buffer$40$2$2e$0$2e$5$2f$node_modules$2f$is$2d$buffer$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minpath.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minproc$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minproc.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
/**
 * Order of setting (least specific to most), we need this because otherwise
 * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
 * stem can be set.
 *
 * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}
 */ const order = [
    'history',
    'path',
    'basename',
    'stem',
    'extname',
    'dirname'
];
class VFile {
    /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Buffer` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */ constructor(value){
        /** @type {Options | VFile} */ let options;
        if (!value) {
            options = {};
        } else if (typeof value === 'string' || buffer(value)) {
            options = {
                value
            };
        } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isUrl"](value)) {
            options = {
                path: value
            };
        } else {
            options = value;
        }
        /**
     * Place to store custom information (default: `{}`).
     *
     * It’s OK to store custom data directly on the file but moving it to
     * `data` is recommended.
     *
     * @type {Data}
     */ this.data = {};
        /**
     * List of messages associated with the file.
     *
     * @type {Array<VFileMessage>}
     */ this.messages = [];
        /**
     * List of filepaths the file moved between.
     *
     * The first is the original path and the last is the current path.
     *
     * @type {Array<string>}
     */ this.history = [];
        /**
     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
     *
     * @type {string}
     */ this.cwd = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minproc$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["proc"].cwd();
        /* eslint-disable no-unused-expressions */ /**
     * Raw value.
     *
     * @type {Value}
     */ this.value;
        // The below are non-standard, they are “well-known”.
        // As in, used in several tools.
        /**
     * Whether a file was saved to disk.
     *
     * This is used by vfile reporters.
     *
     * @type {boolean}
     */ this.stored;
        /**
     * Custom, non-string, compiled, representation.
     *
     * This is used by unified to store non-string results.
     * One example is when turning markdown into React nodes.
     *
     * @type {unknown}
     */ this.result;
        /**
     * Source map.
     *
     * This type is equivalent to the `RawSourceMap` type from the `source-map`
     * module.
     *
     * @type {Map | null | undefined}
     */ this.map;
        /* eslint-enable no-unused-expressions */ // Set path related properties in the correct order.
        let index = -1;
        while(++index < order.length){
            const prop = order[index];
            // Note: we specifically use `in` instead of `hasOwnProperty` to accept
            // `vfile`s too.
            if (prop in options && options[prop] !== undefined && options[prop] !== null) {
                // @ts-expect-error: TS doesn’t understand basic reality.
                this[prop] = prop === 'history' ? [
                    ...options[prop]
                ] : options[prop];
            }
        }
        /** @type {string} */ let prop;
        // Set non-path related properties.
        for(prop in options){
            // @ts-expect-error: fine to set other things.
            if (!order.includes(prop)) {
                // @ts-expect-error: fine to set other things.
                this[prop] = options[prop];
            }
        }
    }
    /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   */ get path() {
        return this.history[this.history.length - 1];
    }
    /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {string | URL} path
   */ set path(path) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isUrl"](path)) {
            path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["urlToPath"](path);
        }
        assertNonEmpty(path, 'path');
        if (this.path !== path) {
            this.history.push(path);
        }
    }
    /**
   * Get the parent path (example: `'~'`).
   */ get dirname() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].dirname(this.path) : undefined;
    }
    /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   */ set dirname(dirname) {
        assertPath(this.basename, 'dirname');
        this.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].join(dirname || '', this.basename);
    }
    /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   */ get basename() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].basename(this.path) : undefined;
    }
    /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */ set basename(basename) {
        assertNonEmpty(basename, 'basename');
        assertPart(basename, 'basename');
        this.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].join(this.dirname || '', basename);
    }
    /**
   * Get the extname (including dot) (example: `'.js'`).
   */ get extname() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].extname(this.path) : undefined;
    }
    /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   */ set extname(extname) {
        assertPart(extname, 'extname');
        assertPath(this.dirname, 'extname');
        if (extname) {
            if (extname.charCodeAt(0) !== 46 /* `.` */ ) {
                throw new Error('`extname` must start with `.`');
            }
            if (extname.includes('.', 1)) {
                throw new Error('`extname` cannot contain multiple dots');
            }
        }
        this.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].join(this.dirname, this.stem + (extname || ''));
    }
    /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   */ get stem() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].basename(this.path, this.extname) : undefined;
    }
    /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */ set stem(stem) {
        assertNonEmpty(stem, 'stem');
        assertPart(stem, 'stem');
        this.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].join(this.dirname || '', stem + (this.extname || ''));
    }
    /**
   * Serialize the file.
   *
   * @param {BufferEncoding | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Buffer`
   *   (default: `'utf8'`).
   * @returns {string}
   *   Serialized file.
   */ toString(encoding) {
        return (this.value || '').toString(encoding || undefined);
    }
    /**
   * Create a warning message associated with the file.
   *
   * Its `fatal` is set to `false` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ message(reason, place, origin) {
        const message = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"](reason, place, origin);
        if (this.path) {
            message.name = this.path + ':' + message.name;
            message.file = this.path;
        }
        message.fatal = false;
        this.messages.push(message);
        return message;
    }
    /**
   * Create an info message associated with the file.
   *
   * Its `fatal` is set to `null` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ info(reason, place, origin) {
        const message = this.message(reason, place, origin);
        message.fatal = null;
        return message;
    }
    /**
   * Create a fatal error associated with the file.
   *
   * Its `fatal` is set to `true` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * > 👉 **Note**: a fatal error means that a file is no longer processable.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Message.
   * @throws {VFileMessage}
   *   Message.
   */ fail(reason, place, origin) {
        const message = this.message(reason, place, origin);
        message.fatal = true;
        throw message;
    }
}
/**
 * Assert that `part` is not a path (as in, does not contain `path.sep`).
 *
 * @param {string | null | undefined} part
 *   File path part.
 * @param {string} name
 *   Part name.
 * @returns {void}
 *   Nothing.
 */ function assertPart(part, name) {
    if (part && part.includes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].sep)) {
        throw new Error('`' + name + '` cannot be a path: did not expect `' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].sep + '`');
    }
}
/**
 * Assert that `part` is not empty.
 *
 * @param {string | undefined} part
 *   Thing.
 * @param {string} name
 *   Part name.
 * @returns {asserts part is string}
 *   Nothing.
 */ function assertNonEmpty(part, name) {
    if (!part) {
        throw new Error('`' + name + '` cannot be empty');
    }
}
/**
 * Assert `path` exists.
 *
 * @param {string | undefined} path
 *   Path.
 * @param {string} name
 *   Dependency name.
 * @returns {asserts path is string}
 *   Nothing.
 */ function assertPath(path, name) {
    if (!path) {
        throw new Error('Setting `' + name + '` requires `path` to be set too');
    }
}
/**
 * Assert `value` is a buffer.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Buffer}
 *   Whether `value` is a Node.js buffer.
 */ function buffer(value) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$buffer$40$2$2e$0$2e$5$2f$node_modules$2f$is$2d$buffer$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](value);
}

})()),
"[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "VFile": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFile"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/minurl.shared.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Checks if a value has the shape of a WHATWG URL object.
 *
 * Using a symbol or instanceof would not be able to recognize URL objects
 * coming from other implementations (e.g. in Electron), so instead we are
 * checking some well known properties for a lack of a better test.
 *
 * We use `href` and `protocol` as they are the only properties that are
 * easy to retrieve and calculate due to the lazy nature of the getters.
 *
 * We check for auth attribute to distinguish legacy url instance with
 * WHATWG URL instance.
 *
 * @param {unknown} fileUrlOrPath
 *   File path or URL.
 * @returns {fileUrlOrPath is URL}
 *   Whether it’s a URL.
 */ // From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>
__turbopack_esm__({
    "isUrl": ()=>isUrl
});
function isUrl(fileUrlOrPath) {
    return Boolean(fileUrlOrPath !== null && typeof fileUrlOrPath === 'object' && 'href' in fileUrlOrPath && fileUrlOrPath.href && 'protocol' in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
    fileUrlOrPath.auth === undefined);
}

})()),
"[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/minurl.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "isUrl": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$shared$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isUrl"],
    "urlToPath": ()=>__TURBOPACK__external__node$3a$url__["fileURLToPath"]
});
var __TURBOPACK__external__node$3a$url__ = __turbopack_external_require__("node:url", true);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$shared$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/minurl.shared.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),
"[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/minproc.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "proc": ()=>__TURBOPACK__external__node$3a$process__["default"]
});
var __TURBOPACK__external__node$3a$process__ = __turbopack_external_require__("node:process", true);
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/minpath.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "path": ()=>__TURBOPACK__external__node$3a$path__["default"]
});
var __TURBOPACK__external__node$3a$path__ = __turbopack_external_require__("node:path", true);
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 * @typedef {import('vfile-message').Options} MessageOptions
 * @typedef {import('../index.js').Data} Data
 * @typedef {import('../index.js').Value} Value
 */ /**
 * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
 *
 * @typedef {Options | URL | VFile | Value} Compatible
 *   Things that can be passed to the constructor.
 *
 * @typedef VFileCoreOptions
 *   Set multiple values.
 * @property {string | null | undefined} [basename]
 *   Set `basename` (name).
 * @property {string | null | undefined} [cwd]
 *   Set `cwd` (working directory).
 * @property {Data | null | undefined} [data]
 *   Set `data` (associated info).
 * @property {string | null | undefined} [dirname]
 *   Set `dirname` (path w/o basename).
 * @property {string | null | undefined} [extname]
 *   Set `extname` (extension with dot).
 * @property {Array<string> | null | undefined} [history]
 *   Set `history` (paths the file moved between).
 * @property {URL | string | null | undefined} [path]
 *   Set `path` (current path).
 * @property {string | null | undefined} [stem]
 *   Set `stem` (name without extension).
 * @property {Value | null | undefined} [value]
 *   Set `value` (the contents of the file).
 *
 * @typedef Map
 *   Raw source map.
 *
 *   See:
 *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.
 * @property {number} version
 *   Which version of the source map spec this map is following.
 * @property {Array<string>} sources
 *   An array of URLs to the original source files.
 * @property {Array<string>} names
 *   An array of identifiers which can be referenced by individual mappings.
 * @property {string | undefined} [sourceRoot]
 *   The URL root from which all sources are relative.
 * @property {Array<string> | undefined} [sourcesContent]
 *   An array of contents of the original source files.
 * @property {string} mappings
 *   A string of base64 VLQs which contain the actual mappings.
 * @property {string} file
 *   The generated file this source map is associated with.
 *
 * @typedef {Record<string, unknown> & VFileCoreOptions} Options
 *   Configuration.
 *
 *   A bunch of keys that will be shallow copied over to the new file.
 *
 * @typedef {Record<string, unknown>} ReporterSettings
 *   Configuration for reporters.
 */ /**
 * @template [Settings=ReporterSettings]
 *   Options type.
 * @callback Reporter
 *   Type for a reporter.
 * @param {Array<VFile>} files
 *   Files to report.
 * @param {Settings} options
 *   Configuration.
 * @returns {string}
 *   Report.
 */ __turbopack_esm__({
    "VFile": ()=>VFile
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/minpath.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minproc$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/minproc.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/minurl.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
/**
 * Order of setting (least specific to most), we need this because otherwise
 * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
 * stem can be set.
 */ const order = [
    'history',
    'path',
    'basename',
    'stem',
    'extname',
    'dirname'
];
class VFile {
    /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */ constructor(value){
        /** @type {Options | VFile} */ let options;
        if (!value) {
            options = {};
        } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isUrl"](value)) {
            options = {
                path: value
            };
        } else if (typeof value === 'string' || isUint8Array(value)) {
            options = {
                value
            };
        } else {
            options = value;
        }
        /* eslint-disable no-unused-expressions */ /**
     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
     *
     * @type {string}
     */ this.cwd = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minproc$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["proc"].cwd();
        /**
     * Place to store custom info (default: `{}`).
     *
     * It’s OK to store custom data directly on the file but moving it to
     * `data` is recommended.
     *
     * @type {Data}
     */ this.data = {};
        /**
     * List of file paths the file moved between.
     *
     * The first is the original path and the last is the current path.
     *
     * @type {Array<string>}
     */ this.history = [];
        /**
     * List of messages associated with the file.
     *
     * @type {Array<VFileMessage>}
     */ this.messages = [];
        /**
     * Raw value.
     *
     * @type {Value}
     */ this.value;
        // The below are non-standard, they are “well-known”.
        // As in, used in several tools.
        /**
     * Source map.
     *
     * This type is equivalent to the `RawSourceMap` type from the `source-map`
     * module.
     *
     * @type {Map | null | undefined}
     */ this.map;
        /**
     * Custom, non-string, compiled, representation.
     *
     * This is used by unified to store non-string results.
     * One example is when turning markdown into React nodes.
     *
     * @type {unknown}
     */ this.result;
        /**
     * Whether a file was saved to disk.
     *
     * This is used by vfile reporters.
     *
     * @type {boolean}
     */ this.stored;
        /* eslint-enable no-unused-expressions */ // Set path related properties in the correct order.
        let index = -1;
        while(++index < order.length){
            const prop = order[index];
            // Note: we specifically use `in` instead of `hasOwnProperty` to accept
            // `vfile`s too.
            if (prop in options && options[prop] !== undefined && options[prop] !== null) {
                // @ts-expect-error: TS doesn’t understand basic reality.
                this[prop] = prop === 'history' ? [
                    ...options[prop]
                ] : options[prop];
            }
        }
        /** @type {string} */ let prop;
        // Set non-path related properties.
        for(prop in options){
            // @ts-expect-error: fine to set other things.
            if (!order.includes(prop)) {
                // @ts-expect-error: fine to set other things.
                this[prop] = options[prop];
            }
        }
    }
    /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */ get basename() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].basename(this.path) : undefined;
    }
    /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */ set basename(basename) {
        assertNonEmpty(basename, 'basename');
        assertPart(basename, 'basename');
        this.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].join(this.dirname || '', basename);
    }
    /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */ get dirname() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].dirname(this.path) : undefined;
    }
    /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */ set dirname(dirname) {
        assertPath(this.basename, 'dirname');
        this.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].join(dirname || '', this.basename);
    }
    /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */ get extname() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].extname(this.path) : undefined;
    }
    /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */ set extname(extname) {
        assertPart(extname, 'extname');
        assertPath(this.dirname, 'extname');
        if (extname) {
            if (extname.codePointAt(0) !== 46 /* `.` */ ) {
                throw new Error('`extname` must start with `.`');
            }
            if (extname.includes('.', 1)) {
                throw new Error('`extname` cannot contain multiple dots');
            }
        }
        this.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].join(this.dirname, this.stem + (extname || ''));
    }
    /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */ get path() {
        return this.history[this.history.length - 1];
    }
    /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */ set path(path) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isUrl"](path)) {
            path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minurl$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["urlToPath"](path);
        }
        assertNonEmpty(path, 'path');
        if (this.path !== path) {
            this.history.push(path);
        }
    }
    /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */ get stem() {
        return typeof this.path === 'string' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].basename(this.path, this.extname) : undefined;
    }
    /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */ set stem(stem) {
        assertNonEmpty(stem, 'stem');
        assertPart(stem, 'stem');
        this.path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].join(this.dirname || '', stem + (this.extname || ''));
    }
    // Normal prototypal methods.
    /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */ fail(causeOrReason, optionsOrParentOrPlace, origin) {
        // @ts-expect-error: the overloads are fine.
        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
        message.fatal = true;
        throw message;
    }
    /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ info(causeOrReason, optionsOrParentOrPlace, origin) {
        // @ts-expect-error: the overloads are fine.
        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
        message.fatal = undefined;
        return message;
    }
    /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ message(causeOrReason, optionsOrParentOrPlace, origin) {
        const message = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"](// @ts-expect-error: the overloads are fine.
        causeOrReason, optionsOrParentOrPlace, origin);
        if (this.path) {
            message.name = this.path + ':' + message.name;
            message.file = this.path;
        }
        message.fatal = false;
        this.messages.push(message);
        return message;
    }
    /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */ toString(encoding) {
        if (this.value === undefined) {
            return '';
        }
        if (typeof this.value === 'string') {
            return this.value;
        }
        const decoder = new TextDecoder(encoding || undefined);
        return decoder.decode(this.value);
    }
}
/**
 * Assert that `part` is not a path (as in, does not contain `path.sep`).
 *
 * @param {string | null | undefined} part
 *   File path part.
 * @param {string} name
 *   Part name.
 * @returns {undefined}
 *   Nothing.
 */ function assertPart(part, name) {
    if (part && part.includes(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].sep)) {
        throw new Error('`' + name + '` cannot be a path: did not expect `' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$minpath$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["path"].sep + '`');
    }
}
/**
 * Assert that `part` is not empty.
 *
 * @param {string | undefined} part
 *   Thing.
 * @param {string} name
 *   Part name.
 * @returns {asserts part is string}
 *   Nothing.
 */ function assertNonEmpty(part, name) {
    if (!part) {
        throw new Error('`' + name + '` cannot be empty');
    }
}
/**
 * Assert `path` exists.
 *
 * @param {string | undefined} path
 *   Path.
 * @param {string} name
 *   Dependency name.
 * @returns {asserts path is string}
 *   Nothing.
 */ function assertPath(path, name) {
    if (!path) {
        throw new Error('Setting `' + name + '` requires `path` to be set too');
    }
}
/**
 * Assert `value` is an `Uint8Array`.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Uint8Array}
 *   Whether `value` is an `Uint8Array`.
 */ function isUint8Array(value) {
    return Boolean(value && typeof value === 'object' && 'byteLength' in value && 'byteOffset' in value);
}

})()),
"[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// More types exposed from `index.d.ts`.
__turbopack_esm__({
    "VFile": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFile"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ /**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */ /**
 * Serialize the positional info of a point, position (start and end points),
 * or node.
 *
 * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]
 *   Node, position, or point.
 * @returns {string}
 *   Pretty printed positional info of a node (`string`).
 *
 *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
 *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
 *   column, `s` for `start`, and `e` for end.
 *   An empty string (`''`) is returned if the given value is neither `node`,
 *   `position`, nor `point`.
 */ __turbopack_esm__({
    "stringifyPosition": ()=>stringifyPosition
});
function stringifyPosition(value) {
    // Nothing.
    if (!value || typeof value !== 'object') {
        return '';
    }
    // Node.
    if ('position' in value || 'type' in value) {
        return position(value.position);
    }
    // Position.
    if ('start' in value || 'end' in value) {
        return position(value);
    }
    // Point.
    if ('line' in value || 'column' in value) {
        return point(value);
    }
    // ?
    return '';
}
/**
 * @param {Point | PointLike | null | undefined} point
 * @returns {string}
 */ function point(point) {
    return index(point && point.line) + ':' + index(point && point.column);
}
/**
 * @param {Position | PositionLike | null | undefined} pos
 * @returns {string}
 */ function position(pos) {
    return point(pos && pos.start) + '-' + point(pos && pos.end);
}
/**
 * @param {number | null | undefined} value
 * @returns {number}
 */ function index(value) {
    return value && typeof value === 'number' ? value : 1;
}

})()),
"[project]/node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "stringifyPosition": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ /**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 */ /**
 * Serialize the positional info of a point, position (start and end points),
 * or node.
 *
 * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]
 *   Node, position, or point.
 * @returns {string}
 *   Pretty printed positional info of a node (`string`).
 *
 *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
 *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
 *   column, `s` for `start`, and `e` for end.
 *   An empty string (`''`) is returned if the given value is neither `node`,
 *   `position`, nor `point`.
 */ __turbopack_esm__({
    "stringifyPosition": ()=>stringifyPosition
});
function stringifyPosition(value) {
    // Nothing.
    if (!value || typeof value !== 'object') {
        return '';
    }
    // Node.
    if ('position' in value || 'type' in value) {
        return position(value.position);
    }
    // Position.
    if ('start' in value || 'end' in value) {
        return position(value);
    }
    // Point.
    if ('line' in value || 'column' in value) {
        return point(value);
    }
    // ?
    return '';
}
/**
 * @param {Point | PointLike | null | undefined} point
 * @returns {string}
 */ function point(point) {
    return index(point && point.line) + ':' + index(point && point.column);
}
/**
 * @param {Position | PositionLike | null | undefined} pos
 * @returns {string}
 */ function position(pos) {
    return point(pos && pos.start) + '-' + point(pos && pos.end);
}
/**
 * @param {number | null | undefined} value
 * @returns {number}
 */ function index(value) {
    return value && typeof value === 'number' ? value : 1;
}

})()),
"[project]/node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "stringifyPosition": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
 */ __turbopack_esm__({
    "VFileMessage": ()=>VFileMessage
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class VFileMessage extends Error {
    /**
   * Create a message for `reason` at `place` from `origin`.
   *
   * When an error is passed in as `reason`, the `stack` is copied.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   *
   *   > 👉 **Note**: you should use markdown.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */ // To do: next major: expose `undefined` everywhere instead of `null`.
    constructor(reason, place, origin){
        /** @type {[string | null, string | null]} */ const parts = [
            null,
            null
        ];
        /** @type {Position} */ let position = {
            // @ts-expect-error: we always follows the structure of `position`.
            start: {
                line: null,
                column: null
            },
            // @ts-expect-error: "
            end: {
                line: null,
                column: null
            }
        };
        super();
        if (typeof place === 'string') {
            origin = place;
            place = undefined;
        }
        if (typeof origin === 'string') {
            const index = origin.indexOf(':');
            if (index === -1) {
                parts[1] = origin;
            } else {
                parts[0] = origin.slice(0, index);
                parts[1] = origin.slice(index + 1);
            }
        }
        if (place) {
            // Node.
            if ('type' in place || 'position' in place) {
                if (place.position) {
                    // To do: next major: deep clone.
                    // @ts-expect-error: looks like a position.
                    position = place.position;
                }
            } else if ('start' in place || 'end' in place) {
                // @ts-expect-error: looks like a position.
                // To do: next major: deep clone.
                position = place;
            } else if ('line' in place || 'column' in place) {
                // To do: next major: deep clone.
                position.start = place;
            }
        }
        // Fields from `Error`.
        /**
     * Serialized positional info of error.
     *
     * On normal errors, this would be something like `ParseError`, buit in
     * `VFile` messages we use this space to show where an error happened.
     */ this.name = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"](place) || '1:1';
        /**
     * Reason for message.
     *
     * @type {string}
     */ this.message = typeof reason === 'object' ? reason.message : reason;
        /**
     * Stack of message.
     *
     * This is used by normal errors to show where something happened in
     * programming code, irrelevant for `VFile` messages,
     *
     * @type {string}
     */ this.stack = '';
        if (typeof reason === 'object' && reason.stack) {
            this.stack = reason.stack;
        }
        /**
     * Reason for message.
     *
     * > 👉 **Note**: you should use markdown.
     *
     * @type {string}
     */ this.reason = this.message;
        /* eslint-disable no-unused-expressions */ /**
     * State of problem.
     *
     * * `true` — marks associated file as no longer processable (error)
     * * `false` — necessitates a (potential) change (warning)
     * * `null | undefined` — for things that might not need changing (info)
     *
     * @type {boolean | null | undefined}
     */ this.fatal;
        /**
     * Starting line of error.
     *
     * @type {number | null}
     */ this.line = position.start.line;
        /**
     * Starting column of error.
     *
     * @type {number | null}
     */ this.column = position.start.column;
        /**
     * Full unist position.
     *
     * @type {Position | null}
     */ this.position = position;
        /**
     * Namespace of message (example: `'my-package'`).
     *
     * @type {string | null}
     */ this.source = parts[0];
        /**
     * Category of message (example: `'my-rule'`).
     *
     * @type {string | null}
     */ this.ruleId = parts[1];
        /**
     * Path of a file (used throughout the `VFile` ecosystem).
     *
     * @type {string | null}
     */ this.file;
        // The following fields are “well known”.
        // Not standard.
        // Feel free to add other non-standard fields to your messages.
        /**
     * Specify the source value that’s being reported, which is deemed
     * incorrect.
     *
     * @type {string | null}
     */ this.actual;
        /**
     * Suggest acceptable values that can be used instead of `actual`.
     *
     * @type {Array<string> | null}
     */ this.expected;
        /**
     * Link to docs for the message.
     *
     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
     * > to `new URL(x)`.
     *
     * @type {string | null}
     */ this.url;
        /**
     * Long form description of the message (you should use markdown).
     *
     * @type {string | null}
     */ this.note;
    /* eslint-enable no-unused-expressions */ }
}
VFileMessage.prototype.file = '';
VFileMessage.prototype.name = '';
VFileMessage.prototype.reason = '';
VFileMessage.prototype.message = '';
VFileMessage.prototype.stack = '';
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;

})()),
"[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "VFileMessage": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ /**
 * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
 *
 * @typedef Options
 *   Configuration.
 * @property {Array<Node> | null | undefined} [ancestors]
 *   Stack of (inclusive) ancestor nodes surrounding the message (optional).
 * @property {Error | null | undefined} [cause]
 *   Original error cause of the message (optional).
 * @property {Point | Position | null | undefined} [place]
 *   Place of message (optional).
 * @property {string | null | undefined} [ruleId]
 *   Category of message (optional, example: `'my-rule'`).
 * @property {string | null | undefined} [source]
 *   Namespace of who sent the message (optional, example: `'my-package'`).
 */ __turbopack_esm__({
    "VFileMessage": ()=>VFileMessage
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class VFileMessage extends Error {
    /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */ // eslint-disable-next-line complexity
    constructor(causeOrReason, optionsOrParentOrPlace, origin){
        super();
        if (typeof optionsOrParentOrPlace === 'string') {
            origin = optionsOrParentOrPlace;
            optionsOrParentOrPlace = undefined;
        }
        /** @type {string} */ let reason = '';
        /** @type {Options} */ let options = {};
        let legacyCause = false;
        if (optionsOrParentOrPlace) {
            // Point.
            if ('line' in optionsOrParentOrPlace && 'column' in optionsOrParentOrPlace) {
                options = {
                    place: optionsOrParentOrPlace
                };
            } else if ('start' in optionsOrParentOrPlace && 'end' in optionsOrParentOrPlace) {
                options = {
                    place: optionsOrParentOrPlace
                };
            } else if ('type' in optionsOrParentOrPlace) {
                options = {
                    ancestors: [
                        optionsOrParentOrPlace
                    ],
                    place: optionsOrParentOrPlace.position
                };
            } else {
                options = {
                    ...optionsOrParentOrPlace
                };
            }
        }
        if (typeof causeOrReason === 'string') {
            reason = causeOrReason;
        } else if (!options.cause && causeOrReason) {
            legacyCause = true;
            reason = causeOrReason.message;
            options.cause = causeOrReason;
        }
        if (!options.ruleId && !options.source && typeof origin === 'string') {
            const index = origin.indexOf(':');
            if (index === -1) {
                options.ruleId = origin;
            } else {
                options.source = origin.slice(0, index);
                options.ruleId = origin.slice(index + 1);
            }
        }
        if (!options.place && options.ancestors && options.ancestors) {
            const parent = options.ancestors[options.ancestors.length - 1];
            if (parent) {
                options.place = parent.position;
            }
        }
        const start = options.place && 'start' in options.place ? options.place.start : options.place;
        /* eslint-disable no-unused-expressions */ /**
     * Stack of ancestor nodes surrounding the message.
     *
     * @type {Array<Node> | undefined}
     */ this.ancestors = options.ancestors || undefined;
        /**
     * Original error cause of the message.
     *
     * @type {Error | undefined}
     */ this.cause = options.cause || undefined;
        /**
     * Starting column of message.
     *
     * @type {number | undefined}
     */ this.column = start ? start.column : undefined;
        /**
     * State of problem.
     *
     * * `true` — error, file not usable
     * * `false` — warning, change may be needed
     * * `undefined` — change likely not needed
     *
     * @type {boolean | null | undefined}
     */ this.fatal = undefined;
        /**
     * Path of a file (used throughout the `VFile` ecosystem).
     *
     * @type {string | undefined}
     */ this.file;
        // Field from `Error`.
        /**
     * Reason for message.
     *
     * @type {string}
     */ this.message = reason;
        /**
     * Starting line of error.
     *
     * @type {number | undefined}
     */ this.line = start ? start.line : undefined;
        // Field from `Error`.
        /**
     * Serialized positional info of message.
     *
     * On normal errors, this would be something like `ParseError`, buit in
     * `VFile` messages we use this space to show where an error happened.
     */ this.name = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"](options.place) || '1:1';
        /**
     * Place of message.
     *
     * @type {Point | Position | undefined}
     */ this.place = options.place || undefined;
        /**
     * Reason for message, should use markdown.
     *
     * @type {string}
     */ this.reason = this.message;
        /**
     * Category of message (example: `'my-rule'`).
     *
     * @type {string | undefined}
     */ this.ruleId = options.ruleId || undefined;
        /**
     * Namespace of message (example: `'my-package'`).
     *
     * @type {string | undefined}
     */ this.source = options.source || undefined;
        // Field from `Error`.
        /**
     * Stack of message.
     *
     * This is used by normal errors to show where something happened in
     * programming code, irrelevant for `VFile` messages,
     *
     * @type {string}
     */ this.stack = legacyCause && options.cause && typeof options.cause.stack === 'string' ? options.cause.stack : '';
        // The following fields are “well known”.
        // Not standard.
        // Feel free to add other non-standard fields to your messages.
        /**
     * Specify the source value that’s being reported, which is deemed
     * incorrect.
     *
     * @type {string | undefined}
     */ this.actual;
        /**
     * Suggest acceptable values that can be used instead of `actual`.
     *
     * @type {Array<string> | undefined}
     */ this.expected;
        /**
     * Long form description of the message (you should use markdown).
     *
     * @type {string | undefined}
     */ this.note;
        /**
     * Link to docs for the message.
     *
     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
     * > to `new URL(x)`.
     *
     * @type {string | undefined}
     */ this.url;
    /* eslint-enable no-unused-expressions */ }
}
VFileMessage.prototype.file = '';
VFileMessage.prototype.name = '';
VFileMessage.prototype.reason = '';
VFileMessage.prototype.message = '';
VFileMessage.prototype.stack = '';
VFileMessage.prototype.column = undefined;
VFileMessage.prototype.line = undefined;
VFileMessage.prototype.ancestors = undefined;
VFileMessage.prototype.cause = undefined;
VFileMessage.prototype.fatal = undefined;
VFileMessage.prototype.place = undefined;
VFileMessage.prototype.ruleId = undefined;
VFileMessage.prototype.source = undefined;

})()),
"[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Options} Options
 */ __turbopack_esm__({
    "VFileMessage": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/color.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @param {string} d
 * @returns {string}
 */ __turbopack_esm__({
    "color": ()=>color
});
function color(d) {
    return '\u001B[33m' + d + '\u001B[39m';
}

})()),
"[project]/node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 */ /**
 * @typedef {boolean | 'skip'} Action
 *   Union of the action types.
 *
 * @typedef {number} Index
 *   Move to the sibling at `index` next (after node itself is completely
 *   traversed).
 *
 *   Useful if mutating the tree, such as removing the node the visitor is
 *   currently on, or any of its previous siblings.
 *   Results less than 0 or greater than or equal to `children.length` stop
 *   traversing the parent.
 *
 * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple
 *   List with one or two values, the first an action, the second an index.
 *
 * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult
 *   Any value that can be returned from a visitor.
 */ /**
 * @template {Node} [Visited=Node]
 *   Visited node type.
 * @template {Parent} [Ancestor=Parent]
 *   Ancestor type.
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform the parent of node (the last of `ancestors`).
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of an ancestor still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Array<Ancestor>} ancestors
 *   Ancestors of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */ /**
 * @template {Node} [Tree=Node]
 *   Tree type.
 * @template {Test} [Check=string]
 *   Test type.
 * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor
 *   Build a typed `Visitor` function from a tree and a test.
 *
 *   It will infer which values are passed as `node` and which as `parents`.
 */ __turbopack_esm__({
    "CONTINUE": ()=>CONTINUE,
    "EXIT": ()=>EXIT,
    "SKIP": ()=>SKIP,
    "visitParents": ()=>visitParents
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$5$2e$2$2e$1$2f$node_modules$2f$unist$2d$util$2d$is$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$color$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/color.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
const CONTINUE = true;
const EXIT = false;
const SKIP = 'skip';
const visitParents = /**
     * @param {Node} tree
     * @param {Test} test
     * @param {Visitor<Node>} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {void}
     */ function(tree, test, visitor, reverse) {
    if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        // @ts-expect-error no visitor given, so `visitor` is test.
        visitor = test;
        test = null;
    }
    const is = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$5$2e$2$2e$1$2f$node_modules$2f$unist$2d$util$2d$is$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["convert"](test);
    const step = reverse ? -1 : 1;
    factory(tree, undefined, [])();
    /**
       * @param {Node} node
       * @param {number | undefined} index
       * @param {Array<Parent>} parents
       */ function factory(node, index, parents) {
        /** @type {Record<string, unknown>} */ // @ts-expect-error: hush
        const value = node && typeof node === 'object' ? node : {};
        if (typeof value.type === 'string') {
            const name = // `hast`
            typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;
            Object.defineProperty(visit, 'name', {
                value: 'node (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$color$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["color"](node.type + (name ? '<' + name + '>' : '')) + ')'
            });
        }
        return visit;
        function visit() {
            /** @type {ActionTuple} */ let result = [];
            /** @type {ActionTuple} */ let subresult;
            /** @type {number} */ let offset;
            /** @type {Array<Parent>} */ let grandparents;
            if (!test || is(node, index, parents[parents.length - 1] || null)) {
                result = toResult(visitor(node, parents));
                if (result[0] === EXIT) {
                    return result;
                }
            }
            // @ts-expect-error looks like a parent.
            if (node.children && result[0] !== SKIP) {
                // @ts-expect-error looks like a parent.
                offset = (reverse ? node.children.length : -1) + step;
                // @ts-expect-error looks like a parent.
                grandparents = parents.concat(node);
                // @ts-expect-error looks like a parent.
                while(offset > -1 && offset < node.children.length){
                    // @ts-expect-error looks like a parent.
                    subresult = factory(node.children[offset], offset, grandparents)();
                    if (subresult[0] === EXIT) {
                        return subresult;
                    }
                    offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
                }
            }
            return result;
        }
    }
};
/**
 * Turn a return value into a clean result.
 *
 * @param {VisitorResult} value
 *   Valid return values from visitors.
 * @returns {ActionTuple}
 *   Clean result.
 */ function toResult(value) {
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === 'number') {
        return [
            CONTINUE,
            value
        ];
    }
    return [
        value
    ];
}

})()),
"[project]/node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exported from `index.d.ts`
__turbopack_esm__({
    "CONTINUE": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CONTINUE"],
    "EXIT": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["EXIT"],
    "SKIP": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SKIP"],
    "visitParents": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visitParents"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.node.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @param {string} d
 * @returns {string}
 */ __turbopack_esm__({
    "color": ()=>color
});
function color(d) {
    return '\u001B[33m' + d + '\u001B[39m';
}

})()),
"[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} UnistNode
 * @typedef {import('unist').Parent} UnistParent
 */ /**
 * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test
 *   Test from `unist-util-is`.
 *
 *   Note: we have remove and add `undefined`, because otherwise when generating
 *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,
 *   which doesn’t work when publishing on npm.
 */ /**
 * @typedef {(
 *   Fn extends (value: any) => value is infer Thing
 *   ? Thing
 *   : Fallback
 * )} Predicate
 *   Get the value of a type guard `Fn`.
 * @template Fn
 *   Value; typically function that is a type guard (such as `(x): x is Y`).
 * @template Fallback
 *   Value to yield if `Fn` is not a type guard.
 */ /**
 * @typedef {(
 *   Check extends null | undefined // No test.
 *   ? Value
 *   : Value extends {type: Check} // String (type) test.
 *   ? Value
 *   : Value extends Check // Partial test.
 *   ? Value
 *   : Check extends Function // Function test.
 *   ? Predicate<Check, Value> extends Value
 *     ? Predicate<Check, Value>
 *     : never
 *   : never // Some other test?
 * )} MatchesOne
 *   Check whether a node matches a primitive check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test, but not arrays.
 */ /**
 * @typedef {(
 *   Check extends Array<any>
 *   ? MatchesOne<Value, Check[keyof Check]>
 *   : MatchesOne<Value, Check>
 * )} Matches
 *   Check whether a node matches a check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test.
 */ /**
 * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint
 *   Number; capped reasonably.
 */ /**
 * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment
 *   Increment a number in the type system.
 * @template {Uint} [I=0]
 *   Index.
 */ /**
 * @typedef {(
 *   Node extends UnistParent
 *   ? Node extends {children: Array<infer Children>}
 *     ? Child extends Children ? Node : never
 *     : never
 *   : never
 * )} InternalParent
 *   Collect nodes that can be parents of `Child`.
 * @template {UnistNode} Node
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent
 *   Collect nodes in `Tree` that can be parents of `Child`.
 * @template {UnistNode} Tree
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {(
 *   Depth extends Max
 *   ? never
 *   :
 *     | InternalParent<Node, Child>
 *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>
 * )} InternalAncestor
 *   Collect nodes in `Tree` that can be ancestors of `Child`.
 * @template {UnistNode} Node
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 * @template {Uint} [Max=10]
 *   Max; searches up to this depth.
 * @template {Uint} [Depth=0]
 *   Current depth.
 */ /**
 * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor
 *   Collect nodes in `Tree` that can be ancestors of `Child`.
 * @template {UnistNode} Tree
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {(
 *   Tree extends UnistParent
 *     ? Depth extends Max
 *       ? Tree
 *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>
 *     : Tree
 * )} InclusiveDescendant
 *   Collect all (inclusive) descendants of `Tree`.
 *
 *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to
 *   > recurse without actually running into an infinite loop, which the
 *   > previous version did.
 *   >
 *   > Practically, a max of `2` is typically enough assuming a `Root` is
 *   > passed, but it doesn’t improve performance.
 *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.
 *   > Using up to `10` doesn’t hurt or help either.
 * @template {UnistNode} Tree
 *   Tree type.
 * @template {Uint} [Max=10]
 *   Max; searches up to this depth.
 * @template {Uint} [Depth=0]
 *   Current depth.
 */ /**
 * @typedef {'skip' | boolean} Action
 *   Union of the action types.
 *
 * @typedef {number} Index
 *   Move to the sibling at `index` next (after node itself is completely
 *   traversed).
 *
 *   Useful if mutating the tree, such as removing the node the visitor is
 *   currently on, or any of its previous siblings.
 *   Results less than 0 or greater than or equal to `children.length` stop
 *   traversing the parent.
 *
 * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple
 *   List with one or two values, the first an action, the second an index.
 *
 * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult
 *   Any value that can be returned from a visitor.
 */ /**
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform the parent of node (the last of `ancestors`).
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of an ancestor still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Array<VisitedParents>} ancestors
 *   Ancestors of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 * @template {UnistNode} [Visited=UnistNode]
 *   Visited node type.
 * @template {UnistParent} [VisitedParents=UnistParent]
 *   Ancestor type.
 */ /**
 * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor
 *   Build a typed `Visitor` function from a tree and a test.
 *
 *   It will infer which values are passed as `node` and which as `parents`.
 * @template {UnistNode} [Tree=UnistNode]
 *   Tree type.
 * @template {Test} [Check=Test]
 *   Test type.
 */ __turbopack_esm__({
    "CONTINUE": ()=>CONTINUE,
    "EXIT": ()=>EXIT,
    "SKIP": ()=>SKIP,
    "visitParents": ()=>visitParents
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$6$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$is$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$color$2e$node$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.node.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
/** @type {Readonly<ActionTuple>} */ const empty = [];
const CONTINUE = true;
const EXIT = false;
const SKIP = 'skip';
function visitParents(tree, test, visitor, reverse) {
    /** @type {Test} */ let check;
    if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        // @ts-expect-error no visitor given, so `visitor` is test.
        visitor = test;
    } else {
        // @ts-expect-error visitor given, so `test` isn’t a visitor.
        check = test;
    }
    const is = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$6$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$is$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["convert"](check);
    const step = reverse ? -1 : 1;
    factory(tree, undefined, [])();
    /**
   * @param {UnistNode} node
   * @param {number | undefined} index
   * @param {Array<UnistParent>} parents
   */ function factory(node, index, parents) {
        const value = node && typeof node === 'object' ? node : {};
        if (typeof value.type === 'string') {
            const name = // `hast`
            typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;
            Object.defineProperty(visit, 'name', {
                value: 'node (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$color$2e$node$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["color"](node.type + (name ? '<' + name + '>' : '')) + ')'
            });
        }
        return visit;
        function visit() {
            /** @type {Readonly<ActionTuple>} */ let result = empty;
            /** @type {Readonly<ActionTuple>} */ let subresult;
            /** @type {number} */ let offset;
            /** @type {Array<UnistParent>} */ let grandparents;
            if (!test || is(node, index, parents[parents.length - 1] || undefined)) {
                // @ts-expect-error: `visitor` is now a visitor.
                result = toResult(visitor(node, parents));
                if (result[0] === EXIT) {
                    return result;
                }
            }
            if ('children' in node && node.children) {
                const nodeAsParent = node;
                if (nodeAsParent.children && result[0] !== SKIP) {
                    offset = (reverse ? nodeAsParent.children.length : -1) + step;
                    grandparents = parents.concat(nodeAsParent);
                    while(offset > -1 && offset < nodeAsParent.children.length){
                        const child = nodeAsParent.children[offset];
                        subresult = factory(child, offset, grandparents)();
                        if (subresult[0] === EXIT) {
                            return subresult;
                        }
                        offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
                    }
                }
            }
            return result;
        }
    }
}
/**
 * Turn a return value into a clean result.
 *
 * @param {VisitorResult} value
 *   Valid return values from visitors.
 * @returns {Readonly<ActionTuple>}
 *   Clean result.
 */ function toResult(value) {
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === 'number') {
        return [
            CONTINUE,
            value
        ];
    }
    return value === null || value === undefined ? empty : [
        value
    ];
}

})()),
"[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exported from `index.d.ts`
__turbopack_esm__({
    "CONTINUE": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CONTINUE"],
    "EXIT": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["EXIT"],
    "SKIP": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SKIP"],
    "visitParents": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visitParents"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */ /**
 * @typedef {Record<string, unknown>} Props
 * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test
 *   Check for an arbitrary node, unaware of TypeScript inferral.
 *
 * @callback TestFunctionAnything
 *   Check if a node passes a test, unaware of TypeScript inferral.
 * @param {unknown} this
 *   The given context.
 * @param {Node} node
 *   A node.
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean | void}
 *   Whether this node passes the test.
 */ /**
 * @template {Node} Kind
 *   Node type.
 * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest
 *   Check for a node that can be inferred by TypeScript.
 */ /**
 * Check if a node passes a certain test.
 *
 * @template {Node} Kind
 *   Node type.
 * @callback TestFunctionPredicate
 *   Complex test function for a node that can be inferred by TypeScript.
 * @param {Node} node
 *   A node.
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {node is Kind}
 *   Whether this node passes the test.
 */ /**
 * @callback AssertAnything
 *   Check that an arbitrary value is a node, unaware of TypeScript inferral.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean}
 *   Whether this is a node and passes a test.
 */ /**
 * Check if a node is a node and passes a certain node test.
 *
 * @template {Node} Kind
 *   Node type.
 * @callback AssertPredicate
 *   Check that an arbitrary value is a specific node, aware of TypeScript.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {node is Kind}
 *   Whether this is a node and passes a test.
 */ /**
 * Check if `node` is a `Node` and whether it passes the given test.
 *
 * @param node
 *   Thing to check, typically `Node`.
 * @param test
 *   A check for a specific node.
 * @param index
 *   The node’s position in its parent.
 * @param parent
 *   The node’s parent.
 * @returns
 *   Whether `node` is a node and passes a test.
 */ __turbopack_esm__({
    "convert": ()=>convert,
    "is": ()=>is
});
const is = /**
     * @param {unknown} [node]
     * @param {Test} [test]
     * @param {number | null | undefined} [index]
     * @param {Parent | null | undefined} [parent]
     * @param {unknown} [context]
     * @returns {boolean}
     */ // eslint-disable-next-line max-params
function is(node, test, index, parent, context) {
    const check = convert(test);
    if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
        throw new Error('Expected positive finite index');
    }
    if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {
        throw new Error('Expected parent node');
    }
    if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {
        throw new Error('Expected both parent and index');
    }
    // @ts-expect-error Looks like a node.
    return node && node.type && typeof node.type === 'string' ? Boolean(check.call(context, node, index, parent)) : false;
};
const convert = /**
     * @param {Test} [test]
     * @returns {AssertAnything}
     */ function(test) {
    if (test === undefined || test === null) {
        return ok;
    }
    if (typeof test === 'string') {
        return typeFactory(test);
    }
    if (typeof test === 'object') {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === 'function') {
        return castFactory(test);
    }
    throw new Error('Expected function, string, or object as test');
};
/**
 * @param {Array<string | Props | TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */ function anyFactory(tests) {
    /** @type {Array<AssertAnything>} */ const checks = [];
    let index = -1;
    while(++index < tests.length){
        checks[index] = convert(tests[index]);
    }
    return castFactory(any);
    /**
   * @this {unknown}
   * @param {Array<unknown>} parameters
   * @returns {boolean}
   */ function any(...parameters) {
        let index = -1;
        while(++index < checks.length){
            if (checks[index].call(this, ...parameters)) return true;
        }
        return false;
    }
}
/**
 * Turn an object into a test for a node with a certain fields.
 *
 * @param {Props} check
 * @returns {AssertAnything}
 */ function propsFactory(check) {
    return castFactory(all);
    /**
   * @param {Node} node
   * @returns {boolean}
   */ function all(node) {
        /** @type {string} */ let key;
        for(key in check){
            // @ts-expect-error: hush, it sure works as an index.
            if (node[key] !== check[key]) return false;
        }
        return true;
    }
}
/**
 * Turn a string into a test for a node with a certain type.
 *
 * @param {string} check
 * @returns {AssertAnything}
 */ function typeFactory(check) {
    return castFactory(type);
    /**
   * @param {Node} node
   */ function type(node) {
        return node && node.type === check;
    }
}
/**
 * Turn a custom test into a test for a node that passes that test.
 *
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */ function castFactory(check) {
    return assertion;
    /**
   * @this {unknown}
   * @param {unknown} node
   * @param {Array<unknown>} parameters
   * @returns {boolean}
   */ function assertion(node, ...parameters) {
        return Boolean(node && typeof node === 'object' && 'type' in node && // @ts-expect-error: fine.
        Boolean(check.call(this, node, ...parameters)));
    }
}
function ok() {
    return true;
}

})()),
"[project]/node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Test} Test
 * @typedef {import('./lib/index.js').TestFunctionAnything} TestFunctionAnything
 * @typedef {import('./lib/index.js').AssertAnything} AssertAnything
 */ /**
 * @template {import('unist').Node} Kind
 * @typedef {import('./lib/index.js').PredicateTest<Kind>} PredicateTest
 */ /**
 * @template {import('unist').Node} Kind
 * @typedef {import('./lib/index.js').TestFunctionPredicate<Kind>} TestFunctionPredicate
 */ /**
 * @template {import('unist').Node} Kind
 * @typedef {import('./lib/index.js').AssertPredicate<Kind>} AssertPredicate
 */ __turbopack_esm__({
    "convert": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$5$2e$2$2e$1$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["convert"],
    "is": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$5$2e$2$2e$1$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["is"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$5$2e$2$2e$1$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */ /**
 * @template Fn
 * @template Fallback
 * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate
 */ /**
 * @callback Check
 *   Check that an arbitrary value is a node.
 * @param {unknown} this
 *   The given context.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean}
 *   Whether this is a node and passes a test.
 *
 * @typedef {Record<string, unknown> | Node} Props
 *   Object to check for equivalence.
 *
 *   Note: `Node` is included as it is common but is not indexable.
 *
 * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test
 *   Check for an arbitrary node.
 *
 * @callback TestFunction
 *   Check if a node passes a test.
 * @param {unknown} this
 *   The given context.
 * @param {Node} node
 *   A node.
 * @param {number | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean | undefined | void}
 *   Whether this node passes the test.
 *
 *   Note: `void` is included until TS sees no return as `undefined`.
 */ /**
 * Check if `node` is a `Node` and whether it passes the given test.
 *
 * @param {unknown} node
 *   Thing to check, typically `Node`.
 * @param {Test} test
 *   A check for a specific node.
 * @param {number | null | undefined} index
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} parent
 *   The node’s parent.
 * @param {unknown} context
 *   Context object (`this`) to pass to `test` functions.
 * @returns {boolean}
 *   Whether `node` is a node and passes a test.
 */ __turbopack_esm__({
    "convert": ()=>convert,
    "is": ()=>is
});
const is = /**
     * @param {unknown} [node]
     * @param {Test} [test]
     * @param {number | null | undefined} [index]
     * @param {Parent | null | undefined} [parent]
     * @param {unknown} [context]
     * @returns {boolean}
     */ // eslint-disable-next-line max-params
function(node, test, index, parent, context) {
    const check = convert(test);
    if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
        throw new Error('Expected positive finite index');
    }
    if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {
        throw new Error('Expected parent node');
    }
    if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {
        throw new Error('Expected both parent and index');
    }
    return looksLikeANode(node) ? check.call(context, node, index, parent) : false;
};
const convert = /**
     * @param {Test} [test]
     * @returns {Check}
     */ function(test) {
    if (test === null || test === undefined) {
        return ok;
    }
    if (typeof test === 'function') {
        return castFactory(test);
    }
    if (typeof test === 'object') {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === 'string') {
        return typeFactory(test);
    }
    throw new Error('Expected function, string, or object as test');
};
/**
 * @param {Array<Props | TestFunction | string>} tests
 * @returns {Check}
 */ function anyFactory(tests) {
    /** @type {Array<Check>} */ const checks = [];
    let index = -1;
    while(++index < tests.length){
        checks[index] = convert(tests[index]);
    }
    return castFactory(any);
    /**
   * @this {unknown}
   * @type {TestFunction}
   */ function any(...parameters) {
        let index = -1;
        while(++index < checks.length){
            if (checks[index].apply(this, parameters)) return true;
        }
        return false;
    }
}
/**
 * Turn an object into a test for a node with a certain fields.
 *
 * @param {Props} check
 * @returns {Check}
 */ function propsFactory(check) {
    const checkAsRecord = check;
    return castFactory(all);
    /**
   * @param {Node} node
   * @returns {boolean}
   */ function all(node) {
        const nodeAsRecord = node;
        /** @type {string} */ let key;
        for(key in check){
            if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
        }
        return true;
    }
}
/**
 * Turn a string into a test for a node with a certain type.
 *
 * @param {string} check
 * @returns {Check}
 */ function typeFactory(check) {
    return castFactory(type);
    /**
   * @param {Node} node
   */ function type(node) {
        return node && node.type === check;
    }
}
/**
 * Turn a custom test into a test for a node that passes that test.
 *
 * @param {TestFunction} testFunction
 * @returns {Check}
 */ function castFactory(testFunction) {
    return check;
    /**
   * @this {unknown}
   * @type {Check}
   */ function check(value, index, parent) {
        return Boolean(looksLikeANode(value) && testFunction.call(this, value, typeof index === 'number' ? index : undefined, parent || undefined));
    }
}
function ok() {
    return true;
}
/**
 * @param {unknown} value
 * @returns {value is Node}
 */ function looksLikeANode(value) {
    return value !== null && typeof value === 'object' && 'type' in value;
}

})()),
"[project]/node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Check} Check
 * @typedef {import('./lib/index.js').Test} Test
 * @typedef {import('./lib/index.js').TestFunction} TestFunction
 */ __turbopack_esm__({
    "convert": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$6$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["convert"],
    "is": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$6$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["is"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$is$40$6$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$is$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-visit@4.1.2/node_modules/unist-util-visit/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 */ /**
 * Check if `Child` can be a child of `Ancestor`.
 *
 * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns
 * `never`.
 *
 * @template {Node} Ancestor
 *   Node type.
 * @template {Node} Child
 *   Node type.
 * @typedef {(
 *   Ancestor extends Parent
 *     ? Child extends Ancestor['children'][number]
 *       ? Ancestor
 *       : never
 *     : never
 * )} ParentsOf
 */ /**
 * @template {Node} [Visited=Node]
 *   Visited node type.
 * @template {Parent} [Ancestor=Parent]
 *   Ancestor type.
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform `parent`.
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of `parent` still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Visited extends Node ? number | null : never} index
 *   Index of `node` in `parent`.
 * @param {Ancestor extends Node ? Ancestor | null : never} parent
 *   Parent of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */ /**
 * Build a typed `Visitor` function from a node and all possible parents.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} Visited
 *   Node type.
 * @template {Parent} Ancestor
 *   Parent type.
 * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch
 */ /**
 * Build a typed `Visitor` function from a list of descendants and a test.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} Descendant
 *   Node type.
 * @template {Test} Check
 *   Test type.
 * @typedef {(
 *   BuildVisitorFromMatch<
 *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,
 *     Extract<Descendant, Parent>
 *   >
 * )} BuildVisitorFromDescendants
 */ /**
 * Build a typed `Visitor` function from a tree and a test.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} [Tree=Node]
 *   Node type.
 * @template {Test} [Check=string]
 *   Test type.
 * @typedef {(
 *   BuildVisitorFromDescendants<
 *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,
 *     Check
 *   >
 * )} BuildVisitor
 */ __turbopack_esm__({
    "CONTINUE": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CONTINUE"],
    "EXIT": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["EXIT"],
    "SKIP": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SKIP"],
    "visit": ()=>visit
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const visit = /**
     * @param {Node} tree
     * @param {Test} test
     * @param {Visitor} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {void}
     */ function(tree, test, visitor, reverse) {
    if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        visitor = test;
        test = null;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$5$2e$1$2e$3$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visitParents"](tree, test, overload, reverse);
    /**
       * @param {Node} node
       * @param {Array<Parent>} parents
       */ function overload(node, parents) {
        const parent = parents[parents.length - 1];
        return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
    }
};
;

})()),
"[project]/node_modules/.pnpm/unist-util-visit@4.1.2/node_modules/unist-util-visit/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exported from `index.d.ts`
__turbopack_esm__({
    "CONTINUE": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$4$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CONTINUE"],
    "EXIT": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$4$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["EXIT"],
    "SKIP": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$4$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SKIP"],
    "visit": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$4$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visit"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$4$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit@4.1.2/node_modules/unist-util-visit/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} UnistNode
 * @typedef {import('unist').Parent} UnistParent
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 */ /**
 * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test
 *   Test from `unist-util-is`.
 *
 *   Note: we have remove and add `undefined`, because otherwise when generating
 *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,
 *   which doesn’t work when publishing on npm.
 */ // To do: use types from `unist-util-visit-parents` when it’s released.
/**
 * @typedef {(
 *   Fn extends (value: any) => value is infer Thing
 *   ? Thing
 *   : Fallback
 * )} Predicate
 *   Get the value of a type guard `Fn`.
 * @template Fn
 *   Value; typically function that is a type guard (such as `(x): x is Y`).
 * @template Fallback
 *   Value to yield if `Fn` is not a type guard.
 */ /**
 * @typedef {(
 *   Check extends null | undefined // No test.
 *   ? Value
 *   : Value extends {type: Check} // String (type) test.
 *   ? Value
 *   : Value extends Check // Partial test.
 *   ? Value
 *   : Check extends Function // Function test.
 *   ? Predicate<Check, Value> extends Value
 *     ? Predicate<Check, Value>
 *     : never
 *   : never // Some other test?
 * )} MatchesOne
 *   Check whether a node matches a primitive check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test, but not arrays.
 */ /**
 * @typedef {(
 *   Check extends Array<any>
 *   ? MatchesOne<Value, Check[keyof Check]>
 *   : MatchesOne<Value, Check>
 * )} Matches
 *   Check whether a node matches a check in the type system.
 * @template Value
 *   Value; typically unist `Node`.
 * @template Check
 *   Value; typically `unist-util-is`-compatible test.
 */ /**
 * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint
 *   Number; capped reasonably.
 */ /**
 * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment
 *   Increment a number in the type system.
 * @template {Uint} [I=0]
 *   Index.
 */ /**
 * @typedef {(
 *   Node extends UnistParent
 *   ? Node extends {children: Array<infer Children>}
 *     ? Child extends Children ? Node : never
 *     : never
 *   : never
 * )} InternalParent
 *   Collect nodes that can be parents of `Child`.
 * @template {UnistNode} Node
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent
 *   Collect nodes in `Tree` that can be parents of `Child`.
 * @template {UnistNode} Tree
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 */ /**
 * @typedef {(
 *   Depth extends Max
 *   ? never
 *   :
 *     | InternalParent<Node, Child>
 *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>
 * )} InternalAncestor
 *   Collect nodes in `Tree` that can be ancestors of `Child`.
 * @template {UnistNode} Node
 *   All node types in a tree.
 * @template {UnistNode} Child
 *   Node to search for.
 * @template {Uint} [Max=10]
 *   Max; searches up to this depth.
 * @template {Uint} [Depth=0]
 *   Current depth.
 */ /**
 * @typedef {(
 *   Tree extends UnistParent
 *     ? Depth extends Max
 *       ? Tree
 *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>
 *     : Tree
 * )} InclusiveDescendant
 *   Collect all (inclusive) descendants of `Tree`.
 *
 *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to
 *   > recurse without actually running into an infinite loop, which the
 *   > previous version did.
 *   >
 *   > Practically, a max of `2` is typically enough assuming a `Root` is
 *   > passed, but it doesn’t improve performance.
 *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.
 *   > Using up to `10` doesn’t hurt or help either.
 * @template {UnistNode} Tree
 *   Tree type.
 * @template {Uint} [Max=10]
 *   Max; searches up to this depth.
 * @template {Uint} [Depth=0]
 *   Current depth.
 */ /**
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform `parent`.
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of `parent` still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Visited extends UnistNode ? number | undefined : never} index
 *   Index of `node` in `parent`.
 * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent
 *   Parent of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 * @template {UnistNode} [Visited=UnistNode]
 *   Visited node type.
 * @template {UnistParent} [Ancestor=UnistParent]
 *   Ancestor type.
 */ /**
 * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch
 *   Build a typed `Visitor` function from a node and all possible parents.
 *
 *   It will infer which values are passed as `node` and which as `parent`.
 * @template {UnistNode} Visited
 *   Node type.
 * @template {UnistParent} Ancestor
 *   Parent type.
 */ /**
 * @typedef {(
 *   BuildVisitorFromMatch<
 *     Matches<Descendant, Check>,
 *     Extract<Descendant, UnistParent>
 *   >
 * )} BuildVisitorFromDescendants
 *   Build a typed `Visitor` function from a list of descendants and a test.
 *
 *   It will infer which values are passed as `node` and which as `parent`.
 * @template {UnistNode} Descendant
 *   Node type.
 * @template {Test} Check
 *   Test type.
 */ /**
 * @typedef {(
 *   BuildVisitorFromDescendants<
 *     InclusiveDescendant<Tree>,
 *     Check
 *   >
 * )} BuildVisitor
 *   Build a typed `Visitor` function from a tree and a test.
 *
 *   It will infer which values are passed as `node` and which as `parent`.
 * @template {UnistNode} [Tree=UnistNode]
 *   Node type.
 * @template {Test} [Check=Test]
 *   Test type.
 */ __turbopack_esm__({
    "CONTINUE": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CONTINUE"],
    "EXIT": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["EXIT"],
    "SKIP": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SKIP"],
    "visit": ()=>visit
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
    /** @type {boolean | null | undefined} */ let reverse;
    /** @type {Test} */ let test;
    /** @type {Visitor} */ let visitor;
    if (typeof testOrVisitor === 'function' && typeof visitorOrReverse !== 'function') {
        test = undefined;
        visitor = testOrVisitor;
        reverse = visitorOrReverse;
    } else {
        // @ts-expect-error: assume the overload with test was given.
        test = testOrVisitor;
        // @ts-expect-error: assume the overload with test was given.
        visitor = visitorOrReverse;
        reverse = maybeReverse;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$2d$parents$40$6$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visitParents"](tree, test, overload, reverse);
    /**
   * @param {UnistNode} node
   * @param {Array<UnistParent>} parents
   */ function overload(node, parents) {
        const parent = parents[parents.length - 1];
        const index = parent ? parent.children.indexOf(node) : undefined;
        return visitor(node, index, parent);
    }
}

})()),
"[project]/node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exported from `index.d.ts`
__turbopack_esm__({
    "CONTINUE": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CONTINUE"],
    "EXIT": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["EXIT"],
    "SKIP": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SKIP"],
    "visit": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visit"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/collapse-white-space@2.1.0/node_modules/collapse-white-space/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {'html'|'js'} Style
 *
 * @typedef Options
 *   Configuration.
 * @property {Style} [style='js']
 *   Style of white space to support.
 * @property {boolean} [preserveLineEndings=false]
 *   Whether to collapse white space containing a line ending to that line
 *   ending.
 *   The default is to collapse to a single space.
 * @property {boolean} [trim=false]
 *   Whether to drop white space at the start and end of `value`.
 *   The default is to keep it.
 */ __turbopack_esm__({
    "collapseWhiteSpace": ()=>collapseWhiteSpace
});
const js = /\s+/g;
const html = /[\t\n\v\f\r ]+/g;
function collapseWhiteSpace(value, options) {
    if (!options) {
        options = {};
    } else if (typeof options === 'string') {
        options = {
            style: options
        };
    }
    const replace = options.preserveLineEndings ? replaceLineEnding : replaceSpace;
    return String(value).replace(options.style === 'html' ? html : js, options.trim ? trimFactory(replace) : replace);
}
/**
 * Replace white space with a line ending as that line ending and otherwise a
 * space.
 *
 * @param {string} value
 * @returns {string}
 */ function replaceLineEnding(value) {
    const match = /\r?\n|\r/.exec(value);
    return match ? match[0] : ' ';
}
/**
 * Replace white space with a space.
 *
 * @returns {string}
 */ function replaceSpace() {
    return ' ';
}
/**
 * @param {(value: string) => string} replace
 */ function trimFactory(replace) {
    return dropOrReplace;
    /**
   * Replace white space with nothing if it starts or ends the string.
   * Calls `replace` otherwise.
   *
   * @param {string} value
   * @param {number} index
   * @param {string} all
   * @returns {string}
   */ function dropOrReplace(value, index, all) {
        return index === 0 || index + value.length === all.length ? '' : replace(value);
    }
}

})()),
"[project]/node_modules/.pnpm/hast-util-whitespace@2.0.1/node_modules/hast-util-whitespace/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Check if the given value is *inter-element whitespace*.
 *
 * @param {unknown} thing
 *   Thing to check (typically `Node` or `string`).
 * @returns {boolean}
 *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
 *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
 *   (`\r`), or form feed (`\f`).
 *   If a node is passed it must be a `Text` node, whose `value` field is
 *   checked.
 */ __turbopack_esm__({
    "whitespace": ()=>whitespace
});
function whitespace(thing) {
    /** @type {string} */ const value = // @ts-expect-error looks like a node.
    thing && typeof thing === 'object' && thing.type === 'text' ? thing.value || '' : thing;
    // HTML whitespace expression.
    // See <https://infra.spec.whatwg.org/#ascii-whitespace>.
    return typeof value === 'string' && value.replace(/[ \t\n\f\r]/g, '') === '';
}

})()),
"[project]/node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('hast').Nodes} Nodes
 */ // HTML whitespace expression.
// See <https://infra.spec.whatwg.org/#ascii-whitespace>.
__turbopack_esm__({
    "whitespace": ()=>whitespace
});
const re = /[ \t\n\f\r]/g;
function whitespace(thing) {
    return typeof thing === 'object' ? thing.type === 'text' ? empty(thing.value) : false : empty(thing);
}
/**
 * @param {string} value
 * @returns {boolean}
 */ function empty(value) {
    return value.replace(re, '') === '';
}

})()),
"[project]/node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "whitespace": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["whitespace"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/estree-util-attach-comments@2.1.1/node_modules/estree-util-attach-comments/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').BaseNode} EstreeNode
 * @typedef {import('estree').Comment} EstreeComment
 *
 * @typedef State
 *   Info passed around.
 * @property {Array<EstreeComment>} comments
 *   Comments.
 * @property {number} index
 *   Index of comment.
 *
 * @typedef Fields
 * @property {boolean} leading
 * @property {boolean} trailing
 */ __turbopack_esm__({
    "attachComments": ()=>attachComments
});
const own = {}.hasOwnProperty;
function attachComments(tree, comments) {
    const list = (comments || []).concat().sort(compare);
    if (list.length > 0) walk(tree, {
        comments: list,
        index: 0
    });
    return tree;
}
/**
 * Attach semistandard estree comment nodes to the tree.
 *
 * @param {EstreeNode} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function walk(node, state) {
    // Done, we can quit.
    if (state.index === state.comments.length) {
        return;
    }
    /** @type {Array<EstreeNode>} */ const children = [];
    /** @type {Array<EstreeComment>} */ const comments = [];
    /** @type {string} */ let key;
    // Find all children of `node`
    for(key in node){
        if (own.call(node, key)) {
            /** @type {EstreeNode | Array<EstreeNode>} */ // @ts-expect-error: indexable.
            const value = node[key];
            // Ignore comments.
            if (value && typeof value === 'object' && key !== 'comments') {
                if (Array.isArray(value)) {
                    let index = -1;
                    while(++index < value.length){
                        if (value[index] && typeof value[index].type === 'string') {
                            children.push(value[index]);
                        }
                    }
                } else if (typeof value.type === 'string') {
                    children.push(value);
                }
            }
        }
    }
    // Sort the children.
    children.sort(compare);
    // Initial comments.
    comments.push(...slice(state, node, false, {
        leading: true,
        trailing: false
    }));
    let index = -1;
    while(++index < children.length){
        walk(children[index], state);
    }
    // Dangling or trailing comments.
    comments.push(...slice(state, node, true, {
        leading: false,
        trailing: children.length > 0
    }));
    if (comments.length > 0) {
        // @ts-expect-error, yes, because they’re nonstandard.
        node.comments = comments;
    }
}
/**
 * @param {State} state
 *   Info passed around.
 * @param {EstreeNode} node
 *   Node.
 * @param {boolean} compareEnd
 *   Whether to compare on the end (default is on start).
 * @param {Fields} fields
 *   Fields.
 * @returns {Array<EstreeComment>}
 *   Slice from `state.comments`.
 */ function slice(state, node, compareEnd, fields) {
    /** @type {Array<EstreeComment>} */ const result = [];
    while(state.comments[state.index] && compare(state.comments[state.index], node, compareEnd) < 1){
        result.push(Object.assign({}, state.comments[state.index++], fields));
    }
    return result;
}
/**
 * Sort two nodes (or comments).
 *
 * @param {EstreeNode | EstreeComment} left
 *   A node.
 * @param {EstreeNode | EstreeComment} right
 *   The other node.
 * @param {boolean | undefined} [compareEnd=false]
 *   Compare on `end` of `right`, default is to compare on `start`.
 * @returns {number}
 *   Sorting.
 */ function compare(left, right, compareEnd) {
    const field = compareEnd ? 'end' : 'start';
    // Offsets.
    if (left.range && right.range) {
        return left.range[0] - right.range[compareEnd ? 1 : 0];
    }
    // Points.
    if (left.loc && left.loc.start && right.loc && right.loc[field]) {
        return left.loc.start.line - right.loc[field].line || left.loc.start.column - right.loc[field].column;
    }
    // Just `start` (and `end`) on nodes.
    // Default in most parsers.
    if ('start' in left && field in right) {
        // @ts-expect-error Added by Acorn
        return left.start - right[field];
    }
    return Number.NaN;
}

})()),
"[project]/node_modules/.pnpm/estree-util-attach-comments@2.1.1/node_modules/estree-util-attach-comments/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "attachComments": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-attach-comments@2.1.1/node_modules/estree-util-attach-comments/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/estree-util-attach-comments@3.0.0/node_modules/estree-util-attach-comments/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Comment} Comment
 * @typedef {import('estree').Node} Nodes
 */ /**
 * @typedef Fields
 *   Fields.
 * @property {boolean} leading
 *   Whether it’s leading.
 * @property {boolean} trailing
 *   Whether it’s trailing.
 *
 * @typedef State
 *   Info passed around.
 * @property {Array<Comment>} comments
 *   Comments.
 * @property {number} index
 *   Index of comment.
 */ __turbopack_esm__({
    "attachComments": ()=>attachComments
});
const own = {}.hasOwnProperty;
/** @type {Array<Comment>} */ const emptyComments = [];
function attachComments(tree, comments) {
    const list = comments ? [
        ...comments
    ].sort(compare) : emptyComments;
    if (list.length > 0) walk(tree, {
        comments: list,
        index: 0
    });
}
/**
 * Attach semistandard estree comment nodes to the tree.
 *
 * @param {Nodes} node
 *   Node.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function walk(node, state) {
    // Done, we can quit.
    if (state.index === state.comments.length) {
        return;
    }
    /** @type {Array<Nodes>} */ const children = [];
    /** @type {Array<Comment>} */ const comments = [];
    /** @type {string} */ let key;
    // Find all children of `node`
    for(key in node){
        if (own.call(node, key)) {
            /** @type {Array<Nodes> | Nodes} */ // @ts-expect-error: indexable.
            const value = node[key];
            // Ignore comments.
            if (value && typeof value === 'object' && key !== 'comments') {
                if (Array.isArray(value)) {
                    let index = -1;
                    while(++index < value.length){
                        if (value[index] && typeof value[index].type === 'string') {
                            children.push(value[index]);
                        }
                    }
                } else if (typeof value.type === 'string') {
                    children.push(value);
                }
            }
        }
    }
    // Sort the children.
    children.sort(compare);
    // Initial comments.
    comments.push(...slice(state, node, false, {
        leading: true,
        trailing: false
    }));
    let index = -1;
    while(++index < children.length){
        walk(children[index], state);
    }
    // Dangling or trailing comments.
    comments.push(...slice(state, node, true, {
        leading: false,
        trailing: children.length > 0
    }));
    if (comments.length > 0) {
        // @ts-expect-error, yes, because they’re nonstandard.
        node.comments = comments;
    }
}
/**
 * @param {State} state
 *   Info passed around.
 * @param {Nodes} node
 *   Node.
 * @param {boolean} compareEnd
 *   Whether to compare on the end (default is on start).
 * @param {Fields} fields
 *   Fields.
 * @returns {Array<Comment>}
 *   Slice from `state.comments`.
 */ function slice(state, node, compareEnd, fields) {
    /** @type {Array<Comment>} */ const result = [];
    while(state.comments[state.index] && compare(state.comments[state.index], node, compareEnd) < 1){
        result.push(Object.assign({}, state.comments[state.index++], fields));
    }
    return result;
}
/**
 * Sort two nodes (or comments).
 *
 * @param {Comment | Nodes} left
 *   A node.
 * @param {Comment | Nodes} right
 *   The other node.
 * @param {boolean | undefined} [compareEnd=false]
 *   Compare on `end` of `right`, default is to compare on `start` (default:
 *   `false`).
 * @returns {number}
 *   Sorting.
 */ function compare(left, right, compareEnd) {
    const field = compareEnd ? 'end' : 'start';
    // Offsets.
    if (left.range && right.range) {
        return left.range[0] - right.range[compareEnd ? 1 : 0];
    }
    // Points.
    if (left.loc && left.loc.start && right.loc && right.loc[field]) {
        return left.loc.start.line - right.loc[field].line || left.loc.start.column - right.loc[field].column;
    }
    // Just `start` (and `end`) on nodes.
    // Default in most parsers.
    if ('start' in left && field in right) {
        // @ts-expect-error Added by Acorn
        return left.start - right[field];
    }
    return Number.NaN;
}

})()),
"[project]/node_modules/.pnpm/estree-util-attach-comments@3.0.0/node_modules/estree-util-attach-comments/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "attachComments": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-attach-comments@3.0.0/node_modules/estree-util-attach-comments/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/normalize.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @param {string} value
 * @returns {string}
 */ __turbopack_esm__({
    "normalize": ()=>normalize
});
function normalize(value) {
    return value.toLowerCase();
}

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/hast-to-react.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * `hast` is close to `React`, but differs in a couple of cases.
 *
 * To get a React property from a hast property, check if it is in
 * `hastToReact`, if it is, then use the corresponding value,
 * otherwise, use the hast property.
 *
 * @type {Record<string, string>}
 */ __turbopack_esm__({
    "hastToReact": ()=>hastToReact
});
const hastToReact = {
    classId: 'classID',
    dataType: 'datatype',
    itemId: 'itemID',
    strokeDashArray: 'strokeDasharray',
    strokeDashOffset: 'strokeDashoffset',
    strokeLineCap: 'strokeLinecap',
    strokeLineJoin: 'strokeLinejoin',
    strokeMiterLimit: 'strokeMiterlimit',
    typeOf: 'typeof',
    xLinkActuate: 'xlinkActuate',
    xLinkArcRole: 'xlinkArcrole',
    xLinkHref: 'xlinkHref',
    xLinkRole: 'xlinkRole',
    xLinkShow: 'xlinkShow',
    xLinkTitle: 'xlinkTitle',
    xLinkType: 'xlinkType',
    xmlnsXLink: 'xmlnsXlink'
};

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/info.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Info": ()=>Info
});
class Info {
    /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */ constructor(property, attribute){
        /** @type {string} */ this.property = property;
        /** @type {string} */ this.attribute = attribute;
    }
}
/** @type {string|null} */ Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/types.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "boolean": ()=>boolean,
    "booleanish": ()=>booleanish,
    "commaOrSpaceSeparated": ()=>commaOrSpaceSeparated,
    "commaSeparated": ()=>commaSeparated,
    "number": ()=>number,
    "overloadedBoolean": ()=>overloadedBoolean,
    "spaceSeparated": ()=>spaceSeparated
});
let powers = 0;
const boolean = increment();
const booleanish = increment();
const overloadedBoolean = increment();
const number = increment();
const spaceSeparated = increment();
const commaSeparated = increment();
const commaOrSpaceSeparated = increment();
function increment() {
    return 2 ** ++powers;
}

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/defined-info.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "DefinedInfo": ()=>DefinedInfo
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$info$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/info.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/types.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
/** @type {Array<keyof types>} */ // @ts-expect-error: hush.
const checks = Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__);
class DefinedInfo extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$info$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["Info"] {
    /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */ constructor(property, attribute, mask, space){
        let index = -1;
        super(property, attribute);
        mark(this, 'space', space);
        if (typeof mask === 'number') {
            while(++index < checks.length){
                const check = checks[index];
                mark(this, checks[index], (mask & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__[check]) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__[check]);
            }
        }
    }
}
DefinedInfo.prototype.defined = true;
/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */ function mark(values, key, value) {
    if (value) {
        // @ts-expect-error: assume `value` matches the expected value of `key`.
        values[key] = value;
    }
}

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/find.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */ __turbopack_esm__({
    "find": ()=>find
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/normalize.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$defined$2d$info$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/defined-info.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$info$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/info.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
const valid = /^data[-\w.:]+$/i;
const dash = /-[a-z]/g;
const cap = /[A-Z]/g;
function find(schema, value) {
    const normal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["normalize"](value);
    let prop = value;
    let Type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$info$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["Info"];
    if (normal in schema.normal) {
        return schema.property[schema.normal[normal]];
    }
    if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
        // Attribute or property.
        if (value.charAt(4) === '-') {
            // Turn it into a property.
            const rest = value.slice(5).replace(dash, camelcase);
            prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
        } else {
            // Turn it into an attribute.
            const rest = value.slice(4);
            if (!dash.test(rest)) {
                let dashes = rest.replace(cap, kebab);
                if (dashes.charAt(0) !== '-') {
                    dashes = '-' + dashes;
                }
                value = 'data' + dashes;
            }
        }
        Type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$defined$2d$info$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["DefinedInfo"];
    }
    return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */ function kebab($0) {
    return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */ function camelcase($0) {
    return $0.charAt(1).toUpperCase();
}

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/case-sensitive-transform.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */ __turbopack_esm__({
    "caseSensitiveTransform": ()=>caseSensitiveTransform
});
function caseSensitiveTransform(attributes, attribute) {
    return attribute in attributes ? attributes[attribute] : attribute;
}

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/schema.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */ __turbopack_esm__({
    "Schema": ()=>Schema
});
class Schema {
    /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */ constructor(property, normal, space){
        this.property = property;
        this.normal = normal;
        if (space) {
            this.space = space;
        }
    }
}
/** @type {Properties} */ Schema.prototype.property = {};
/** @type {Normal} */ Schema.prototype.normal = {};
/** @type {string|null} */ Schema.prototype.space = null;

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/create.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */ __turbopack_esm__({
    "create": ()=>create
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/normalize.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$schema$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/schema.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$defined$2d$info$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/defined-info.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
const own = {}.hasOwnProperty;
function create(definition) {
    /** @type {Properties} */ const property = {};
    /** @type {Normal} */ const normal = {};
    /** @type {string} */ let prop;
    for(prop in definition.properties){
        if (own.call(definition.properties, prop)) {
            const value = definition.properties[prop];
            const info = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$defined$2d$info$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["DefinedInfo"](prop, definition.transform(definition.attributes || {}, prop), value, definition.space);
            if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
                info.mustUseProperty = true;
            }
            property[prop] = info;
            normal[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["normalize"](prop)] = prop;
            normal[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["normalize"](info.attribute)] = prop;
        }
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$schema$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["Schema"](property, normal, definition.space);
}

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/svg.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "svg": ()=>svg
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/create.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$sensitive$2d$transform$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/case-sensitive-transform.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
const svg = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["create"]({
    space: 'svg',
    attributes: {
        accentHeight: 'accent-height',
        alignmentBaseline: 'alignment-baseline',
        arabicForm: 'arabic-form',
        baselineShift: 'baseline-shift',
        capHeight: 'cap-height',
        className: 'class',
        clipPath: 'clip-path',
        clipRule: 'clip-rule',
        colorInterpolation: 'color-interpolation',
        colorInterpolationFilters: 'color-interpolation-filters',
        colorProfile: 'color-profile',
        colorRendering: 'color-rendering',
        crossOrigin: 'crossorigin',
        dataType: 'datatype',
        dominantBaseline: 'dominant-baseline',
        enableBackground: 'enable-background',
        fillOpacity: 'fill-opacity',
        fillRule: 'fill-rule',
        floodColor: 'flood-color',
        floodOpacity: 'flood-opacity',
        fontFamily: 'font-family',
        fontSize: 'font-size',
        fontSizeAdjust: 'font-size-adjust',
        fontStretch: 'font-stretch',
        fontStyle: 'font-style',
        fontVariant: 'font-variant',
        fontWeight: 'font-weight',
        glyphName: 'glyph-name',
        glyphOrientationHorizontal: 'glyph-orientation-horizontal',
        glyphOrientationVertical: 'glyph-orientation-vertical',
        hrefLang: 'hreflang',
        horizAdvX: 'horiz-adv-x',
        horizOriginX: 'horiz-origin-x',
        horizOriginY: 'horiz-origin-y',
        imageRendering: 'image-rendering',
        letterSpacing: 'letter-spacing',
        lightingColor: 'lighting-color',
        markerEnd: 'marker-end',
        markerMid: 'marker-mid',
        markerStart: 'marker-start',
        navDown: 'nav-down',
        navDownLeft: 'nav-down-left',
        navDownRight: 'nav-down-right',
        navLeft: 'nav-left',
        navNext: 'nav-next',
        navPrev: 'nav-prev',
        navRight: 'nav-right',
        navUp: 'nav-up',
        navUpLeft: 'nav-up-left',
        navUpRight: 'nav-up-right',
        onAbort: 'onabort',
        onActivate: 'onactivate',
        onAfterPrint: 'onafterprint',
        onBeforePrint: 'onbeforeprint',
        onBegin: 'onbegin',
        onCancel: 'oncancel',
        onCanPlay: 'oncanplay',
        onCanPlayThrough: 'oncanplaythrough',
        onChange: 'onchange',
        onClick: 'onclick',
        onClose: 'onclose',
        onCopy: 'oncopy',
        onCueChange: 'oncuechange',
        onCut: 'oncut',
        onDblClick: 'ondblclick',
        onDrag: 'ondrag',
        onDragEnd: 'ondragend',
        onDragEnter: 'ondragenter',
        onDragExit: 'ondragexit',
        onDragLeave: 'ondragleave',
        onDragOver: 'ondragover',
        onDragStart: 'ondragstart',
        onDrop: 'ondrop',
        onDurationChange: 'ondurationchange',
        onEmptied: 'onemptied',
        onEnd: 'onend',
        onEnded: 'onended',
        onError: 'onerror',
        onFocus: 'onfocus',
        onFocusIn: 'onfocusin',
        onFocusOut: 'onfocusout',
        onHashChange: 'onhashchange',
        onInput: 'oninput',
        onInvalid: 'oninvalid',
        onKeyDown: 'onkeydown',
        onKeyPress: 'onkeypress',
        onKeyUp: 'onkeyup',
        onLoad: 'onload',
        onLoadedData: 'onloadeddata',
        onLoadedMetadata: 'onloadedmetadata',
        onLoadStart: 'onloadstart',
        onMessage: 'onmessage',
        onMouseDown: 'onmousedown',
        onMouseEnter: 'onmouseenter',
        onMouseLeave: 'onmouseleave',
        onMouseMove: 'onmousemove',
        onMouseOut: 'onmouseout',
        onMouseOver: 'onmouseover',
        onMouseUp: 'onmouseup',
        onMouseWheel: 'onmousewheel',
        onOffline: 'onoffline',
        onOnline: 'ononline',
        onPageHide: 'onpagehide',
        onPageShow: 'onpageshow',
        onPaste: 'onpaste',
        onPause: 'onpause',
        onPlay: 'onplay',
        onPlaying: 'onplaying',
        onPopState: 'onpopstate',
        onProgress: 'onprogress',
        onRateChange: 'onratechange',
        onRepeat: 'onrepeat',
        onReset: 'onreset',
        onResize: 'onresize',
        onScroll: 'onscroll',
        onSeeked: 'onseeked',
        onSeeking: 'onseeking',
        onSelect: 'onselect',
        onShow: 'onshow',
        onStalled: 'onstalled',
        onStorage: 'onstorage',
        onSubmit: 'onsubmit',
        onSuspend: 'onsuspend',
        onTimeUpdate: 'ontimeupdate',
        onToggle: 'ontoggle',
        onUnload: 'onunload',
        onVolumeChange: 'onvolumechange',
        onWaiting: 'onwaiting',
        onZoom: 'onzoom',
        overlinePosition: 'overline-position',
        overlineThickness: 'overline-thickness',
        paintOrder: 'paint-order',
        panose1: 'panose-1',
        pointerEvents: 'pointer-events',
        referrerPolicy: 'referrerpolicy',
        renderingIntent: 'rendering-intent',
        shapeRendering: 'shape-rendering',
        stopColor: 'stop-color',
        stopOpacity: 'stop-opacity',
        strikethroughPosition: 'strikethrough-position',
        strikethroughThickness: 'strikethrough-thickness',
        strokeDashArray: 'stroke-dasharray',
        strokeDashOffset: 'stroke-dashoffset',
        strokeLineCap: 'stroke-linecap',
        strokeLineJoin: 'stroke-linejoin',
        strokeMiterLimit: 'stroke-miterlimit',
        strokeOpacity: 'stroke-opacity',
        strokeWidth: 'stroke-width',
        tabIndex: 'tabindex',
        textAnchor: 'text-anchor',
        textDecoration: 'text-decoration',
        textRendering: 'text-rendering',
        transformOrigin: 'transform-origin',
        typeOf: 'typeof',
        underlinePosition: 'underline-position',
        underlineThickness: 'underline-thickness',
        unicodeBidi: 'unicode-bidi',
        unicodeRange: 'unicode-range',
        unitsPerEm: 'units-per-em',
        vAlphabetic: 'v-alphabetic',
        vHanging: 'v-hanging',
        vIdeographic: 'v-ideographic',
        vMathematical: 'v-mathematical',
        vectorEffect: 'vector-effect',
        vertAdvY: 'vert-adv-y',
        vertOriginX: 'vert-origin-x',
        vertOriginY: 'vert-origin-y',
        wordSpacing: 'word-spacing',
        writingMode: 'writing-mode',
        xHeight: 'x-height',
        // These were camelcased in Tiny. Now lowercased in SVG 2
        playbackOrder: 'playbackorder',
        timelineBegin: 'timelinebegin'
    },
    transform: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$sensitive$2d$transform$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["caseSensitiveTransform"],
    properties: {
        about: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        accentHeight: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        accumulate: null,
        additive: null,
        alignmentBaseline: null,
        alphabetic: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        amplitude: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        arabicForm: null,
        ascent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        attributeName: null,
        attributeType: null,
        azimuth: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        bandwidth: null,
        baselineShift: null,
        baseFrequency: null,
        baseProfile: null,
        bbox: null,
        begin: null,
        bias: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        by: null,
        calcMode: null,
        capHeight: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        className: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        clip: null,
        clipPath: null,
        clipPathUnits: null,
        clipRule: null,
        color: null,
        colorInterpolation: null,
        colorInterpolationFilters: null,
        colorProfile: null,
        colorRendering: null,
        content: null,
        contentScriptType: null,
        contentStyleType: null,
        crossOrigin: null,
        cursor: null,
        cx: null,
        cy: null,
        d: null,
        dataType: null,
        defaultAction: null,
        descent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        diffuseConstant: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        direction: null,
        display: null,
        dur: null,
        divisor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        dominantBaseline: null,
        download: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        dx: null,
        dy: null,
        edgeMode: null,
        editable: null,
        elevation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        enableBackground: null,
        end: null,
        event: null,
        exponent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        externalResourcesRequired: null,
        fill: null,
        fillOpacity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        fillRule: null,
        filter: null,
        filterRes: null,
        filterUnits: null,
        floodColor: null,
        floodOpacity: null,
        focusable: null,
        focusHighlight: null,
        fontFamily: null,
        fontSize: null,
        fontSizeAdjust: null,
        fontStretch: null,
        fontStyle: null,
        fontVariant: null,
        fontWeight: null,
        format: null,
        fr: null,
        from: null,
        fx: null,
        fy: null,
        g1: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        g2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        glyphName: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        glyphOrientationHorizontal: null,
        glyphOrientationVertical: null,
        glyphRef: null,
        gradientTransform: null,
        gradientUnits: null,
        handler: null,
        hanging: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        hatchContentUnits: null,
        hatchUnits: null,
        height: null,
        href: null,
        hrefLang: null,
        horizAdvX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        horizOriginX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        horizOriginY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        id: null,
        ideographic: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        imageRendering: null,
        initialVisibility: null,
        in: null,
        in2: null,
        intercept: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        k: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        k1: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        k2: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        k3: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        k4: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        kernelMatrix: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        kernelUnitLength: null,
        keyPoints: null,
        keySplines: null,
        keyTimes: null,
        kerning: null,
        lang: null,
        lengthAdjust: null,
        letterSpacing: null,
        lightingColor: null,
        limitingConeAngle: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        local: null,
        markerEnd: null,
        markerMid: null,
        markerStart: null,
        markerHeight: null,
        markerUnits: null,
        markerWidth: null,
        mask: null,
        maskContentUnits: null,
        maskUnits: null,
        mathematical: null,
        max: null,
        media: null,
        mediaCharacterEncoding: null,
        mediaContentEncodings: null,
        mediaSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        mediaTime: null,
        method: null,
        min: null,
        mode: null,
        name: null,
        navDown: null,
        navDownLeft: null,
        navDownRight: null,
        navLeft: null,
        navNext: null,
        navPrev: null,
        navRight: null,
        navUp: null,
        navUpLeft: null,
        navUpRight: null,
        numOctaves: null,
        observer: null,
        offset: null,
        onAbort: null,
        onActivate: null,
        onAfterPrint: null,
        onBeforePrint: null,
        onBegin: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnd: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFocusIn: null,
        onFocusOut: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadStart: null,
        onMessage: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onMouseWheel: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRepeat: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onShow: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onZoom: null,
        opacity: null,
        operator: null,
        order: null,
        orient: null,
        orientation: null,
        origin: null,
        overflow: null,
        overlay: null,
        overlinePosition: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        overlineThickness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        paintOrder: null,
        panose1: null,
        path: null,
        pathLength: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        patternContentUnits: null,
        patternTransform: null,
        patternUnits: null,
        phase: null,
        ping: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        pitch: null,
        playbackOrder: null,
        pointerEvents: null,
        points: null,
        pointsAtX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        pointsAtY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        pointsAtZ: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        preserveAlpha: null,
        preserveAspectRatio: null,
        primitiveUnits: null,
        propagate: null,
        property: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        r: null,
        radius: null,
        referrerPolicy: null,
        refX: null,
        refY: null,
        rel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        rev: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        renderingIntent: null,
        repeatCount: null,
        repeatDur: null,
        requiredExtensions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        requiredFeatures: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        requiredFonts: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        requiredFormats: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        resource: null,
        restart: null,
        result: null,
        rotate: null,
        rx: null,
        ry: null,
        scale: null,
        seed: null,
        shapeRendering: null,
        side: null,
        slope: null,
        snapshotTime: null,
        specularConstant: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        specularExponent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        spreadMethod: null,
        spacing: null,
        startOffset: null,
        stdDeviation: null,
        stemh: null,
        stemv: null,
        stitchTiles: null,
        stopColor: null,
        stopOpacity: null,
        strikethroughPosition: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        strikethroughThickness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        string: null,
        stroke: null,
        strokeDashArray: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        strokeDashOffset: null,
        strokeLineCap: null,
        strokeLineJoin: null,
        strokeMiterLimit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        strokeOpacity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        strokeWidth: null,
        style: null,
        surfaceScale: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        syncBehavior: null,
        syncBehaviorDefault: null,
        syncMaster: null,
        syncTolerance: null,
        syncToleranceDefault: null,
        systemLanguage: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        tabIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        tableValues: null,
        target: null,
        targetX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        targetY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        textAnchor: null,
        textDecoration: null,
        textRendering: null,
        textLength: null,
        timelineBegin: null,
        title: null,
        transformBehavior: null,
        type: null,
        typeOf: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaOrSpaceSeparated"],
        to: null,
        transform: null,
        transformOrigin: null,
        u1: null,
        u2: null,
        underlinePosition: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        underlineThickness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        unicode: null,
        unicodeBidi: null,
        unicodeRange: null,
        unitsPerEm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        values: null,
        vAlphabetic: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        vMathematical: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        vectorEffect: null,
        vHanging: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        vIdeographic: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        version: null,
        vertAdvY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        vertOriginX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        vertOriginY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        viewBox: null,
        viewTarget: null,
        visibility: null,
        width: null,
        widths: null,
        wordSpacing: null,
        writingMode: null,
        x: null,
        x1: null,
        x2: null,
        xChannelSelector: null,
        xHeight: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        y: null,
        y1: null,
        y2: null,
        yChannelSelector: null,
        z: null,
        zoomAndPan: null
    }
});

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/case-insensitive-transform.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "caseInsensitiveTransform": ()=>caseInsensitiveTransform
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$sensitive$2d$transform$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/case-sensitive-transform.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function caseInsensitiveTransform(attributes, property) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$sensitive$2d$transform$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["caseSensitiveTransform"](attributes, property.toLowerCase());
}

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/html.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "html": ()=>html
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/create.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$insensitive$2d$transform$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/case-insensitive-transform.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
const html = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["create"]({
    space: 'html',
    attributes: {
        acceptcharset: 'accept-charset',
        classname: 'class',
        htmlfor: 'for',
        httpequiv: 'http-equiv'
    },
    transform: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$insensitive$2d$transform$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["caseInsensitiveTransform"],
    mustUseProperty: [
        'checked',
        'multiple',
        'muted',
        'selected'
    ],
    properties: {
        // Standard Properties.
        abbr: null,
        accept: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        acceptCharset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        accessKey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        action: null,
        allow: null,
        allowFullScreen: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        allowPaymentRequest: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        allowUserMedia: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        alt: null,
        as: null,
        async: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        autoCapitalize: null,
        autoComplete: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        autoFocus: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        autoPlay: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        blocking: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        capture: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        charSet: null,
        checked: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        cite: null,
        className: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        cols: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        colSpan: null,
        content: null,
        contentEditable: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        controls: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        controlsList: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        coords: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"] | __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["commaSeparated"],
        crossOrigin: null,
        data: null,
        dateTime: null,
        decoding: null,
        default: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        defer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        dir: null,
        dirName: null,
        disabled: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        download: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["overloadedBoolean"],
        draggable: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        encType: null,
        enterKeyHint: null,
        fetchPriority: null,
        form: null,
        formAction: null,
        formEncType: null,
        formMethod: null,
        formNoValidate: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        formTarget: null,
        headers: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        height: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        hidden: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        high: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        href: null,
        hrefLang: null,
        htmlFor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        httpEquiv: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        id: null,
        imageSizes: null,
        imageSrcSet: null,
        inert: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        inputMode: null,
        integrity: null,
        is: null,
        isMap: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        itemId: null,
        itemProp: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        itemRef: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        itemScope: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        itemType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        kind: null,
        label: null,
        lang: null,
        language: null,
        list: null,
        loading: null,
        loop: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        low: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        manifest: null,
        max: null,
        maxLength: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        media: null,
        method: null,
        min: null,
        minLength: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        multiple: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        muted: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        name: null,
        nonce: null,
        noModule: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        noValidate: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        onAbort: null,
        onAfterPrint: null,
        onAuxClick: null,
        onBeforeMatch: null,
        onBeforePrint: null,
        onBeforeToggle: null,
        onBeforeUnload: null,
        onBlur: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onContextLost: null,
        onContextMenu: null,
        onContextRestored: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFormData: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLanguageChange: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadEnd: null,
        onLoadStart: null,
        onMessage: null,
        onMessageError: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRejectionHandled: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onScrollEnd: null,
        onSecurityPolicyViolation: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onSlotChange: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnhandledRejection: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onWheel: null,
        open: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        optimum: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        pattern: null,
        ping: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        placeholder: null,
        playsInline: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        popover: null,
        popoverTarget: null,
        popoverTargetAction: null,
        poster: null,
        preload: null,
        readOnly: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        referrerPolicy: null,
        rel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        required: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        reversed: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        rows: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        rowSpan: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        sandbox: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        scope: null,
        scoped: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        seamless: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        selected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        shadowRootDelegatesFocus: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        shadowRootMode: null,
        shape: null,
        size: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        sizes: null,
        slot: null,
        span: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        spellCheck: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        src: null,
        srcDoc: null,
        srcLang: null,
        srcSet: null,
        start: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        step: null,
        style: null,
        tabIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        target: null,
        title: null,
        translate: null,
        type: null,
        typeMustMatch: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        useMap: null,
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        width: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        wrap: null,
        // Legacy.
        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
        align: null,
        aLink: null,
        archive: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        axis: null,
        background: null,
        bgColor: null,
        border: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        borderColor: null,
        bottomMargin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        cellPadding: null,
        cellSpacing: null,
        char: null,
        charOff: null,
        classId: null,
        clear: null,
        code: null,
        codeBase: null,
        codeType: null,
        color: null,
        compact: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        declare: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        event: null,
        face: null,
        frame: null,
        frameBorder: null,
        hSpace: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        leftMargin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        link: null,
        longDesc: null,
        lowSrc: null,
        marginHeight: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        marginWidth: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        noResize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        noHref: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        noShade: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        noWrap: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        object: null,
        profile: null,
        prompt: null,
        rev: null,
        rightMargin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        rules: null,
        scheme: null,
        scrolling: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        standby: null,
        summary: null,
        text: null,
        topMargin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        valueType: null,
        version: null,
        vAlign: null,
        vLink: null,
        vSpace: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        // Non-standard Properties.
        allowTransparency: null,
        autoCorrect: null,
        autoSave: null,
        disablePictureInPicture: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        disableRemotePlayback: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["boolean"],
        prefix: null,
        property: null,
        results: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        security: null,
        unselectable: null
    }
});

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/aria.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "aria": ()=>aria
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/create.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
const aria = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["create"]({
    transform (_, prop) {
        return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
    },
    properties: {
        ariaActiveDescendant: null,
        ariaAtomic: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaAutoComplete: null,
        ariaBusy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaChecked: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaColCount: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaColIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaColSpan: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaControls: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaCurrent: null,
        ariaDescribedBy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaDetails: null,
        ariaDisabled: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaDropEffect: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaErrorMessage: null,
        ariaExpanded: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaFlowTo: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaGrabbed: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaHasPopup: null,
        ariaHidden: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaInvalid: null,
        ariaKeyShortcuts: null,
        ariaLabel: null,
        ariaLabelledBy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaLevel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaLive: null,
        ariaModal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaMultiLine: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaMultiSelectable: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaOrientation: null,
        ariaOwns: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaPlaceholder: null,
        ariaPosInSet: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaPressed: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaReadOnly: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaRelevant: null,
        ariaRequired: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaRoleDescription: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["spaceSeparated"],
        ariaRowCount: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaRowIndex: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaRowSpan: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaSelected: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["booleanish"],
        ariaSetSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaSort: null,
        ariaValueMax: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaValueMin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaValueNow: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["number"],
        ariaValueText: null,
        role: null
    }
});

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/xmlns.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "xmlns": ()=>xmlns
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/create.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$insensitive$2d$transform$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/case-insensitive-transform.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
const xmlns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["create"]({
    space: 'xmlns',
    attributes: {
        xmlnsxlink: 'xmlns:xlink'
    },
    transform: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$case$2d$insensitive$2d$transform$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["caseInsensitiveTransform"],
    properties: {
        xmlns: null,
        xmlnsXLink: null
    }
});

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/xml.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "xml": ()=>xml
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/create.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const xml = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["create"]({
    space: 'xml',
    transform (_, prop) {
        return 'xml:' + prop.slice(3).toLowerCase();
    },
    properties: {
        xmlLang: null,
        xmlBase: null,
        xmlSpace: null
    }
});

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/xlink.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "xlink": ()=>xlink
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/create.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const xlink = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$create$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["create"]({
    space: 'xlink',
    transform (_, prop) {
        return 'xlink:' + prop.slice(5).toLowerCase();
    },
    properties: {
        xLinkActuate: null,
        xLinkArcRole: null,
        xLinkHref: null,
        xLinkRole: null,
        xLinkShow: null,
        xLinkTitle: null,
        xLinkType: null
    }
});

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/merge.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */ __turbopack_esm__({
    "merge": ()=>merge
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$schema$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/schema.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function merge(definitions, space) {
    /** @type {Properties} */ const property = {};
    /** @type {Normal} */ const normal = {};
    let index = -1;
    while(++index < definitions.length){
        Object.assign(property, definitions[index].property);
        Object.assign(normal, definitions[index].normal);
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$schema$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["Schema"](property, normal, space);
}

})()),
"[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */ __turbopack_esm__({
    "find": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["find"],
    "hastToReact": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$hast$2d$to$2d$react$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["hastToReact"],
    "html": ()=>html,
    "normalize": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["normalize"],
    "svg": ()=>svg
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$merge$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/util/merge.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xlink$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/xlink.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xml$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/xml.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xmlns$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/xmlns.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$aria$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/aria.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$html$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/html.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$svg$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/svg.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/find.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$hast$2d$to$2d$react$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/hast-to-react.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$normalize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/lib/normalize.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
;
const html = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$merge$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["merge"]([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xml$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["xml"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xlink$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["xlink"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xmlns$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["xmlns"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$aria$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["aria"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$html$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["html"]
], 'html');
const svg = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$util$2f$merge$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["merge"]([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xml$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["xml"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xlink$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["xlink"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$xmlns$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["xmlns"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$aria$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["aria"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$lib$2f$svg$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["svg"]
], 'svg');

})()),
"[project]/node_modules/.pnpm/inline-style-parser@0.1.1/node_modules/inline-style-parser/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
var NEWLINE_REGEX = /\n/g;
var WHITESPACE_REGEX = /^\s*/;
// declaration
var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
var COLON_REGEX = /^:\s*/;
var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
var SEMICOLON_REGEX = /^[;\s]*/;
// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill
var TRIM_REGEX = /^\s+|\s+$/g;
// strings
var NEWLINE = '\n';
var FORWARD_SLASH = '/';
var ASTERISK = '*';
var EMPTY_STRING = '';
// types
var TYPE_COMMENT = 'comment';
var TYPE_DECLARATION = 'declaration';
/**
 * @param {String} style
 * @param {Object} [options]
 * @return {Object[]}
 * @throws {TypeError}
 * @throws {Error}
 */ module.exports = function(style, options) {
    if (typeof style !== 'string') {
        throw new TypeError('First argument must be a string');
    }
    if (!style) return [];
    options = options || {};
    /**
   * Positional.
   */ var lineno = 1;
    var column = 1;
    /**
   * Update lineno and column based on `str`.
   *
   * @param {String} str
   */ function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i = str.lastIndexOf(NEWLINE);
        column = ~i ? str.length - i : column + str.length;
    }
    /**
   * Mark position and patch `node.position`.
   *
   * @return {Function}
   */ function position() {
        var start = {
            line: lineno,
            column: column
        };
        return function(node) {
            node.position = new Position(start);
            whitespace();
            return node;
        };
    }
    /**
   * Store position information for a node.
   *
   * @constructor
   * @property {Object} start
   * @property {Object} end
   * @property {undefined|String} source
   */ function Position(start) {
        this.start = start;
        this.end = {
            line: lineno,
            column: column
        };
        this.source = options.source;
    }
    /**
   * Non-enumerable source string.
   */ Position.prototype.content = style;
    var errorsList = [];
    /**
   * Error `msg`.
   *
   * @param {String} msg
   * @throws {Error}
   */ function error(msg) {
        var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
        err.reason = msg;
        err.filename = options.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options.silent) {
            errorsList.push(err);
        } else {
            throw err;
        }
    }
    /**
   * Match `re` and return captures.
   *
   * @param {RegExp} re
   * @return {undefined|Array}
   */ function match(re) {
        var m = re.exec(style);
        if (!m) return;
        var str = m[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m;
    }
    /**
   * Parse whitespace.
   */ function whitespace() {
        match(WHITESPACE_REGEX);
    }
    /**
   * Parse comments.
   *
   * @param {Object[]} [rules]
   * @return {Object[]}
   */ function comments(rules) {
        var c;
        rules = rules || [];
        while(c = comment()){
            if (c !== false) {
                rules.push(c);
            }
        }
        return rules;
    }
    /**
   * Parse comment.
   *
   * @return {Object}
   * @throws {Error}
   */ function comment() {
        var pos = position();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
        var i = 2;
        while(EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))){
            ++i;
        }
        i += 2;
        if (EMPTY_STRING === style.charAt(i - 1)) {
            return error('End of comment missing');
        }
        var str = style.slice(2, i - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i);
        column += 2;
        return pos({
            type: TYPE_COMMENT,
            comment: str
        });
    }
    /**
   * Parse declaration.
   *
   * @return {Object}
   * @throws {Error}
   */ function declaration() {
        var pos = position();
        // prop
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment();
        // :
        if (!match(COLON_REGEX)) return error("property missing ':'");
        // val
        var val = match(VALUE_REGEX);
        var ret = pos({
            type: TYPE_DECLARATION,
            property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
            value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        // ;
        match(SEMICOLON_REGEX);
        return ret;
    }
    /**
   * Parse declarations.
   *
   * @return {Object[]}
   */ function declarations() {
        var decls = [];
        comments(decls);
        // declarations
        var decl;
        while(decl = declaration()){
            if (decl !== false) {
                decls.push(decl);
                comments(decls);
            }
        }
        return decls;
    }
    whitespace();
    return declarations();
};
/**
 * Trim `str`.
 *
 * @param {String} str
 * @return {String}
 */ function trim(str) {
    return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
}

}.call(this) }),
"[project]/node_modules/.pnpm/style-to-object@0.4.4/node_modules/style-to-object/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var parse = __turbopack_require__("[project]/node_modules/.pnpm/inline-style-parser@0.1.1/node_modules/inline-style-parser/index.js [rsc] (ecmascript)");
/**
 * Parses inline style to object.
 *
 * @example
 * // returns { 'line-height': '42' }
 * StyleToObject('line-height: 42;');
 *
 * @param  {String}      style      - The inline style.
 * @param  {Function}    [iterator] - The iterator function.
 * @return {null|Object}
 */ function StyleToObject(style, iterator) {
    var output = null;
    if (!style || typeof style !== 'string') {
        return output;
    }
    var declaration;
    var declarations = parse(style);
    var hasIterator = typeof iterator === 'function';
    var property;
    var value;
    for(var i = 0, len = declarations.length; i < len; i++){
        declaration = declarations[i];
        property = declaration.property;
        value = declaration.value;
        if (hasIterator) {
            iterator(property, value, declaration);
        } else if (value) {
            output || (output = {});
            output[property] = value;
        }
    }
    return output;
}
module.exports = StyleToObject;
module.exports.default = StyleToObject; // ESM support

}.call(this) }),
"[project]/node_modules/.pnpm/style-to-object@0.4.4/node_modules/style-to-object/index.mjs [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "default": ()=>__TURBOPACK__default__export__
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$style$2d$to$2d$object$40$0$2e$4$2e$4$2f$node_modules$2f$style$2d$to$2d$object$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/style-to-object@0.4.4/node_modules/style-to-object/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$style$2d$to$2d$object$40$0$2e$4$2e$4$2f$node_modules$2f$style$2d$to$2d$object$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"];

})()),
"[project]/node_modules/.pnpm/estree-util-is-identifier-name@2.1.0/node_modules/estree-util-is-identifier-name/lib/regex.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// This module is generated by `build.js`.
__turbopack_esm__({
    "cont": ()=>cont,
    "start": ()=>start
});
const start = /[$A-Z_a-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
const cont = /[\d\u00B7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F]/;

})()),
"[project]/node_modules/.pnpm/estree-util-is-identifier-name@2.1.0/node_modules/estree-util-is-identifier-name/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "cont": ()=>cont,
    "name": ()=>name,
    "start": ()=>start
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$regex$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@2.1.0/node_modules/estree-util-is-identifier-name/lib/regex.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function start(code) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$regex$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"].test(String.fromCharCode(code));
}
function cont(code) {
    const character = String.fromCharCode(code);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$regex$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"].test(character) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$regex$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"].test(character);
}
function name(name) {
    let index = -1;
    while(++index < name.length){
        if (!(index ? cont : start)(name.charCodeAt(index))) return false;
    }
    // `false` if `name` is empty.
    return index > 0;
}

})()),
"[project]/node_modules/.pnpm/estree-util-is-identifier-name@2.1.0/node_modules/estree-util-is-identifier-name/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "cont": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"],
    "name": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"],
    "start": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@2.1.0/node_modules/estree-util-is-identifier-name/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [jsx=false]
 *   Support JSX identifiers (default: `false`).
 */ __turbopack_esm__({
    "cont": ()=>cont,
    "name": ()=>name,
    "start": ()=>start
});
const startRe = /[$_\p{ID_Start}]/u;
const contRe = /[$_\u{200C}\u{200D}\p{ID_Continue}]/u;
const contReJsx = /[-$_\u{200C}\u{200D}\p{ID_Continue}]/u;
const nameRe = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
const nameReJsx = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
/** @type {Options} */ const emptyOptions = {};
function start(code) {
    return code ? startRe.test(String.fromCodePoint(code)) : false;
}
function cont(code, options) {
    const settings = options || emptyOptions;
    const re = settings.jsx ? contReJsx : contRe;
    return code ? re.test(String.fromCodePoint(code)) : false;
}
function name(name, options) {
    const settings = options || emptyOptions;
    const re = settings.jsx ? nameReJsx : nameRe;
    return re.test(name);
}

})()),
"[project]/node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Options} Options
 */ __turbopack_esm__({
    "cont": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"],
    "name": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"],
    "start": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Parse space-separated tokens to an array of strings.
 *
 * @param {string} value
 *   Space-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */ __turbopack_esm__({
    "parse": ()=>parse,
    "stringify": ()=>stringify
});
function parse(value) {
    const input = String(value || '').trim();
    return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
function stringify(values) {
    return values.join(' ').trim();
}

})()),
"[project]/node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef Options
 *   Configuration for `stringify`.
 * @property {boolean} [padLeft=true]
 *   Whether to pad a space before a token.
 * @property {boolean} [padRight=false]
 *   Whether to pad a space after a token.
 */ /**
 * @typedef {Options} StringifyOptions
 *   Please use `StringifyOptions` instead.
 */ /**
 * Parse comma-separated tokens to an array.
 *
 * @param {string} value
 *   Comma-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */ __turbopack_esm__({
    "parse": ()=>parse,
    "stringify": ()=>stringify
});
function parse(value) {
    /** @type {Array<string>} */ const tokens = [];
    const input = String(value || '');
    let index = input.indexOf(',');
    let start = 0;
    /** @type {boolean} */ let end = false;
    while(!end){
        if (index === -1) {
            index = input.length;
            end = true;
        }
        const token = input.slice(start, index).trim();
        if (token || !end) {
            tokens.push(token);
        }
        start = index + 1;
        index = input.indexOf(',', start);
    }
    return tokens;
}
function stringify(values, options) {
    const settings = options || {};
    // Ensure the last empty entry is seen.
    const input = values[values.length - 1] === '' ? [
        ...values,
        ''
    ] : values;
    return input.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();
}

})()),
"[project]/node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @callback Handler
 *   Handle a value, with a certain ID field set to a certain value.
 *   The ID field is passed to `zwitch`, and it’s value is this function’s
 *   place on the `handlers` record.
 * @param {...any} parameters
 *   Arbitrary parameters passed to the zwitch.
 *   The first will be an object with a certain ID field set to a certain value.
 * @returns {any}
 *   Anything!
 */ /**
 * @callback UnknownHandler
 *   Handle values that do have a certain ID field, but it’s set to a value
 *   that is not listed in the `handlers` record.
 * @param {unknown} value
 *   An object with a certain ID field set to an unknown value.
 * @param {...any} rest
 *   Arbitrary parameters passed to the zwitch.
 * @returns {any}
 *   Anything!
 */ /**
 * @callback InvalidHandler
 *   Handle values that do not have a certain ID field.
 * @param {unknown} value
 *   Any unknown value.
 * @param {...any} rest
 *   Arbitrary parameters passed to the zwitch.
 * @returns {void|null|undefined|never}
 *   This should crash or return nothing.
 */ /**
 * @template {InvalidHandler} [Invalid=InvalidHandler]
 * @template {UnknownHandler} [Unknown=UnknownHandler]
 * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
 * @typedef Options
 *   Configuration (required).
 * @property {Invalid} [invalid]
 *   Handler to use for invalid values.
 * @property {Unknown} [unknown]
 *   Handler to use for unknown values.
 * @property {Handlers} [handlers]
 *   Handlers to use.
 */ __turbopack_esm__({
    "zwitch": ()=>zwitch
});
const own = {}.hasOwnProperty;
function zwitch(key, options) {
    const settings = options || {};
    /**
   * Handle one value.
   *
   * Based on the bound `key`, a respective handler will be called.
   * If `value` is not an object, or doesn’t have a `key` property, the special
   * “invalid” handler will be called.
   * If `value` has an unknown `key`, the special “unknown” handler will be
   * called.
   *
   * All arguments, and the context object, are passed through to the handler,
   * and it’s result is returned.
   *
   * @this {unknown}
   *   Any context object.
   * @param {unknown} [value]
   *   Any value.
   * @param {...unknown} parameters
   *   Arbitrary parameters passed to the zwitch.
   * @property {Handler} invalid
   *   Handle for values that do not have a certain ID field.
   * @property {Handler} unknown
   *   Handle values that do have a certain ID field, but it’s set to a value
   *   that is not listed in the `handlers` record.
   * @property {Handlers} handlers
   *   Record of handlers.
   * @returns {unknown}
   *   Anything.
   */ function one(value, ...parameters) {
        /** @type {Handler|undefined} */ let fn = one.invalid;
        const handlers = one.handlers;
        if (value && own.call(value, key)) {
            // @ts-expect-error Indexable.
            const id = String(value[key]);
            // @ts-expect-error Indexable.
            fn = own.call(handlers, id) ? handlers[id] : one.unknown;
        }
        if (fn) {
            return fn.call(this, value, ...parameters);
        }
    }
    one.handlers = settings.handlers || {};
    one.invalid = settings.invalid;
    one.unknown = settings.unknown;
    // @ts-expect-error: matches!
    return one;
}

})()),
"[project]/node_modules/.pnpm/unist-util-position@4.0.4/node_modules/unist-util-position/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 */ /**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */ /**
 * Get the starting point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */ __turbopack_esm__({
    "pointEnd": ()=>pointEnd,
    "pointStart": ()=>pointStart,
    "position": ()=>position
});
const pointStart = point('start');
const pointEnd = point('end');
function position(node) {
    return {
        start: pointStart(node),
        end: pointEnd(node)
    };
}
/**
 * Get the positional info of `node`.
 *
 * @param {'start' | 'end'} type
 *   Side.
 * @returns
 *   Getter.
 */ function point(type) {
    return point;
    /**
   * Get the point info of `node` at a bound side.
   *
   * @param {NodeLike | Node | null | undefined} [node]
   * @returns {Point}
   */ function point(node) {
        const point = node && node.position && node.position[type] || {};
        // To do: next major: don’t return points when invalid.
        return {
            // @ts-expect-error: in practice, null is allowed.
            line: point.line || null,
            // @ts-expect-error: in practice, null is allowed.
            column: point.column || null,
            // @ts-expect-error: in practice, null is allowed.
            offset: point.offset > -1 ? point.offset : null
        };
    }
}

})()),
"[project]/node_modules/.pnpm/unist-util-position@4.0.4/node_modules/unist-util-position/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "pointEnd": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$4$2e$0$2e$4$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["pointEnd"],
    "pointStart": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$4$2e$0$2e$4$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["pointStart"],
    "position": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$4$2e$0$2e$4$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["position"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$4$2e$0$2e$4$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position@4.0.4/node_modules/unist-util-position/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ /**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */ /**
 * Get the ending point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */ __turbopack_esm__({
    "pointEnd": ()=>pointEnd,
    "pointStart": ()=>pointStart,
    "position": ()=>position
});
const pointEnd = point('end');
const pointStart = point('start');
/**
 * Get the positional info of `node`.
 *
 * @param {'end' | 'start'} type
 *   Side.
 * @returns
 *   Getter.
 */ function point(type) {
    return point;
    /**
   * Get the point info of `node` at a bound side.
   *
   * @param {Node | NodeLike | null | undefined} [node]
   * @returns {Point | undefined}
   */ function point(node) {
        const point = node && node.position && node.position[type] || {};
        if (typeof point.line === 'number' && point.line > 0 && typeof point.column === 'number' && point.column > 0) {
            return {
                line: point.line,
                column: point.column,
                offset: typeof point.offset === 'number' && point.offset > -1 ? point.offset : undefined
            };
        }
    }
}
function position(node) {
    const start = pointStart(node);
    const end = pointEnd(node);
    if (start && end) {
        return {
            start,
            end
        };
    }
}

})()),
"[project]/node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "pointEnd": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["pointEnd"],
    "pointStart": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["pointStart"],
    "position": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["position"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "dequal": ()=>dequal
});
var has = Object.prototype.hasOwnProperty;
function find(iter, tar, key) {
    for (key of iter.keys()){
        if (dequal(key, tar)) return key;
    }
}
function dequal(foo, bar) {
    var ctor, len, tmp;
    if (foo === bar) return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
        if (ctor === Date) return foo.getTime() === bar.getTime();
        if (ctor === RegExp) return foo.toString() === bar.toString();
        if (ctor === Array) {
            if ((len = foo.length) === bar.length) {
                while(len-- && dequal(foo[len], bar[len]));
            }
            return len === -1;
        }
        if (ctor === Set) {
            if (foo.size !== bar.size) {
                return false;
            }
            for (len of foo){
                tmp = len;
                if (tmp && typeof tmp === 'object') {
                    tmp = find(bar, tmp);
                    if (!tmp) return false;
                }
                if (!bar.has(tmp)) return false;
            }
            return true;
        }
        if (ctor === Map) {
            if (foo.size !== bar.size) {
                return false;
            }
            for (len of foo){
                tmp = len[0];
                if (tmp && typeof tmp === 'object') {
                    tmp = find(bar, tmp);
                    if (!tmp) return false;
                }
                if (!dequal(len[1], bar.get(tmp))) {
                    return false;
                }
            }
            return true;
        }
        if (ctor === ArrayBuffer) {
            foo = new Uint8Array(foo);
            bar = new Uint8Array(bar);
        } else if (ctor === DataView) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while(len-- && foo.getInt8(len) === bar.getInt8(len));
            }
            return len === -1;
        }
        if (ArrayBuffer.isView(foo)) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while(len-- && foo[len] === bar[len]);
            }
            return len === -1;
        }
        if (!ctor || typeof foo === 'object') {
            len = 0;
            for(ctor in foo){
                if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
                if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
            }
            return Object.keys(bar).length === len;
        }
    }
    return foo !== foo && bar !== bar;
}

})()),
"[project]/node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var has = Object.prototype.hasOwnProperty;
function find(iter, tar, key) {
    for (key of iter.keys()){
        if (dequal(key, tar)) return key;
    }
}
function dequal(foo, bar) {
    var ctor, len, tmp;
    if (foo === bar) return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
        if (ctor === Date) return foo.getTime() === bar.getTime();
        if (ctor === RegExp) return foo.toString() === bar.toString();
        if (ctor === Array) {
            if ((len = foo.length) === bar.length) {
                while(len-- && dequal(foo[len], bar[len]));
            }
            return len === -1;
        }
        if (ctor === Set) {
            if (foo.size !== bar.size) {
                return false;
            }
            for (len of foo){
                tmp = len;
                if (tmp && typeof tmp === 'object') {
                    tmp = find(bar, tmp);
                    if (!tmp) return false;
                }
                if (!bar.has(tmp)) return false;
            }
            return true;
        }
        if (ctor === Map) {
            if (foo.size !== bar.size) {
                return false;
            }
            for (len of foo){
                tmp = len[0];
                if (tmp && typeof tmp === 'object') {
                    tmp = find(bar, tmp);
                    if (!tmp) return false;
                }
                if (!dequal(len[1], bar.get(tmp))) {
                    return false;
                }
            }
            return true;
        }
        if (ctor === ArrayBuffer) {
            foo = new Uint8Array(foo);
            bar = new Uint8Array(bar);
        } else if (ctor === DataView) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while(len-- && foo.getInt8(len) === bar.getInt8(len));
            }
            return len === -1;
        }
        if (ArrayBuffer.isView(foo)) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while(len-- && foo[len] === bar[len]);
            }
            return len === -1;
        }
        if (!ctor || typeof foo === 'object') {
            len = 0;
            for(ctor in foo){
                if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
                if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
            }
            return Object.keys(bar).length === len;
        }
    }
    return foo !== foo && bar !== bar;
}
exports.dequal = dequal;

}.call(this) }),
"[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "deprecate": ()=>deprecate,
    "equal": ()=>equal,
    "ok": ()=>ok,
    "unreachable": ()=>unreachable
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$dequal$40$2$2e$0$2e$3$2f$node_modules$2f$dequal$2f$dist$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
/**
 * @type {Set<string>}
 */ const codesWarned = new Set();
class AssertionError extends Error {
    name = 'Assertion';
    code = 'ERR_ASSERTION';
    /**
   * Create an assertion error.
   *
   * @param {string} message
   *   Message explaining error.
   * @param {unknown} actual
   *   Value.
   * @param {unknown} expected
   *   Baseline.
   * @param {string} operator
   *   Name of equality operation.
   * @param {boolean} generated
   *   Whether `message` is a custom message or not
   * @returns
   *   Instance.
   */ // eslint-disable-next-line max-params
    constructor(message, actual, expected, operator, generated){
        super(message);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
        /**
     * @type {unknown}
     */ this.actual = actual;
        /**
     * @type {unknown}
     */ this.expected = expected;
        /**
     * @type {boolean}
     */ this.generated = generated;
        /**
     * @type {string}
     */ this.operator = operator;
    }
}
class DeprecationError extends Error {
    name = 'DeprecationWarning';
    /**
   * Create a deprecation message.
   *
   * @param {string} message
   *   Message explaining deprecation.
   * @param {string | undefined} code
   *   Deprecation identifier; deprecation messages will be generated only once per code.
   * @returns
   *   Instance.
   */ constructor(message, code){
        super(message);
        /**
     * @type {string | undefined}
     */ this.code = code;
    }
}
function deprecate(fn, message, code) {
    let warned = false;
    // The wrapper will keep the same prototype as fn to maintain prototype chain
    Object.setPrototypeOf(deprecated, fn);
    // @ts-expect-error: it’s perfect, typescript…
    return deprecated;
    /**
   * @this {unknown}
   * @param  {...Array<unknown>} args
   * @returns {unknown}
   */ function deprecated(...args) {
        if (!warned) {
            warned = true;
            if (typeof code === 'string' && codesWarned.has(code)) {
            // Empty.
            } else {
                console.error(new DeprecationError(message, code || undefined));
                if (typeof code === 'string') codesWarned.add(code);
            }
        }
        return new.target ? Reflect.construct(fn, args, new.target) : Reflect.apply(fn, this, args);
    }
}
function equal(actual, expected, message) {
    assert(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$dequal$40$2$2e$0$2e$3$2f$node_modules$2f$dequal$2f$dist$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["dequal"](actual, expected), actual, expected, 'equal', 'Expected values to be deeply equal', message);
}
function ok(value, message) {
    assert(Boolean(value), false, true, 'ok', 'Expected value to be truthy', message);
}
function unreachable(message) {
    assert(false, false, true, 'ok', 'Unreachable', message);
}
/**
 * @param {boolean} bool
 *   Whether to skip this operation.
 * @param {unknown} actual
 *   Actual value.
 * @param {unknown} expected
 *   Expected value.
 * @param {string} operator
 *   Operator.
 * @param {string} defaultMessage
 *   Default message for operation.
 * @param {Error | string | null | undefined} userMessage
 *   User-provided message.
 * @returns {asserts bool}
 *   Nothing; throws when falsey.
 */ // eslint-disable-next-line max-params
function assert(bool, actual, expected, operator, defaultMessage, userMessage) {
    if (!bool) {
        throw userMessage instanceof Error ? userMessage : new AssertionError(userMessage || defaultMessage, actual, expected, operator, !userMessage);
    }
}

})()),
"[project]/node_modules/.pnpm/estree-util-to-js@1.2.0/node_modules/estree-util-to-js/lib/jsx.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').JSXAttribute} JSXAttribute
 * @typedef {import('estree-jsx').JSXClosingElement} JSXClosingElement
 * @typedef {import('estree-jsx').JSXClosingFragment} JSXClosingFragment
 * @typedef {import('estree-jsx').JSXElement} JSXElement
 * @typedef {import('estree-jsx').JSXExpressionContainer} JSXExpressionContainer
 * @typedef {import('estree-jsx').JSXFragment} JSXFragment
 * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier
 * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression
 * @typedef {import('estree-jsx').JSXNamespacedName} JSXNamespacedName
 * @typedef {import('estree-jsx').JSXOpeningElement} JSXOpeningElement
 * @typedef {import('estree-jsx').JSXOpeningFragment} JSXOpeningFragment
 * @typedef {import('estree-jsx').JSXSpreadAttribute} JSXSpreadAttribute
 * @typedef {import('estree-jsx').JSXText} JSXText
 * @typedef {import('./types.js').Generator} Generator
 * @typedef {import('./types.js').State} State
 */ __turbopack_esm__({
    "jsx": ()=>jsx
});
const jsx = {
    JSXAttribute,
    JSXClosingElement,
    JSXClosingFragment,
    JSXElement,
    JSXEmptyExpression,
    JSXExpressionContainer,
    JSXFragment,
    JSXIdentifier,
    JSXMemberExpression,
    JSXNamespacedName,
    JSXOpeningElement,
    JSXOpeningFragment,
    JSXSpreadAttribute,
    JSXText
};
/**
 * `attr`
 * `attr="something"`
 * `attr={1}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXAttribute} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXAttribute(node, state) {
    this[node.name.type](node.name, state);
    if (node.value !== undefined && node.value !== null) {
        state.write('=');
        // Encode double quotes in attribute values.
        if (node.value.type === 'Literal') {
            state.write('"' + encodeJsx(String(node.value.value)).replace(/"/g, '&quot;') + '"', node);
        } else {
            this[node.value.type](node.value, state);
        }
    }
}
/**
 * `</div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXClosingElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXClosingElement(node, state) {
    state.write('</');
    this[node.name.type](node.name, state);
    state.write('>');
}
/**
 * `</>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXClosingFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXClosingFragment(node, state) {
    state.write('</>', node);
}
/**
 * `<div />`
 * `<div></div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXElement(node, state) {
    let index = -1;
    this[node.openingElement.type](node.openingElement, state);
    if (node.children) {
        while(++index < node.children.length){
            const child = node.children[index];
            // Supported in types but not by Acorn.
            /* c8 ignore next 3 */ if (child.type === 'JSXSpreadChild') {
                throw new Error('JSX spread children are not supported');
            }
            this[child.type](child, state);
        }
    }
    if (node.closingElement) {
        this[node.closingElement.type](node.closingElement, state);
    }
}
/**
 * `{}` (always in a `JSXExpressionContainer`, which does the curlies)
 *
 * @this {Generator}
 *   `astring` generator.
 * @returns {void}
 *   Nothing.
 */ function JSXEmptyExpression() {}
/**
 * `{expression}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXExpressionContainer} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXExpressionContainer(node, state) {
    state.write('{');
    this[node.expression.type](node.expression, state);
    state.write('}');
}
/**
 * `<></>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXFragment(node, state) {
    let index = -1;
    this[node.openingFragment.type](node.openingFragment, state);
    if (node.children) {
        while(++index < node.children.length){
            const child = node.children[index];
            // Supported in types but not by Acorn.
            /* c8 ignore next 3 */ if (child.type === 'JSXSpreadChild') {
                throw new Error('JSX spread children are not supported');
            }
            this[child.type](child, state);
        }
    }
    this[node.closingFragment.type](node.closingFragment, state);
}
/**
 * `div`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXIdentifier} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXIdentifier(node, state) {
    state.write(node.name, node);
}
/**
 * `member.expression`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXMemberExpression} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXMemberExpression(node, state) {
    this[node.object.type](node.object, state);
    state.write('.');
    this[node.property.type](node.property, state);
}
/**
 * `ns:name`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXNamespacedName} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXNamespacedName(node, state) {
    this[node.namespace.type](node.namespace, state);
    state.write(':');
    this[node.name.type](node.name, state);
}
/**
 * `<div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXOpeningElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXOpeningElement(node, state) {
    let index = -1;
    state.write('<');
    this[node.name.type](node.name, state);
    if (node.attributes) {
        while(++index < node.attributes.length){
            state.write(' ');
            this[node.attributes[index].type](node.attributes[index], state);
        }
    }
    state.write(node.selfClosing ? ' />' : '>');
}
/**
 * `<>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXOpeningFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXOpeningFragment(node, state) {
    state.write('<>', node);
}
/**
 * `{...argument}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXSpreadAttribute} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXSpreadAttribute(node, state) {
    state.write('{');
    // eslint-disable-next-line new-cap
    this.SpreadElement(node, state);
    state.write('}');
}
/**
 * `!`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JSXText} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {void}
 *   Nothing.
 */ function JSXText(node, state) {
    state.write(encodeJsx(node.value).replace(/[<>{}]/g, ($0)=>$0 === '<' ? '&lt;' : $0 === '>' ? '&gt;' : $0 === '{' ? '&#123;' : '&#125;'), node);
}
/**
 * Make sure that character references don’t pop up.
 *
 * For example, the text `&copy;` should stay that way, and not turn into `©`.
 * We could encode all `&` (easy but verbose) or look for actual valid
 * references (complex but cleanest output).
 * Looking for the 2nd character gives us a middle ground.
 * The `#` is for (decimal and hexadecimal) numeric references, the letters
 * are for the named references.
 *
 * @param {string} value
 *   Value to encode.
 * @returns {string}
 *   Encoded value.
 */ function encodeJsx(value) {
    return value.replace(/&(?=[#a-z])/gi, '&amp;');
}

})()),
"[project]/node_modules/.pnpm/estree-util-to-js@1.2.0/node_modules/estree-util-to-js/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').Program} Program
 * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator
 * @typedef {import('source-map').RawSourceMap} Map
 * @typedef {import('./types.js').Handlers} Handlers
 */ /**
 * @typedef BaseFields
 * @property {Handlers | null | undefined} [handlers]
 *   Object mapping node types to functions handling the corresponding nodes.
 *
 * @typedef SourceMapFieldsWithoutSourceMapGenerator
 * @property {null | undefined} [SourceMapGenerator]
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in.
 *   This works if there is positional info on nodes.
 * @property {null | undefined} [filePath]
 *   Path to input file.
 *   Only used in source map.
 *
 * @typedef SourceMapFieldsWithSourceMapGenerator
 * @property {SourceMapGenerator} SourceMapGenerator
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in.
 *   This works if there is positional info on nodes.
 * @property {string | null | undefined} [filePath]
 *   Path to input file.
 *   Only used in source map.
 *
 * @typedef SourceMapFieldsMaybeSourceMapGenerator
 * @property {SourceMapGenerator | null | undefined} SourceMapGenerator
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in.
 *   This works if there is positional info on nodes.
 * @property {string | null | undefined} [filePath]
 *   Path to input file.
 *   Only used in source map.
 *
 * @typedef {BaseFields & SourceMapFieldsWithoutSourceMapGenerator} OptionsWithoutSourceMapGenerator
 * @typedef {BaseFields & SourceMapFieldsWithSourceMapGenerator} OptionsWithSourceMapGenerator
 * @typedef {BaseFields & SourceMapFieldsMaybeSourceMapGenerator} OptionsWithMaybeMapGenerator
 *
 * @typedef {OptionsWithMaybeMapGenerator} Options
 *   Configuration (optional).
 *
 * @typedef BaseResultFields
 * @property {string} value
 *   Serialized JavaScript.
 *
 * @typedef ResultFieldsWithoutSourceMapGenerator
 * @property {undefined} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` is passed.
 *
 * @typedef ResultFieldsWithSourceMapGenerator
 * @property {Map} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` is not passed.
 *
 * @typedef ResultFieldsMaybeSourceMapGenerator
 * @property {Map | undefined} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` might be passed.
 *
 * @typedef {BaseResultFields & ResultFieldsWithoutSourceMapGenerator} ResultWithoutSourceMapGenerator
 * @typedef {BaseResultFields & ResultFieldsWithSourceMapGenerator} ResultWithSourceMapGenerator
 * @typedef {BaseResultFields & ResultFieldsMaybeSourceMapGenerator} ResultMaybeSourceMapGenerator
 *
 * @typedef {ResultMaybeSourceMapGenerator} Result
 */ // @ts-expect-error: `astring` has broken types.
__turbopack_esm__({
    "toJs": ()=>toJs
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$astring$40$1$2e$8$2e$6$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/astring@1.8.6/node_modules/astring/dist/astring.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
/** @type {Handlers} */ const GENERATOR = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$astring$40$1$2e$8$2e$6$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__.GENERATOR;
/** @type {(node: Program, options: unknown) => string} */ const generate = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$astring$40$1$2e$8$2e$6$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__.generate;
const toJs = /**
     * @param {Program} tree
     * @param {Options | null | undefined} [options]
     * @returns {Result}
     */ function(tree, options) {
    const { SourceMapGenerator, filePath, handlers } = options || {};
    const sourceMap = SourceMapGenerator ? new SourceMapGenerator({
        file: filePath || '<unknown>.js'
    }) : undefined;
    const value = generate(tree, {
        comments: true,
        generator: {
            ...GENERATOR,
            ...handlers
        },
        sourceMap
    });
    const map = sourceMap ? sourceMap.toJSON() : undefined;
    return {
        value,
        map
    };
};

})()),
"[project]/node_modules/.pnpm/estree-util-to-js@1.2.0/node_modules/estree-util-to-js/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/types.js').Handler} Handler
 * @typedef {import('./lib/types.js').Handlers} Handlers
 * @typedef {import('./lib/index.js').Options} Options
 * @typedef {import('./lib/index.js').Result} Result
 * @typedef {import('./lib/types.js').State} State
 */ __turbopack_esm__({
    "jsx": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$to$2d$js$40$1$2e$2$2e$0$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$jsx$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["jsx"],
    "toJs": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$to$2d$js$40$1$2e$2$2e$0$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toJs"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$to$2d$js$40$1$2e$2$2e$0$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-to-js@1.2.0/node_modules/estree-util-to-js/lib/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$to$2d$js$40$1$2e$2$2e$0$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$jsx$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-to-js@1.2.0/node_modules/estree-util-to-js/lib/jsx.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),
"[project]/node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/jsx.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute
 * @typedef {import('estree-jsx').JSXClosingElement} JsxClosingElement
 * @typedef {import('estree-jsx').JSXClosingFragment} JsxClosingFragment
 * @typedef {import('estree-jsx').JSXElement} JsxElement
 * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer
 * @typedef {import('estree-jsx').JSXFragment} JsxFragment
 * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier
 * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression
 * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName
 * @typedef {import('estree-jsx').JSXOpeningElement} JsxOpeningElement
 * @typedef {import('estree-jsx').JSXOpeningFragment} JsxOpeningFragment
 * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute
 * @typedef {import('estree-jsx').JSXText} JsxText
 *
 * @typedef {import('./index.js').Generator} Generator
 * @typedef {import('./index.js').State} State
 */ __turbopack_esm__({
    "jsx": ()=>jsx
});
const jsx = {
    JSXAttribute: jsxAttribute,
    JSXClosingElement: jsxClosingElement,
    JSXClosingFragment: jsxClosingFragment,
    JSXElement: jsxElement,
    JSXEmptyExpression: jsxEmptyExpression,
    JSXExpressionContainer: jsxExpressionContainer,
    JSXFragment: jsxFragment,
    JSXIdentifier: jsxIdentifier,
    JSXMemberExpression: jsxMemberExpression,
    JSXNamespacedName: jsxNamespacedName,
    JSXOpeningElement: jsxOpeningElement,
    JSXOpeningFragment: jsxOpeningFragment,
    JSXSpreadAttribute: jsxSpreadAttribute,
    JSXText: jsxText
};
/**
 * `attr`
 * `attr="something"`
 * `attr={1}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxAttribute} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxAttribute(node, state) {
    this[node.name.type](node.name, state);
    if (node.value !== null && node.value !== undefined) {
        state.write('=');
        // Encode double quotes in attribute values.
        if (node.value.type === 'Literal') {
            state.write('"' + encodeJsx(String(node.value.value)).replace(/"/g, '&quot;') + '"', node);
        } else {
            this[node.value.type](node.value, state);
        }
    }
}
/**
 * `</div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxClosingElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxClosingElement(node, state) {
    state.write('</');
    this[node.name.type](node.name, state);
    state.write('>');
}
/**
 * `</>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxClosingFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxClosingFragment(node, state) {
    state.write('</>', node);
}
/**
 * `<div />`
 * `<div></div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxElement(node, state) {
    let index = -1;
    this[node.openingElement.type](node.openingElement, state);
    if (node.children) {
        while(++index < node.children.length){
            const child = node.children[index];
            // Supported in types but not by Acorn.
            /* c8 ignore next 3 */ if (child.type === 'JSXSpreadChild') {
                throw new Error('JSX spread children are not supported');
            }
            this[child.type](child, state);
        }
    }
    if (node.closingElement) {
        this[node.closingElement.type](node.closingElement, state);
    }
}
/**
 * `{}` (always in a `JSXExpressionContainer`, which does the curlies)
 *
 * @this {Generator}
 *   `astring` generator.
 * @returns {undefined}
 *   Nothing.
 */ function jsxEmptyExpression() {}
/**
 * `{expression}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxExpressionContainer} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxExpressionContainer(node, state) {
    state.write('{');
    this[node.expression.type](node.expression, state);
    state.write('}');
}
/**
 * `<></>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxFragment(node, state) {
    let index = -1;
    this[node.openingFragment.type](node.openingFragment, state);
    if (node.children) {
        while(++index < node.children.length){
            const child = node.children[index];
            // Supported in types but not by Acorn.
            /* c8 ignore next 3 */ if (child.type === 'JSXSpreadChild') {
                throw new Error('JSX spread children are not supported');
            }
            this[child.type](child, state);
        }
    }
    this[node.closingFragment.type](node.closingFragment, state);
}
/**
 * `div`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxIdentifier} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxIdentifier(node, state) {
    state.write(node.name, node);
}
/**
 * `member.expression`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxMemberExpression} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxMemberExpression(node, state) {
    this[node.object.type](node.object, state);
    state.write('.');
    this[node.property.type](node.property, state);
}
/**
 * `ns:name`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxNamespacedName} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxNamespacedName(node, state) {
    this[node.namespace.type](node.namespace, state);
    state.write(':');
    this[node.name.type](node.name, state);
}
/**
 * `<div>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxOpeningElement} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxOpeningElement(node, state) {
    let index = -1;
    state.write('<');
    this[node.name.type](node.name, state);
    if (node.attributes) {
        while(++index < node.attributes.length){
            state.write(' ');
            this[node.attributes[index].type](node.attributes[index], state);
        }
    }
    state.write(node.selfClosing ? ' />' : '>');
}
/**
 * `<>`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxOpeningFragment} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxOpeningFragment(node, state) {
    state.write('<>', node);
}
/**
 * `{...argument}`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxSpreadAttribute} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxSpreadAttribute(node, state) {
    state.write('{');
    // eslint-disable-next-line new-cap
    this.SpreadElement(node, state);
    state.write('}');
}
/**
 * `!`
 *
 * @this {Generator}
 *   `astring` generator.
 * @param {JsxText} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 */ function jsxText(node, state) {
    state.write(encodeJsx(node.value).replace(/[<>{}]/g, replaceJsxChar), node);
}
/**
 * Make sure that character references don’t pop up.
 *
 * For example, the text `&copy;` should stay that way, and not turn into `©`.
 * We could encode all `&` (easy but verbose) or look for actual valid
 * references (complex but cleanest output).
 * Looking for the 2nd character gives us a middle ground.
 * The `#` is for (decimal and hexadecimal) numeric references, the letters
 * are for the named references.
 *
 * @param {string} value
 *   Value to encode.
 * @returns {string}
 *   Encoded value.
 */ function encodeJsx(value) {
    return value.replace(/&(?=[#a-z])/gi, '&amp;');
}
/**
 * @param {string} $0
 * @returns {string}
 */ function replaceJsxChar($0) {
    return $0 === '<' ? '&lt;' : $0 === '>' ? '&gt;' : $0 === '{' ? '&#123;' : '&#125;';
}

})()),
"[project]/node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('astring').State} State
 * @typedef {import('estree-jsx').Node} Nodes
 * @typedef {import('estree-jsx').Program} Program
 * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator
 * @typedef {import('source-map').RawSourceMap} Map
 */ /**
 * @typedef {Record<Nodes['type'], Handler>} Generator
 *
 * @callback Handler
 *  Handle a particular node.
 * @param {Generator} this
 *   `astring` generator.
 * @param {any} node
 *   Node to serialize.
 * @param {State} state
 *   Info passed around.
 * @returns {undefined}
 *   Nothing.
 *
 * @typedef {Partial<import('astring').Generator>} Handlers
 */ /**
 * @typedef {OptionsWithMaybeMapGenerator} Options
 *   Configuration.
 *
 * @typedef OptionsFieldsBase
 *   Base shared option fields.
 * @property {Handlers | null | undefined} [handlers]
 *   Object mapping node types to functions handling the corresponding nodes.
 *
 * @typedef OptionsFieldsWithoutSourceMapGenerator
 *   Extra option fields where there’s definitely no source map generator.
 * @property {null | undefined} [SourceMapGenerator]
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in; this works if there is positional info on nodes.
 * @property {null | undefined} [filePath]
 *   Path to input file; only used in source map.
 *
 * @typedef OptionsFieldsWithSourceMapGenerator
 *   Extra option fields where there’s definitely a source map generator.
 * @property {SourceMapGenerator} SourceMapGenerator
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in; this works if there is positional info on nodes.
 * @property {string | null | undefined} [filePath]
 *   Path to input file; only used in source map.
 *
 * @typedef OptionsFieldsMaybeSourceMapGenerator
 *   Extra option fields where there may or may not be a source map generator.
 * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]
 *   Generate a source map by passing a `SourceMapGenerator` from `source-map`
 *   in; this works if there is positional info on nodes.
 * @property {string | null | undefined} [filePath]
 *   Path to input file; only used in source map.
 *
 * @typedef {OptionsFieldsBase & OptionsFieldsWithoutSourceMapGenerator} OptionsWithoutSourceMapGenerator
 *   Options where there’s definitely no source map generator.
 * @typedef {OptionsFieldsBase & OptionsFieldsWithSourceMapGenerator} OptionsWithSourceMapGenerator
 *   Options where there’s definitely a source map generator.
 * @typedef {OptionsFieldsBase & OptionsFieldsMaybeSourceMapGenerator} OptionsWithMaybeMapGenerator
 *   Options where there may or may not be a source map generator.
 *
 * @typedef {ResultWithMaybeSourceMapGenerator} Result
 *   Result.
 *
 * @typedef ResultFieldsBase
 *   Base shared result fields.
 * @property {string} value
 *   Serialized JavaScript.
 *
 * @typedef ResultFieldsWithoutSourceMapGenerator
 *   Extra result fields where there’s definitely no source map generator.
 * @property {undefined} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` is passed.
 *
 * @typedef ResultFieldsWithSourceMapGenerator
 *   Extra result fields where there’s definitely a source map generator.
 * @property {Map} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` is not passed.
 *
 * @typedef ResultFieldsMaybeSourceMapGenerator
 *   Extra result fields where there may or may not be a source map generator.
 * @property {Map | undefined} map
 *   Source map as (parsed) JSON, if `SourceMapGenerator` might be passed.
 *
 * @typedef {ResultFieldsBase & ResultFieldsWithoutSourceMapGenerator} ResultWithoutSourceMapGenerator
 *   Result where there’s definitely no source map generator.
 * @typedef {ResultFieldsBase & ResultFieldsWithSourceMapGenerator} ResultWithSourceMapGenerator
 *   Result where there’s definitely a source map generator.
 * @typedef {ResultFieldsBase & ResultFieldsMaybeSourceMapGenerator} ResultWithMaybeSourceMapGenerator
 *   Result where there may or may not be a source map generator.
 */ __turbopack_esm__({
    "toJs": ()=>toJs
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$astring$40$1$2e$8$2e$6$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/astring@1.8.6/node_modules/astring/dist/astring.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
/** @type {Options} */ const emptyOptions = {};
function toJs(tree, options) {
    const { SourceMapGenerator, filePath, handlers } = options || emptyOptions;
    const sourceMap = SourceMapGenerator ? new SourceMapGenerator({
        file: filePath || '<unknown>.js'
    }) : undefined;
    const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$astring$40$1$2e$8$2e$6$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["generate"](tree, // @ts-expect-error: `sourceMap` can be undefined, `astring` types are buggy.
    {
        comments: true,
        generator: {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$astring$40$1$2e$8$2e$6$2f$node_modules$2f$astring$2f$dist$2f$astring$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["GENERATOR"],
            ...handlers
        },
        sourceMap: sourceMap || undefined
    });
    const map = sourceMap ? sourceMap.toJSON() : undefined;
    return {
        value,
        map
    };
}

})()),
"[project]/node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Handler} Handler
 * @typedef {import('./lib/index.js').Handlers} Handlers
 * @typedef {import('./lib/index.js').Options} Options
 * @typedef {import('./lib/index.js').Result} Result
 * @typedef {import('./lib/index.js').State} State
 */ __turbopack_esm__({
    "jsx": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$to$2d$js$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$jsx$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["jsx"],
    "toJs": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$to$2d$js$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toJs"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$to$2d$js$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$to$2d$js$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$to$2d$js$2f$lib$2f$jsx$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/jsx.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),
"[project]/node_modules/.pnpm/astring@1.8.6/node_modules/astring/dist/astring.mjs [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Astring is a tiny and fast JavaScript code generator from an ESTree-compliant AST.
//
// Astring was written by David Bonnet and released under an MIT license.
//
// The Git repository for Astring is available at:
// https://github.com/davidbonnet/astring.git
//
// Please use the GitHub bug tracker to report issues:
// https://github.com/davidbonnet/astring/issues
__turbopack_esm__({
    "EXPRESSIONS_PRECEDENCE": ()=>EXPRESSIONS_PRECEDENCE,
    "GENERATOR": ()=>GENERATOR,
    "NEEDS_PARENTHESES": ()=>NEEDS_PARENTHESES,
    "baseGenerator": ()=>baseGenerator,
    "generate": ()=>generate
});
const { stringify } = JSON;
/* c8 ignore if */ if (!String.prototype.repeat) {
    /* c8 ignore next */ throw new Error('String.prototype.repeat is undefined, see https://github.com/davidbonnet/astring#installation');
}
/* c8 ignore if */ if (!String.prototype.endsWith) {
    /* c8 ignore next */ throw new Error('String.prototype.endsWith is undefined, see https://github.com/davidbonnet/astring#installation');
}
const OPERATOR_PRECEDENCE = {
    '||': 2,
    '??': 3,
    '&&': 4,
    '|': 5,
    '^': 6,
    '&': 7,
    '==': 8,
    '!=': 8,
    '===': 8,
    '!==': 8,
    '<': 9,
    '>': 9,
    '<=': 9,
    '>=': 9,
    in: 9,
    instanceof: 9,
    '<<': 10,
    '>>': 10,
    '>>>': 10,
    '+': 11,
    '-': 11,
    '*': 12,
    '%': 12,
    '/': 12,
    '**': 13
};
const NEEDS_PARENTHESES = 17;
const EXPRESSIONS_PRECEDENCE = {
    // Definitions
    ArrayExpression: 20,
    TaggedTemplateExpression: 20,
    ThisExpression: 20,
    Identifier: 20,
    PrivateIdentifier: 20,
    Literal: 18,
    TemplateLiteral: 20,
    Super: 20,
    SequenceExpression: 20,
    // Operations
    MemberExpression: 19,
    ChainExpression: 19,
    CallExpression: 19,
    NewExpression: 19,
    // Other definitions
    ArrowFunctionExpression: NEEDS_PARENTHESES,
    ClassExpression: NEEDS_PARENTHESES,
    FunctionExpression: NEEDS_PARENTHESES,
    ObjectExpression: NEEDS_PARENTHESES,
    // Other operations
    UpdateExpression: 16,
    UnaryExpression: 15,
    AwaitExpression: 15,
    BinaryExpression: 14,
    LogicalExpression: 13,
    ConditionalExpression: 4,
    AssignmentExpression: 3,
    YieldExpression: 2,
    RestElement: 1
};
function formatSequence(state, nodes) {
    /*
  Writes into `state` a sequence of `nodes`.
  */ const { generator } = state;
    state.write('(');
    if (nodes != null && nodes.length > 0) {
        generator[nodes[0].type](nodes[0], state);
        const { length } = nodes;
        for(let i = 1; i < length; i++){
            const param = nodes[i];
            state.write(', ');
            generator[param.type](param, state);
        }
    }
    state.write(')');
}
function expressionNeedsParenthesis(state, node, parentNode, isRightHand) {
    const nodePrecedence = state.expressionsPrecedence[node.type];
    if (nodePrecedence === NEEDS_PARENTHESES) {
        return true;
    }
    const parentNodePrecedence = state.expressionsPrecedence[parentNode.type];
    if (nodePrecedence !== parentNodePrecedence) {
        // Different node types
        return !isRightHand && nodePrecedence === 15 && parentNodePrecedence === 14 && parentNode.operator === '**' || nodePrecedence < parentNodePrecedence;
    }
    if (nodePrecedence !== 13 && nodePrecedence !== 14) {
        // Not a `LogicalExpression` or `BinaryExpression`
        return false;
    }
    if (node.operator === '**' && parentNode.operator === '**') {
        // Exponentiation operator has right-to-left associativity
        return !isRightHand;
    }
    if (nodePrecedence === 13 && parentNodePrecedence === 13 && (node.operator === '??' || parentNode.operator === '??')) {
        // Nullish coalescing and boolean operators cannot be combined
        return true;
    }
    if (isRightHand) {
        // Parenthesis are used if both operators have the same precedence
        return OPERATOR_PRECEDENCE[node.operator] <= OPERATOR_PRECEDENCE[parentNode.operator];
    }
    return OPERATOR_PRECEDENCE[node.operator] < OPERATOR_PRECEDENCE[parentNode.operator];
}
function formatExpression(state, node, parentNode, isRightHand) {
    /*
  Writes into `state` the provided `node`, adding parenthesis around if the provided `parentNode` needs it. If `node` is a right-hand argument, the provided `isRightHand` parameter should be `true`.
  */ const { generator } = state;
    if (expressionNeedsParenthesis(state, node, parentNode, isRightHand)) {
        state.write('(');
        generator[node.type](node, state);
        state.write(')');
    } else {
        generator[node.type](node, state);
    }
}
function reindent(state, text, indent, lineEnd) {
    /*
  Writes into `state` the `text` string reindented with the provided `indent`.
  */ const lines = text.split('\n');
    const end = lines.length - 1;
    state.write(lines[0].trim());
    if (end > 0) {
        state.write(lineEnd);
        for(let i = 1; i < end; i++){
            state.write(indent + lines[i].trim() + lineEnd);
        }
        state.write(indent + lines[end].trim());
    }
}
function formatComments(state, comments, indent, lineEnd) {
    /*
  Writes into `state` the provided list of `comments`, with the given `indent` and `lineEnd` strings.
  Line comments will end with `"\n"` regardless of the value of `lineEnd`.
  Expects to start on a new unindented line.
  */ const { length } = comments;
    for(let i = 0; i < length; i++){
        const comment = comments[i];
        state.write(indent);
        if (comment.type[0] === 'L') {
            // Line comment
            state.write('// ' + comment.value.trim() + '\n', comment);
        } else {
            // Block comment
            state.write('/*');
            reindent(state, comment.value, indent, lineEnd);
            state.write('*/' + lineEnd);
        }
    }
}
function hasCallExpression(node) {
    /*
  Returns `true` if the provided `node` contains a call expression and `false` otherwise.
  */ let currentNode = node;
    while(currentNode != null){
        const { type } = currentNode;
        if (type[0] === 'C' && type[1] === 'a') {
            // Is CallExpression
            return true;
        } else if (type[0] === 'M' && type[1] === 'e' && type[2] === 'm') {
            // Is MemberExpression
            currentNode = currentNode.object;
        } else {
            return false;
        }
    }
}
function formatVariableDeclaration(state, node) {
    /*
  Writes into `state` a variable declaration.
  */ const { generator } = state;
    const { declarations } = node;
    state.write(node.kind + ' ');
    const { length } = declarations;
    if (length > 0) {
        generator.VariableDeclarator(declarations[0], state);
        for(let i = 1; i < length; i++){
            state.write(', ');
            generator.VariableDeclarator(declarations[i], state);
        }
    }
}
let ForInStatement, FunctionDeclaration, RestElement, BinaryExpression, ArrayExpression, BlockStatement;
const GENERATOR = {
    /*
  Default generator.
  */ Program (node, state) {
        const indent = state.indent.repeat(state.indentLevel);
        const { lineEnd, writeComments } = state;
        if (writeComments && node.comments != null) {
            formatComments(state, node.comments, indent, lineEnd);
        }
        const statements = node.body;
        const { length } = statements;
        for(let i = 0; i < length; i++){
            const statement = statements[i];
            if (writeComments && statement.comments != null) {
                formatComments(state, statement.comments, indent, lineEnd);
            }
            state.write(indent);
            this[statement.type](statement, state);
            state.write(lineEnd);
        }
        if (writeComments && node.trailingComments != null) {
            formatComments(state, node.trailingComments, indent, lineEnd);
        }
    },
    BlockStatement: BlockStatement = function(node, state) {
        const indent = state.indent.repeat(state.indentLevel++);
        const { lineEnd, writeComments } = state;
        const statementIndent = indent + state.indent;
        state.write('{');
        const statements = node.body;
        if (statements != null && statements.length > 0) {
            state.write(lineEnd);
            if (writeComments && node.comments != null) {
                formatComments(state, node.comments, statementIndent, lineEnd);
            }
            const { length } = statements;
            for(let i = 0; i < length; i++){
                const statement = statements[i];
                if (writeComments && statement.comments != null) {
                    formatComments(state, statement.comments, statementIndent, lineEnd);
                }
                state.write(statementIndent);
                this[statement.type](statement, state);
                state.write(lineEnd);
            }
            state.write(indent);
        } else {
            if (writeComments && node.comments != null) {
                state.write(lineEnd);
                formatComments(state, node.comments, statementIndent, lineEnd);
                state.write(indent);
            }
        }
        if (writeComments && node.trailingComments != null) {
            formatComments(state, node.trailingComments, statementIndent, lineEnd);
        }
        state.write('}');
        state.indentLevel--;
    },
    ClassBody: BlockStatement,
    StaticBlock (node, state) {
        state.write('static ');
        this.BlockStatement(node, state);
    },
    EmptyStatement (node, state) {
        state.write(';');
    },
    ExpressionStatement (node, state) {
        const precedence = state.expressionsPrecedence[node.expression.type];
        if (precedence === NEEDS_PARENTHESES || precedence === 3 && node.expression.left.type[0] === 'O') {
            // Should always have parentheses or is an AssignmentExpression to an ObjectPattern
            state.write('(');
            this[node.expression.type](node.expression, state);
            state.write(')');
        } else {
            this[node.expression.type](node.expression, state);
        }
        state.write(';');
    },
    IfStatement (node, state) {
        state.write('if (');
        this[node.test.type](node.test, state);
        state.write(') ');
        this[node.consequent.type](node.consequent, state);
        if (node.alternate != null) {
            state.write(' else ');
            this[node.alternate.type](node.alternate, state);
        }
    },
    LabeledStatement (node, state) {
        this[node.label.type](node.label, state);
        state.write(': ');
        this[node.body.type](node.body, state);
    },
    BreakStatement (node, state) {
        state.write('break');
        if (node.label != null) {
            state.write(' ');
            this[node.label.type](node.label, state);
        }
        state.write(';');
    },
    ContinueStatement (node, state) {
        state.write('continue');
        if (node.label != null) {
            state.write(' ');
            this[node.label.type](node.label, state);
        }
        state.write(';');
    },
    WithStatement (node, state) {
        state.write('with (');
        this[node.object.type](node.object, state);
        state.write(') ');
        this[node.body.type](node.body, state);
    },
    SwitchStatement (node, state) {
        const indent = state.indent.repeat(state.indentLevel++);
        const { lineEnd, writeComments } = state;
        state.indentLevel++;
        const caseIndent = indent + state.indent;
        const statementIndent = caseIndent + state.indent;
        state.write('switch (');
        this[node.discriminant.type](node.discriminant, state);
        state.write(') {' + lineEnd);
        const { cases: occurences } = node;
        const { length: occurencesCount } = occurences;
        for(let i = 0; i < occurencesCount; i++){
            const occurence = occurences[i];
            if (writeComments && occurence.comments != null) {
                formatComments(state, occurence.comments, caseIndent, lineEnd);
            }
            if (occurence.test) {
                state.write(caseIndent + 'case ');
                this[occurence.test.type](occurence.test, state);
                state.write(':' + lineEnd);
            } else {
                state.write(caseIndent + 'default:' + lineEnd);
            }
            const { consequent } = occurence;
            const { length: consequentCount } = consequent;
            for(let i = 0; i < consequentCount; i++){
                const statement = consequent[i];
                if (writeComments && statement.comments != null) {
                    formatComments(state, statement.comments, statementIndent, lineEnd);
                }
                state.write(statementIndent);
                this[statement.type](statement, state);
                state.write(lineEnd);
            }
        }
        state.indentLevel -= 2;
        state.write(indent + '}');
    },
    ReturnStatement (node, state) {
        state.write('return');
        if (node.argument) {
            state.write(' ');
            this[node.argument.type](node.argument, state);
        }
        state.write(';');
    },
    ThrowStatement (node, state) {
        state.write('throw ');
        this[node.argument.type](node.argument, state);
        state.write(';');
    },
    TryStatement (node, state) {
        state.write('try ');
        this[node.block.type](node.block, state);
        if (node.handler) {
            const { handler } = node;
            if (handler.param == null) {
                state.write(' catch ');
            } else {
                state.write(' catch (');
                this[handler.param.type](handler.param, state);
                state.write(') ');
            }
            this[handler.body.type](handler.body, state);
        }
        if (node.finalizer) {
            state.write(' finally ');
            this[node.finalizer.type](node.finalizer, state);
        }
    },
    WhileStatement (node, state) {
        state.write('while (');
        this[node.test.type](node.test, state);
        state.write(') ');
        this[node.body.type](node.body, state);
    },
    DoWhileStatement (node, state) {
        state.write('do ');
        this[node.body.type](node.body, state);
        state.write(' while (');
        this[node.test.type](node.test, state);
        state.write(');');
    },
    ForStatement (node, state) {
        state.write('for (');
        if (node.init != null) {
            const { init } = node;
            if (init.type[0] === 'V') {
                formatVariableDeclaration(state, init);
            } else {
                this[init.type](init, state);
            }
        }
        state.write('; ');
        if (node.test) {
            this[node.test.type](node.test, state);
        }
        state.write('; ');
        if (node.update) {
            this[node.update.type](node.update, state);
        }
        state.write(') ');
        this[node.body.type](node.body, state);
    },
    ForInStatement: ForInStatement = function(node, state) {
        state.write(`for ${node.await ? 'await ' : ''}(`);
        const { left } = node;
        if (left.type[0] === 'V') {
            formatVariableDeclaration(state, left);
        } else {
            this[left.type](left, state);
        }
        // Identifying whether node.type is `ForInStatement` or `ForOfStatement`
        state.write(node.type[3] === 'I' ? ' in ' : ' of ');
        this[node.right.type](node.right, state);
        state.write(') ');
        this[node.body.type](node.body, state);
    },
    ForOfStatement: ForInStatement,
    DebuggerStatement (node, state) {
        state.write('debugger;', node);
    },
    FunctionDeclaration: FunctionDeclaration = function(node, state) {
        state.write((node.async ? 'async ' : '') + (node.generator ? 'function* ' : 'function ') + (node.id ? node.id.name : ''), node);
        formatSequence(state, node.params);
        state.write(' ');
        this[node.body.type](node.body, state);
    },
    FunctionExpression: FunctionDeclaration,
    VariableDeclaration (node, state) {
        formatVariableDeclaration(state, node);
        state.write(';');
    },
    VariableDeclarator (node, state) {
        this[node.id.type](node.id, state);
        if (node.init != null) {
            state.write(' = ');
            this[node.init.type](node.init, state);
        }
    },
    ClassDeclaration (node, state) {
        state.write('class ' + (node.id ? `${node.id.name} ` : ''), node);
        if (node.superClass) {
            state.write('extends ');
            const { superClass } = node;
            const { type } = superClass;
            const precedence = state.expressionsPrecedence[type];
            if ((type[0] !== 'C' || type[1] !== 'l' || type[5] !== 'E') && (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.ClassExpression)) {
                // Not a ClassExpression that needs parentheses
                state.write('(');
                this[node.superClass.type](superClass, state);
                state.write(')');
            } else {
                this[superClass.type](superClass, state);
            }
            state.write(' ');
        }
        this.ClassBody(node.body, state);
    },
    ImportDeclaration (node, state) {
        state.write('import ');
        const { specifiers } = node;
        const { length } = specifiers;
        // TODO: Once babili is fixed, put this after condition
        // https://github.com/babel/babili/issues/430
        let i = 0;
        if (length > 0) {
            for(; i < length;){
                if (i > 0) {
                    state.write(', ');
                }
                const specifier = specifiers[i];
                const type = specifier.type[6];
                if (type === 'D') {
                    // ImportDefaultSpecifier
                    state.write(specifier.local.name, specifier);
                    i++;
                } else if (type === 'N') {
                    // ImportNamespaceSpecifier
                    state.write('* as ' + specifier.local.name, specifier);
                    i++;
                } else {
                    break;
                }
            }
            if (i < length) {
                state.write('{');
                for(;;){
                    const specifier = specifiers[i];
                    const { name } = specifier.imported;
                    state.write(name, specifier);
                    if (name !== specifier.local.name) {
                        state.write(' as ' + specifier.local.name);
                    }
                    if (++i < length) {
                        state.write(', ');
                    } else {
                        break;
                    }
                }
                state.write('}');
            }
            state.write(' from ');
        }
        this.Literal(node.source, state);
        state.write(';');
    },
    ImportExpression (node, state) {
        state.write('import(');
        this[node.source.type](node.source, state);
        state.write(')');
    },
    ExportDefaultDeclaration (node, state) {
        state.write('export default ');
        this[node.declaration.type](node.declaration, state);
        if (state.expressionsPrecedence[node.declaration.type] != null && node.declaration.type[0] !== 'F') {
            // All expression nodes except `FunctionExpression`
            state.write(';');
        }
    },
    ExportNamedDeclaration (node, state) {
        state.write('export ');
        if (node.declaration) {
            this[node.declaration.type](node.declaration, state);
        } else {
            state.write('{');
            const { specifiers } = node, { length } = specifiers;
            if (length > 0) {
                for(let i = 0;;){
                    const specifier = specifiers[i];
                    const { name } = specifier.local;
                    state.write(name, specifier);
                    if (name !== specifier.exported.name) {
                        state.write(' as ' + specifier.exported.name);
                    }
                    if (++i < length) {
                        state.write(', ');
                    } else {
                        break;
                    }
                }
            }
            state.write('}');
            if (node.source) {
                state.write(' from ');
                this.Literal(node.source, state);
            }
            state.write(';');
        }
    },
    ExportAllDeclaration (node, state) {
        if (node.exported != null) {
            state.write('export * as ' + node.exported.name + ' from ');
        } else {
            state.write('export * from ');
        }
        this.Literal(node.source, state);
        state.write(';');
    },
    MethodDefinition (node, state) {
        if (node.static) {
            state.write('static ');
        }
        const kind = node.kind[0];
        if (kind === 'g' || kind === 's') {
            // Getter or setter
            state.write(node.kind + ' ');
        }
        if (node.value.async) {
            state.write('async ');
        }
        if (node.value.generator) {
            state.write('*');
        }
        if (node.computed) {
            state.write('[');
            this[node.key.type](node.key, state);
            state.write(']');
        } else {
            this[node.key.type](node.key, state);
        }
        formatSequence(state, node.value.params);
        state.write(' ');
        this[node.value.body.type](node.value.body, state);
    },
    ClassExpression (node, state) {
        this.ClassDeclaration(node, state);
    },
    ArrowFunctionExpression (node, state) {
        state.write(node.async ? 'async ' : '', node);
        const { params } = node;
        if (params != null) {
            // Omit parenthesis if only one named parameter
            if (params.length === 1 && params[0].type[0] === 'I') {
                // If params[0].type[0] starts with 'I', it can't be `ImportDeclaration` nor `IfStatement` and thus is `Identifier`
                state.write(params[0].name, params[0]);
            } else {
                formatSequence(state, node.params);
            }
        }
        state.write(' => ');
        if (node.body.type[0] === 'O') {
            // Body is an object expression
            state.write('(');
            this.ObjectExpression(node.body, state);
            state.write(')');
        } else {
            this[node.body.type](node.body, state);
        }
    },
    ThisExpression (node, state) {
        state.write('this', node);
    },
    Super (node, state) {
        state.write('super', node);
    },
    RestElement: RestElement = function(node, state) {
        state.write('...');
        this[node.argument.type](node.argument, state);
    },
    SpreadElement: RestElement,
    YieldExpression (node, state) {
        state.write(node.delegate ? 'yield*' : 'yield');
        if (node.argument) {
            state.write(' ');
            this[node.argument.type](node.argument, state);
        }
    },
    AwaitExpression (node, state) {
        state.write('await ', node);
        formatExpression(state, node.argument, node);
    },
    TemplateLiteral (node, state) {
        const { quasis, expressions } = node;
        state.write('`');
        const { length } = expressions;
        for(let i = 0; i < length; i++){
            const expression = expressions[i];
            const quasi = quasis[i];
            state.write(quasi.value.raw, quasi);
            state.write('${');
            this[expression.type](expression, state);
            state.write('}');
        }
        const quasi = quasis[quasis.length - 1];
        state.write(quasi.value.raw, quasi);
        state.write('`');
    },
    TemplateElement (node, state) {
        state.write(node.value.raw, node);
    },
    TaggedTemplateExpression (node, state) {
        formatExpression(state, node.tag, node);
        this[node.quasi.type](node.quasi, state);
    },
    ArrayExpression: ArrayExpression = function(node, state) {
        state.write('[');
        if (node.elements.length > 0) {
            const { elements } = node, { length } = elements;
            for(let i = 0;;){
                const element = elements[i];
                if (element != null) {
                    this[element.type](element, state);
                }
                if (++i < length) {
                    state.write(', ');
                } else {
                    if (element == null) {
                        state.write(', ');
                    }
                    break;
                }
            }
        }
        state.write(']');
    },
    ArrayPattern: ArrayExpression,
    ObjectExpression (node, state) {
        const indent = state.indent.repeat(state.indentLevel++);
        const { lineEnd, writeComments } = state;
        const propertyIndent = indent + state.indent;
        state.write('{');
        if (node.properties.length > 0) {
            state.write(lineEnd);
            if (writeComments && node.comments != null) {
                formatComments(state, node.comments, propertyIndent, lineEnd);
            }
            const comma = ',' + lineEnd;
            const { properties } = node, { length } = properties;
            for(let i = 0;;){
                const property = properties[i];
                if (writeComments && property.comments != null) {
                    formatComments(state, property.comments, propertyIndent, lineEnd);
                }
                state.write(propertyIndent);
                this[property.type](property, state);
                if (++i < length) {
                    state.write(comma);
                } else {
                    break;
                }
            }
            state.write(lineEnd);
            if (writeComments && node.trailingComments != null) {
                formatComments(state, node.trailingComments, propertyIndent, lineEnd);
            }
            state.write(indent + '}');
        } else if (writeComments) {
            if (node.comments != null) {
                state.write(lineEnd);
                formatComments(state, node.comments, propertyIndent, lineEnd);
                if (node.trailingComments != null) {
                    formatComments(state, node.trailingComments, propertyIndent, lineEnd);
                }
                state.write(indent + '}');
            } else if (node.trailingComments != null) {
                state.write(lineEnd);
                formatComments(state, node.trailingComments, propertyIndent, lineEnd);
                state.write(indent + '}');
            } else {
                state.write('}');
            }
        } else {
            state.write('}');
        }
        state.indentLevel--;
    },
    Property (node, state) {
        if (node.method || node.kind[0] !== 'i') {
            // Either a method or of kind `set` or `get` (not `init`)
            this.MethodDefinition(node, state);
        } else {
            if (!node.shorthand) {
                if (node.computed) {
                    state.write('[');
                    this[node.key.type](node.key, state);
                    state.write(']');
                } else {
                    this[node.key.type](node.key, state);
                }
                state.write(': ');
            }
            this[node.value.type](node.value, state);
        }
    },
    PropertyDefinition (node, state) {
        if (node.static) {
            state.write('static ');
        }
        if (node.computed) {
            state.write('[');
        }
        this[node.key.type](node.key, state);
        if (node.computed) {
            state.write(']');
        }
        if (node.value == null) {
            if (node.key.type[0] !== 'F') {
                state.write(';');
            }
            return;
        }
        state.write(' = ');
        this[node.value.type](node.value, state);
        state.write(';');
    },
    ObjectPattern (node, state) {
        state.write('{');
        if (node.properties.length > 0) {
            const { properties } = node, { length } = properties;
            for(let i = 0;;){
                this[properties[i].type](properties[i], state);
                if (++i < length) {
                    state.write(', ');
                } else {
                    break;
                }
            }
        }
        state.write('}');
    },
    SequenceExpression (node, state) {
        formatSequence(state, node.expressions);
    },
    UnaryExpression (node, state) {
        if (node.prefix) {
            const { operator, argument, argument: { type } } = node;
            state.write(operator);
            const needsParentheses = expressionNeedsParenthesis(state, argument, node);
            if (!needsParentheses && (operator.length > 1 || type[0] === 'U' && (type[1] === 'n' || type[1] === 'p') && argument.prefix && argument.operator[0] === operator && (operator === '+' || operator === '-'))) {
                // Large operator or argument is UnaryExpression or UpdateExpression node
                state.write(' ');
            }
            if (needsParentheses) {
                state.write(operator.length > 1 ? ' (' : '(');
                this[type](argument, state);
                state.write(')');
            } else {
                this[type](argument, state);
            }
        } else {
            // FIXME: This case never occurs
            this[node.argument.type](node.argument, state);
            state.write(node.operator);
        }
    },
    UpdateExpression (node, state) {
        // Always applied to identifiers or members, no parenthesis check needed
        if (node.prefix) {
            state.write(node.operator);
            this[node.argument.type](node.argument, state);
        } else {
            this[node.argument.type](node.argument, state);
            state.write(node.operator);
        }
    },
    AssignmentExpression (node, state) {
        this[node.left.type](node.left, state);
        state.write(' ' + node.operator + ' ');
        this[node.right.type](node.right, state);
    },
    AssignmentPattern (node, state) {
        this[node.left.type](node.left, state);
        state.write(' = ');
        this[node.right.type](node.right, state);
    },
    BinaryExpression: BinaryExpression = function(node, state) {
        const isIn = node.operator === 'in';
        if (isIn) {
            // Avoids confusion in `for` loops initializers
            state.write('(');
        }
        formatExpression(state, node.left, node, false);
        state.write(' ' + node.operator + ' ');
        formatExpression(state, node.right, node, true);
        if (isIn) {
            state.write(')');
        }
    },
    LogicalExpression: BinaryExpression,
    ConditionalExpression (node, state) {
        const { test } = node;
        const precedence = state.expressionsPrecedence[test.type];
        if (precedence === NEEDS_PARENTHESES || precedence <= state.expressionsPrecedence.ConditionalExpression) {
            state.write('(');
            this[test.type](test, state);
            state.write(')');
        } else {
            this[test.type](test, state);
        }
        state.write(' ? ');
        this[node.consequent.type](node.consequent, state);
        state.write(' : ');
        this[node.alternate.type](node.alternate, state);
    },
    NewExpression (node, state) {
        state.write('new ');
        const precedence = state.expressionsPrecedence[node.callee.type];
        if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.CallExpression || hasCallExpression(node.callee)) {
            state.write('(');
            this[node.callee.type](node.callee, state);
            state.write(')');
        } else {
            this[node.callee.type](node.callee, state);
        }
        formatSequence(state, node['arguments']);
    },
    CallExpression (node, state) {
        const precedence = state.expressionsPrecedence[node.callee.type];
        if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.CallExpression) {
            state.write('(');
            this[node.callee.type](node.callee, state);
            state.write(')');
        } else {
            this[node.callee.type](node.callee, state);
        }
        if (node.optional) {
            state.write('?.');
        }
        formatSequence(state, node['arguments']);
    },
    ChainExpression (node, state) {
        this[node.expression.type](node.expression, state);
    },
    MemberExpression (node, state) {
        const precedence = state.expressionsPrecedence[node.object.type];
        if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.MemberExpression) {
            state.write('(');
            this[node.object.type](node.object, state);
            state.write(')');
        } else {
            this[node.object.type](node.object, state);
        }
        if (node.computed) {
            if (node.optional) {
                state.write('?.');
            }
            state.write('[');
            this[node.property.type](node.property, state);
            state.write(']');
        } else {
            if (node.optional) {
                state.write('?.');
            } else {
                state.write('.');
            }
            this[node.property.type](node.property, state);
        }
    },
    MetaProperty (node, state) {
        state.write(node.meta.name + '.' + node.property.name, node);
    },
    Identifier (node, state) {
        state.write(node.name, node);
    },
    PrivateIdentifier (node, state) {
        state.write(`#${node.name}`, node);
    },
    Literal (node, state) {
        if (node.raw != null) {
            // Non-standard property
            state.write(node.raw, node);
        } else if (node.regex != null) {
            this.RegExpLiteral(node, state);
        } else if (node.bigint != null) {
            state.write(node.bigint + 'n', node);
        } else {
            state.write(stringify(node.value), node);
        }
    },
    RegExpLiteral (node, state) {
        const { regex } = node;
        state.write(`/${regex.pattern}/${regex.flags}`, node);
    }
};
const EMPTY_OBJECT = {};
const baseGenerator = GENERATOR;
class State {
    constructor(options){
        const setup = options == null ? EMPTY_OBJECT : options;
        this.output = '';
        // Functional options
        if (setup.output != null) {
            this.output = setup.output;
            this.write = this.writeToStream;
        } else {
            this.output = '';
        }
        this.generator = setup.generator != null ? setup.generator : GENERATOR;
        this.expressionsPrecedence = setup.expressionsPrecedence != null ? setup.expressionsPrecedence : EXPRESSIONS_PRECEDENCE;
        // Formating setup
        this.indent = setup.indent != null ? setup.indent : '  ';
        this.lineEnd = setup.lineEnd != null ? setup.lineEnd : '\n';
        this.indentLevel = setup.startingIndentLevel != null ? setup.startingIndentLevel : 0;
        this.writeComments = setup.comments ? setup.comments : false;
        // Source map
        if (setup.sourceMap != null) {
            this.write = setup.output == null ? this.writeAndMap : this.writeToStreamAndMap;
            this.sourceMap = setup.sourceMap;
            this.line = 1;
            this.column = 0;
            this.lineEndSize = this.lineEnd.split('\n').length - 1;
            this.mapping = {
                original: null,
                // Uses the entire state to avoid generating ephemeral objects
                generated: this,
                name: undefined,
                source: setup.sourceMap.file || setup.sourceMap._file
            };
        }
    }
    write(code) {
        this.output += code;
    }
    writeToStream(code) {
        this.output.write(code);
    }
    writeAndMap(code, node) {
        this.output += code;
        this.map(code, node);
    }
    writeToStreamAndMap(code, node) {
        this.output.write(code);
        this.map(code, node);
    }
    map(code, node) {
        if (node != null) {
            const { type } = node;
            if (type[0] === 'L' && type[2] === 'n') {
                // LineComment
                this.column = 0;
                this.line++;
                return;
            }
            if (node.loc != null) {
                const { mapping } = this;
                mapping.original = node.loc.start;
                mapping.name = node.name;
                this.sourceMap.addMapping(mapping);
            }
            if (type[0] === 'T' && type[8] === 'E' || type[0] === 'L' && type[1] === 'i' && typeof node.value === 'string') {
                // TemplateElement or Literal string node
                const { length } = code;
                let { column, line } = this;
                for(let i = 0; i < length; i++){
                    if (code[i] === '\n') {
                        column = 0;
                        line++;
                    } else {
                        column++;
                    }
                }
                this.column = column;
                this.line = line;
                return;
            }
        }
        const { length } = code;
        const { lineEnd } = this;
        if (length > 0) {
            if (this.lineEndSize > 0 && (lineEnd.length === 1 ? code[length - 1] === lineEnd : code.endsWith(lineEnd))) {
                this.line += this.lineEndSize;
                this.column = 0;
            } else {
                this.column += length;
            }
        }
    }
    toString() {
        return this.output;
    }
}
function generate(node, options) {
    /*
  Returns a string representing the rendered code of the provided AST `node`.
  The `options` are:

  - `indent`: string to use for indentation (defaults to `␣␣`)
  - `lineEnd`: string to use for line endings (defaults to `\n`)
  - `startingIndentLevel`: indent level to start from (defaults to `0`)
  - `comments`: generate comments if `true` (defaults to `false`)
  - `output`: output stream to write the rendered code to (defaults to `null`)
  - `generator`: custom code generator (defaults to `GENERATOR`)
  - `expressionsPrecedence`: custom map of node types and their precedence level (defaults to `EXPRESSIONS_PRECEDENCE`)
  */ const state = new State(options);
    // Travel through the AST node and generate the code
    state.generator[node.type](node, state);
    return state.output;
}

})()),
"[project]/node_modules/.pnpm/unist-util-position-from-estree@1.1.2/node_modules/unist-util-position-from-estree/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Position} Position
 *
 * @typedef {[number, number]} RangeLike
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 *
 * @typedef LocLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef NodeLike
 * @property {LocLike | null | undefined} [loc]
 * @property {RangeLike | null | undefined} [range]
 * @property {number | null | undefined} [start]
 * @property {number | null | undefined} [end]
 */ /**
 * Turn an estree `node` into a unist `position`.
 *
 * @param {NodeLike | null | undefined} [node]
 *   estree node.
 * @returns {Position}
 *   unist position.
 */ __turbopack_esm__({
    "positionFromEstree": ()=>positionFromEstree
});
function positionFromEstree(node) {
    const nodeLike = node || {};
    const loc = nodeLike.loc || {};
    const range = nodeLike.range || [
        0,
        0
    ];
    const startColumn = loc.start ? numberOrUndefined(loc.start.column) : undefined;
    const endColumn = loc.end ? numberOrUndefined(loc.end.column) : undefined;
    return {
        start: {
            // @ts-expect-error: return no point / no position next major.
            line: loc.start ? numberOrUndefined(loc.start.line) : undefined,
            // @ts-expect-error: return no point / no position next major.
            column: startColumn === undefined ? undefined : startColumn + 1,
            offset: numberOrUndefined(range[0] || nodeLike.start)
        },
        end: {
            // @ts-expect-error: return no point / no position next major.
            line: loc.end ? numberOrUndefined(loc.end.line) : undefined,
            // @ts-expect-error: return no point / no position next major.
            column: endColumn === undefined ? undefined : endColumn + 1,
            offset: numberOrUndefined(range[1] || nodeLike.end)
        }
    };
}
/**
 *
 * @param {number | null | undefined} value
 * @returns {number | undefined}
 */ function numberOrUndefined(value) {
    return typeof value === 'number' && value > -1 ? value : undefined;
}

})()),
"[project]/node_modules/.pnpm/unist-util-position-from-estree@1.1.2/node_modules/unist-util-position-from-estree/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "positionFromEstree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$1$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$1$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position-from-estree@1.1.2/node_modules/unist-util-position-from-estree/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Point} UnistPoint
 * @typedef {import('unist').Position} UnistPosition
 */ /**
 * @typedef {[start: number | null | undefined, end: number | null | undefined]} RangeLike
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 *
 * @typedef LocLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef NodeLike
 * @property {LocLike | null | undefined} [loc]
 * @property {RangeLike | null | undefined} [range]
 * @property {number | null | undefined} [start]
 * @property {number | null | undefined} [end]
 */ /**
 * Turn an estree `node` into a unist `position`.
 *
 * @param {NodeLike | null | undefined} [node]
 *   estree node.
 * @returns {UnistPosition | undefined}
 *   unist position.
 */ __turbopack_esm__({
    "positionFromEstree": ()=>positionFromEstree
});
function positionFromEstree(node) {
    const nodeLike = node || {};
    const loc = nodeLike.loc || {};
    const range = nodeLike.range || [
        undefined,
        undefined
    ];
    const start = pointOrUndefined(loc.start, range[0] || nodeLike.start);
    const end = pointOrUndefined(loc.end, range[1] || nodeLike.end);
    if (start && end) {
        return {
            start,
            end
        };
    }
}
/**
 * @param {unknown} estreePoint
 *   estree point.
 * @param {unknown} estreeOffset
 *  estree offset.
 * @returns {UnistPoint | undefined}
 *   unist point.
 */ function pointOrUndefined(estreePoint, estreeOffset) {
    if (estreePoint && typeof estreePoint === 'object') {
        const line = 'line' in estreePoint ? numberOrUndefined(estreePoint.line) : undefined;
        const column = 'column' in estreePoint ? numberOrUndefined(estreePoint.column) : undefined;
        if (line && column !== undefined) {
            return {
                line,
                column: column + 1,
                offset: numberOrUndefined(estreeOffset)
            };
        }
    }
}
/**
 * @param {unknown} value
 * @returns {number | undefined}
 */ function numberOrUndefined(value) {
    return typeof value === 'number' && value > -1 ? value : undefined;
}

})()),
"[project]/node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "positionFromEstree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$2$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$2$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/is-reference@3.0.2/node_modules/is-reference/src/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/** @typedef { import('estree').Node} Node */ /** @typedef {Node | {
 *   type: 'PropertyDefinition';
 *   computed: boolean;
 *   value: Node
 * }} NodeWithPropertyDefinition */ /**
 *
 * @param {NodeWithPropertyDefinition} node
 * @param {NodeWithPropertyDefinition} parent
 * @returns {boolean}
 */ __turbopack_esm__({
    "default": ()=>is_reference
});
function is_reference(node, parent) {
    if (node.type === 'MemberExpression') {
        return !node.computed && is_reference(node.object, node);
    }
    if (node.type === 'Identifier') {
        if (!parent) return true;
        switch(parent.type){
            // disregard `bar` in `foo.bar`
            case 'MemberExpression':
                return parent.computed || node === parent.object;
            // disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`
            case 'MethodDefinition':
                return parent.computed;
            // disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`
            case 'PropertyDefinition':
                return parent.computed || node === parent.value;
            // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`
            case 'Property':
                return parent.computed || node === parent.value;
            // disregard the `bar` in `export { foo as bar }` or
            // the foo in `import { foo as bar }`
            case 'ExportSpecifier':
            case 'ImportSpecifier':
                return node === parent.local;
            // disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`
            case 'LabeledStatement':
            case 'BreakStatement':
            case 'ContinueStatement':
                return false;
            default:
                return true;
        }
    }
    return false;
}

})()),
"[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/walker.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef { import('estree').Node} Node
 * @typedef {{
 *   skip: () => void;
 *   remove: () => void;
 *   replace: (node: Node) => void;
 * }} WalkerContext
 */ __turbopack_esm__({
    "WalkerBase": ()=>WalkerBase
});
class WalkerBase {
    constructor(){
        /** @type {boolean} */ this.should_skip = false;
        /** @type {boolean} */ this.should_remove = false;
        /** @type {Node | null} */ this.replacement = null;
        /** @type {WalkerContext} */ this.context = {
            skip: ()=>this.should_skip = true,
            remove: ()=>this.should_remove = true,
            replace: (node)=>this.replacement = node
        };
    }
    /**
	 * @template {Node} Parent
	 * @param {Parent | null | undefined} parent
	 * @param {keyof Parent | null | undefined} prop
	 * @param {number | null | undefined} index
	 * @param {Node} node
	 */ replace(parent, prop, index, node) {
        if (parent && prop) {
            if (index != null) {
                /** @type {Array<Node>} */ parent[prop][index] = node;
            } else {
                /** @type {Node} */ parent[prop] = node;
            }
        }
    }
    /**
	 * @template {Node} Parent
	 * @param {Parent | null | undefined} parent
	 * @param {keyof Parent | null | undefined} prop
	 * @param {number | null | undefined} index
	 */ remove(parent, prop, index) {
        if (parent && prop) {
            if (index !== null && index !== undefined) {
                /** @type {Array<Node>} */ parent[prop].splice(index, 1);
            } else {
                delete parent[prop];
            }
        }
    }
}

})()),
"[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/async.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "AsyncWalker": ()=>AsyncWalker
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$walker$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/walker.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class AsyncWalker extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$walker$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["WalkerBase"] {
    /**
	 *
	 * @param {AsyncHandler} [enter]
	 * @param {AsyncHandler} [leave]
	 */ constructor(enter, leave){
        super();
        /** @type {boolean} */ this.should_skip = false;
        /** @type {boolean} */ this.should_remove = false;
        /** @type {Node | null} */ this.replacement = null;
        /** @type {WalkerContext} */ this.context = {
            skip: ()=>this.should_skip = true,
            remove: ()=>this.should_remove = true,
            replace: (node)=>this.replacement = node
        };
        /** @type {AsyncHandler | undefined} */ this.enter = enter;
        /** @type {AsyncHandler | undefined} */ this.leave = leave;
    }
    /**
	 * @template {Node} Parent
	 * @param {Node} node
	 * @param {Parent | null} parent
	 * @param {keyof Parent} [prop]
	 * @param {number | null} [index]
	 * @returns {Promise<Node | null>}
	 */ async visit(node, parent, prop, index) {
        if (node) {
            if (this.enter) {
                const _should_skip = this.should_skip;
                const _should_remove = this.should_remove;
                const _replacement = this.replacement;
                this.should_skip = false;
                this.should_remove = false;
                this.replacement = null;
                await this.enter.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                    node = this.replacement;
                    this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                    this.remove(parent, prop, index);
                }
                const skipped = this.should_skip;
                const removed = this.should_remove;
                this.should_skip = _should_skip;
                this.should_remove = _should_remove;
                this.replacement = _replacement;
                if (skipped) return node;
                if (removed) return null;
            }
            /** @type {keyof Node} */ let key;
            for(key in node){
                /** @type {unknown} */ const value = node[key];
                if (value && typeof value === 'object') {
                    if (Array.isArray(value)) {
                        const nodes = value;
                        for(let i = 0; i < nodes.length; i += 1){
                            const item = nodes[i];
                            if (isNode(item)) {
                                if (!await this.visit(item, node, key, i)) {
                                    // removed
                                    i--;
                                }
                            }
                        }
                    } else if (isNode(value)) {
                        await this.visit(value, node, key, null);
                    }
                }
            }
            if (this.leave) {
                const _replacement = this.replacement;
                const _should_remove = this.should_remove;
                this.replacement = null;
                this.should_remove = false;
                await this.leave.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                    node = this.replacement;
                    this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                    this.remove(parent, prop, index);
                }
                const removed = this.should_remove;
                this.replacement = _replacement;
                this.should_remove = _should_remove;
                if (removed) return null;
            }
        }
        return node;
    }
}
/**
 * Ducktype a node.
 *
 * @param {unknown} value
 * @returns {value is Node}
 */ function isNode(value) {
    return value !== null && typeof value === 'object' && 'type' in value && typeof value.type === 'string';
}

})()),
"[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/sync.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "SyncWalker": ()=>SyncWalker
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$walker$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/walker.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
class SyncWalker extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$walker$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["WalkerBase"] {
    /**
	 *
	 * @param {SyncHandler} [enter]
	 * @param {SyncHandler} [leave]
	 */ constructor(enter, leave){
        super();
        /** @type {boolean} */ this.should_skip = false;
        /** @type {boolean} */ this.should_remove = false;
        /** @type {Node | null} */ this.replacement = null;
        /** @type {WalkerContext} */ this.context = {
            skip: ()=>this.should_skip = true,
            remove: ()=>this.should_remove = true,
            replace: (node)=>this.replacement = node
        };
        /** @type {SyncHandler | undefined} */ this.enter = enter;
        /** @type {SyncHandler | undefined} */ this.leave = leave;
    }
    /**
	 * @template {Node} Parent
	 * @param {Node} node
	 * @param {Parent | null} parent
	 * @param {keyof Parent} [prop]
	 * @param {number | null} [index]
	 * @returns {Node | null}
	 */ visit(node, parent, prop, index) {
        if (node) {
            if (this.enter) {
                const _should_skip = this.should_skip;
                const _should_remove = this.should_remove;
                const _replacement = this.replacement;
                this.should_skip = false;
                this.should_remove = false;
                this.replacement = null;
                this.enter.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                    node = this.replacement;
                    this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                    this.remove(parent, prop, index);
                }
                const skipped = this.should_skip;
                const removed = this.should_remove;
                this.should_skip = _should_skip;
                this.should_remove = _should_remove;
                this.replacement = _replacement;
                if (skipped) return node;
                if (removed) return null;
            }
            /** @type {keyof Node} */ let key;
            for(key in node){
                /** @type {unknown} */ const value = node[key];
                if (value && typeof value === 'object') {
                    if (Array.isArray(value)) {
                        const nodes = value;
                        for(let i = 0; i < nodes.length; i += 1){
                            const item = nodes[i];
                            if (isNode(item)) {
                                if (!this.visit(item, node, key, i)) {
                                    // removed
                                    i--;
                                }
                            }
                        }
                    } else if (isNode(value)) {
                        this.visit(value, node, key, null);
                    }
                }
            }
            if (this.leave) {
                const _replacement = this.replacement;
                const _should_remove = this.should_remove;
                this.replacement = null;
                this.should_remove = false;
                this.leave.call(this.context, node, parent, prop, index);
                if (this.replacement) {
                    node = this.replacement;
                    this.replace(parent, prop, index, node);
                }
                if (this.should_remove) {
                    this.remove(parent, prop, index);
                }
                const removed = this.should_remove;
                this.replacement = _replacement;
                this.should_remove = _should_remove;
                if (removed) return null;
            }
        }
        return node;
    }
}
/**
 * Ducktype a node.
 *
 * @param {unknown} value
 * @returns {value is Node}
 */ function isNode(value) {
    return value !== null && typeof value === 'object' && 'type' in value && typeof value.type === 'string';
}

})()),
"[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "asyncWalk": ()=>asyncWalk,
    "walk": ()=>walk
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$sync$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/sync.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$async$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/async.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function walk(ast, { enter, leave }) {
    const instance = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$sync$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SyncWalker"](enter, leave);
    return instance.visit(ast, null);
}
async function asyncWalk(ast, { enter, leave }) {
    const instance = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$async$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["AsyncWalker"](enter, leave);
    return await instance.visit(ast, null);
}

})()),
"[project]/node_modules/.pnpm/periscopic@3.1.0/node_modules/periscopic/src/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Scope": ()=>Scope,
    "analyze": ()=>analyze,
    "extract_identifiers": ()=>extract_identifiers,
    "extract_names": ()=>extract_names
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$reference$40$3$2e$0$2e$2$2f$node_modules$2f$is$2d$reference$2f$src$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-reference@3.0.2/node_modules/is-reference/src/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function analyze(expression) {
    /** @typedef {import('estree').Node} Node */ /** @type {WeakMap<Node, Scope>} */ const map = new WeakMap();
    /** @type {Map<string, Node>} */ const globals = new Map();
    const scope = new Scope(null, false);
    /** @type {[Scope, import('estree').Identifier][]} */ const references = [];
    /** @type {Scope} */ let current_scope = scope;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["walk"](expression, {
        enter (node, parent) {
            switch(node.type){
                case 'Identifier':
                    if (parent && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$reference$40$3$2e$0$2e$2$2f$node_modules$2f$is$2d$reference$2f$src$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](node, parent)) {
                        references.push([
                            current_scope,
                            node
                        ]);
                    }
                    break;
                case 'ImportDeclaration':
                    node.specifiers.forEach((specifier)=>{
                        current_scope.declarations.set(specifier.local.name, specifier);
                    });
                    break;
                case 'FunctionExpression':
                case 'FunctionDeclaration':
                case 'ArrowFunctionExpression':
                    if (node.type === 'FunctionDeclaration') {
                        if (node.id) {
                            current_scope.declarations.set(node.id.name, node);
                        }
                        map.set(node, current_scope = new Scope(current_scope, false));
                    } else {
                        map.set(node, current_scope = new Scope(current_scope, false));
                        if (node.type === 'FunctionExpression' && node.id) {
                            current_scope.declarations.set(node.id.name, node);
                        }
                    }
                    node.params.forEach((param)=>{
                        extract_names(param).forEach((name)=>{
                            current_scope.declarations.set(name, node);
                        });
                    });
                    break;
                case 'ForStatement':
                case 'ForInStatement':
                case 'ForOfStatement':
                    map.set(node, current_scope = new Scope(current_scope, true));
                    break;
                case 'BlockStatement':
                    map.set(node, current_scope = new Scope(current_scope, true));
                    break;
                case 'ClassDeclaration':
                case 'VariableDeclaration':
                    current_scope.add_declaration(node);
                    break;
                case 'CatchClause':
                    map.set(node, current_scope = new Scope(current_scope, true));
                    if (node.param) {
                        extract_names(node.param).forEach((name)=>{
                            if (node.param) {
                                current_scope.declarations.set(name, node.param);
                            }
                        });
                    }
                    break;
            }
        },
        leave (node) {
            if (map.has(node) && current_scope !== null && current_scope.parent) {
                current_scope = current_scope.parent;
            }
        }
    });
    for(let i = references.length - 1; i >= 0; --i){
        const [scope, reference] = references[i];
        if (!scope.references.has(reference.name)) {
            add_reference(scope, reference.name);
        }
        if (!scope.find_owner(reference.name)) {
            globals.set(reference.name, reference);
        }
    }
    return {
        map,
        scope,
        globals
    };
}
/**
 * @param {Scope} scope
 * @param {string} name
 */ function add_reference(scope, name) {
    scope.references.add(name);
    if (scope.parent) add_reference(scope.parent, name);
}
class Scope {
    /**
	 * @param {Scope | null} parent 
	 * @param {boolean} block 
	 */ constructor(parent, block){
        /** @type {Scope | null} */ this.parent = parent;
        /** @type {boolean} */ this.block = block;
        /** @type {Map<string, import('estree').Node>} */ this.declarations = new Map();
        /** @type {Set<string>} */ this.initialised_declarations = new Set();
        /** @type {Set<string>} */ this.references = new Set();
    }
    /**
	 * @param {import('estree').VariableDeclaration | import('estree').ClassDeclaration} node
	 */ add_declaration(node) {
        if (node.type === 'VariableDeclaration') {
            if (node.kind === 'var' && this.block && this.parent) {
                this.parent.add_declaration(node);
            } else {
                /** @param {import('estree').VariableDeclarator} declarator */ const handle_declarator = (declarator)=>{
                    extract_names(declarator.id).forEach((name)=>{
                        this.declarations.set(name, node);
                        if (declarator.init) this.initialised_declarations.add(name);
                    });
                    ;
                };
                node.declarations.forEach(handle_declarator);
            }
        } else if (node.id) {
            this.declarations.set(node.id.name, node);
        }
    }
    /**
	 * @param {string} name
	 * @returns {Scope | null}
	 */ find_owner(name) {
        if (this.declarations.has(name)) return this;
        return this.parent && this.parent.find_owner(name);
    }
    /**
	 * @param {string} name
	 * @returns {boolean}
	 */ has(name) {
        return this.declarations.has(name) || !!this.parent && this.parent.has(name);
    }
}
function extract_names(param) {
    return extract_identifiers(param).map((node)=>node.name);
}
function extract_identifiers(param, nodes = []) {
    switch(param.type){
        case 'Identifier':
            nodes.push(param);
            break;
        case 'MemberExpression':
            let object = param;
            while(object.type === 'MemberExpression'){
                object = object.object;
            }
            nodes.push(object);
            break;
        case 'ObjectPattern':
            /** @param {import('estree').Property | import('estree').RestElement} prop */ const handle_prop = (prop)=>{
                if (prop.type === 'RestElement') {
                    extract_identifiers(prop.argument, nodes);
                } else {
                    extract_identifiers(prop.value, nodes);
                }
            };
            param.properties.forEach(handle_prop);
            break;
        case 'ArrayPattern':
            /** @param {import('estree').Node} element */ const handle_element = (element)=>{
                if (element) extract_identifiers(element, nodes);
            };
            param.elements.forEach((element)=>{
                if (element) {
                    handle_element(element);
                }
            });
            break;
        case 'RestElement':
            extract_identifiers(param.argument, nodes);
            break;
        case 'AssignmentPattern':
            extract_identifiers(param.left, nodes);
            break;
    }
    return nodes;
}

})()),
"[project]/node_modules/.pnpm/estree-util-build-jsx@2.2.2/node_modules/estree-util-build-jsx/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').Node} Node
 * @typedef {import('estree-jsx').Expression} Expression
 * @typedef {import('estree-jsx').ObjectExpression} ObjectExpression
 * @typedef {import('estree-jsx').Property} Property
 * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier
 * @typedef {import('estree-jsx').SpreadElement} SpreadElement
 * @typedef {import('estree-jsx').MemberExpression} MemberExpression
 * @typedef {import('estree-jsx').Literal} Literal
 * @typedef {import('estree-jsx').Identifier} Identifier
 * @typedef {import('estree-jsx').JSXAttribute} JSXAttribute
 * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression
 * @typedef {import('estree-jsx').JSXNamespacedName} JSXNamespacedName
 * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier
 *
 * @typedef {'automatic' | 'classic'} Runtime
 *   How to transform JSX.
 *
 * @typedef Options
 *   Configuration.
 *
 *   > 👉 **Note**: you can also configure `runtime`, `importSource`, `pragma`,
 *   > and `pragmaFrag` from within files through comments.
 * @property {Runtime | null | undefined} [runtime='classic']
 *   Choose the runtime.
 *
 *   Comment form: `@jsxRuntime theRuntime`.
 * @property {string | null | undefined} [importSource='react']
 *   Place to import `jsx`, `jsxs`, `jsxDEV`, and `Fragment` from, when the
 *   effective runtime is automatic.
 *
 *   Comment form: `@jsxImportSource theSource`.
 *
 *   > 👉 **Note**: `/jsx-runtime` or `/jsx-dev-runtime` is appended to this
 *   > provided source.
 *   > In CJS, that can resolve to a file (as in `theSource/jsx-runtime.js`),
 *   > but for ESM an export map needs to be set up to point to files:
 *   >
 *   > ```js
 *   > // …
 *   > "exports": {
 *   >   // …
 *   >   "./jsx-runtime": "./path/to/jsx-runtime.js",
 *   >   "./jsx-dev-runtime": "./path/to/jsx-runtime.js"
 *   >   // …
 *   > ```
 * @property {string | null | undefined} [pragma='React.createElement']
 *   Identifier or member expression to call when the effective runtime is
 *   classic.
 *
 *   Comment form: `@jsx identifier`.
 * @property {string | null | undefined} [pragmaFrag='React.Fragment']
 *   Identifier or member expression to use as a symbol for fragments when the
 *   effective runtime is classic.
 *
 *   Comment form: `@jsxFrag identifier`.
 * @property {boolean | null | undefined} [development=false]
 *   When in the automatic runtime, whether to import
 *   `theSource/jsx-dev-runtime.js`, use `jsxDEV`, and pass location info when
 *   available.
 *
 *   This helps debugging but adds a lot of code that you don’t want in
 *   production.
 * @property {string | null | undefined} [filePath]
 *   File path to the original source file.
 *
 *   Passed in location info to `jsxDEV` when using the automatic runtime with
 *   `development: true`.
 *
 * @typedef Annotations
 *   State where info from comments is gathered.
 * @property {Runtime | undefined} [jsxRuntime]
 *   Runtime.
 * @property {string | undefined} [jsx]
 *   JSX identifier (`pragma`).
 * @property {string | undefined} [jsxFrag]
 *   JSX identifier of fragment (`pragmaFrag`).
 * @property {string | undefined} [jsxImportSource]
 *   Where to import an automatic JSX runtime from.
 *
 * @typedef Imports
 *   State of used identifiers from the automatic runtime.
 * @property {boolean | undefined} [fragment]
 *   Symbol of `Fragment`.
 * @property {boolean | undefined} [jsx]
 *   Symbol of `jsx`.
 * @property {boolean | undefined} [jsxs]
 *   Symbol of `jsxs`.
 * @property {boolean | undefined} [jsxDEV]
 *   Symbol of `jsxDEV`.
 */ __turbopack_esm__({
    "buildJsx": ()=>buildJsx
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@2.1.0/node_modules/estree-util-is-identifier-name/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
const regex = /@(jsx|jsxFrag|jsxImportSource|jsxRuntime)\s+(\S+)/g;
function buildJsx(tree, options) {
    const config = options || {};
    let automatic = config.runtime === 'automatic';
    /** @type {Annotations} */ const annotations = {};
    /** @type {Imports} */ const imports = {};
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["walk"](tree, {
        // @ts-expect-error: hush, `estree-walker` is broken.
        enter (/** @type {Node} */ node) {
            if (node.type === 'Program') {
                const comments = node.comments || [];
                let index = -1;
                while(++index < comments.length){
                    regex.lastIndex = 0;
                    let match = regex.exec(comments[index].value);
                    while(match){
                        // @ts-expect-error: indexable.
                        annotations[match[1]] = match[2];
                        match = regex.exec(comments[index].value);
                    }
                }
                if (annotations.jsxRuntime) {
                    if (annotations.jsxRuntime === 'automatic') {
                        automatic = true;
                        if (annotations.jsx) {
                            throw new Error('Unexpected `@jsx` pragma w/ automatic runtime');
                        }
                        if (annotations.jsxFrag) {
                            throw new Error('Unexpected `@jsxFrag` pragma w/ automatic runtime');
                        }
                    } else if (annotations.jsxRuntime === 'classic') {
                        automatic = false;
                        if (annotations.jsxImportSource) {
                            throw new Error('Unexpected `@jsxImportSource` w/ classic runtime');
                        }
                    } else {
                        throw new Error('Unexpected `jsxRuntime` `' + annotations.jsxRuntime + '`, expected `automatic` or `classic`');
                    }
                }
            }
        },
        // @ts-expect-error: hush, `estree-walker` is broken.
        // eslint-disable-next-line complexity
        leave (/** @type {Node} */ node) {
            if (node.type === 'Program') {
                /** @type {Array<ImportSpecifier>} */ const specifiers = [];
                if (imports.fragment) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'Fragment'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_Fragment'
                        }
                    });
                }
                if (imports.jsx) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsx'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsx'
                        }
                    });
                }
                if (imports.jsxs) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsxs'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsxs'
                        }
                    });
                }
                if (imports.jsxDEV) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsxDEV'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsxDEV'
                        }
                    });
                }
                if (specifiers.length > 0) {
                    node.body.unshift({
                        type: 'ImportDeclaration',
                        specifiers,
                        source: {
                            type: 'Literal',
                            value: (annotations.jsxImportSource || config.importSource || 'react') + (config.development ? '/jsx-dev-runtime' : '/jsx-runtime')
                        }
                    });
                }
            }
            if (node.type !== 'JSXElement' && node.type !== 'JSXFragment') {
                return;
            }
            /** @type {Array<Expression>} */ const children = [];
            let index = -1;
            // Figure out `children`.
            while(++index < node.children.length){
                const child = node.children[index];
                if (child.type === 'JSXExpressionContainer') {
                    // Ignore empty expressions.
                    if (child.expression.type !== 'JSXEmptyExpression') {
                        children.push(child.expression);
                    }
                } else if (child.type === 'JSXText') {
                    const value = child.value// Replace tabs w/ spaces.
                    .replace(/\t/g, ' ')// Use line feeds, drop spaces around them.
                    .replace(/ *(\r?\n|\r) */g, '\n')// Collapse multiple line feeds.
                    .replace(/\n+/g, '\n')// Drop final line feeds.
                    .replace(/\n+$/, '')// Drop first line feeds.
                    .replace(/^\n+/, '')// Replace line feeds with spaces.
                    .replace(/\n/g, ' ');
                    // Ignore collapsible text.
                    if (value) {
                        children.push(create(child, {
                            type: 'Literal',
                            value
                        }));
                    }
                } else {
                    // @ts-expect-error JSX{Element,Fragment} have already been compiled,
                    // and `JSXSpreadChild` is not supported in Babel either, so ignore
                    // it.
                    children.push(child);
                }
            }
            /** @type {MemberExpression | Literal | Identifier} */ let name;
            /** @type {Array<Property>} */ let fields = [];
            /** @type {Array<Expression>} */ const objects = [];
            /** @type {Array<Expression | SpreadElement>} */ let parameters = [];
            /** @type {Expression | undefined} */ let key;
            // Do the stuff needed for elements.
            if (node.type === 'JSXElement') {
                name = toIdentifier(node.openingElement.name);
                // If the name could be an identifier, but start with a lowercase letter,
                // it’s not a component.
                if (name.type === 'Identifier' && /^[a-z]/.test(name.name)) {
                    name = create(name, {
                        type: 'Literal',
                        value: name.name
                    });
                }
                /** @type {boolean | undefined} */ let spread;
                const attributes = node.openingElement.attributes;
                let index = -1;
                // Place props in the right order, because we might have duplicates
                // in them and what’s spread in.
                while(++index < attributes.length){
                    const attribute = attributes[index];
                    if (attribute.type === 'JSXSpreadAttribute') {
                        if (fields.length > 0) {
                            objects.push({
                                type: 'ObjectExpression',
                                properties: fields
                            });
                            fields = [];
                        }
                        objects.push(attribute.argument);
                        spread = true;
                    } else {
                        const prop = toProperty(attribute);
                        if (automatic && prop.key.type === 'Identifier' && prop.key.name === 'key') {
                            if (spread) {
                                throw new Error('Expected `key` to come before any spread expressions');
                            }
                            // @ts-expect-error I can’t see object patterns being used as
                            // attribute values? 🤷‍♂️
                            key = prop.value;
                        } else {
                            fields.push(prop);
                        }
                    }
                }
            } else if (automatic) {
                imports.fragment = true;
                name = {
                    type: 'Identifier',
                    name: '_Fragment'
                };
            } else {
                name = toMemberExpression(annotations.jsxFrag || config.pragmaFrag || 'React.Fragment');
            }
            if (automatic) {
                if (children.length > 0) {
                    fields.push({
                        type: 'Property',
                        key: {
                            type: 'Identifier',
                            name: 'children'
                        },
                        value: children.length > 1 ? {
                            type: 'ArrayExpression',
                            elements: children
                        } : children[0],
                        kind: 'init',
                        method: false,
                        shorthand: false,
                        computed: false
                    });
                }
            } else {
                parameters = children;
            }
            if (fields.length > 0) {
                objects.push({
                    type: 'ObjectExpression',
                    properties: fields
                });
            }
            /** @type {Expression | undefined} */ let props;
            /** @type {MemberExpression | Literal | Identifier} */ let callee;
            if (objects.length > 1) {
                // Don’t mutate the first object, shallow clone instead.
                if (objects[0].type !== 'ObjectExpression') {
                    objects.unshift({
                        type: 'ObjectExpression',
                        properties: []
                    });
                }
                props = {
                    type: 'CallExpression',
                    callee: toMemberExpression('Object.assign'),
                    arguments: objects,
                    optional: false
                };
            } else if (objects.length > 0) {
                props = objects[0];
            }
            if (automatic) {
                parameters.push(props || {
                    type: 'ObjectExpression',
                    properties: []
                });
                if (key) {
                    parameters.push(key);
                } else if (config.development) {
                    parameters.push({
                        type: 'Identifier',
                        name: 'undefined'
                    });
                }
                const isStaticChildren = children.length > 1;
                if (config.development) {
                    imports.jsxDEV = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsxDEV'
                    };
                    parameters.push({
                        type: 'Literal',
                        value: isStaticChildren
                    });
                    /** @type {ObjectExpression} */ const source = {
                        type: 'ObjectExpression',
                        properties: [
                            {
                                type: 'Property',
                                method: false,
                                shorthand: false,
                                computed: false,
                                kind: 'init',
                                key: {
                                    type: 'Identifier',
                                    name: 'fileName'
                                },
                                value: {
                                    type: 'Literal',
                                    value: config.filePath || '<source.js>'
                                }
                            }
                        ]
                    };
                    if (node.loc) {
                        source.properties.push({
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            kind: 'init',
                            key: {
                                type: 'Identifier',
                                name: 'lineNumber'
                            },
                            value: {
                                type: 'Literal',
                                value: node.loc.start.line
                            }
                        }, {
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            kind: 'init',
                            key: {
                                type: 'Identifier',
                                name: 'columnNumber'
                            },
                            value: {
                                type: 'Literal',
                                value: node.loc.start.column + 1
                            }
                        });
                    }
                    parameters.push(source, {
                        type: 'ThisExpression'
                    });
                } else if (isStaticChildren) {
                    imports.jsxs = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsxs'
                    };
                } else {
                    imports.jsx = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsx'
                    };
                }
            } else {
                // There are props or children.
                if (props || parameters.length > 0) {
                    parameters.unshift(props || {
                        type: 'Literal',
                        value: null
                    });
                }
                callee = toMemberExpression(annotations.jsx || config.pragma || 'React.createElement');
            }
            parameters.unshift(name);
            // Types of `estree-walker` are wrong
            this.replace(create(node, {
                type: 'CallExpression',
                callee,
                arguments: parameters,
                optional: false
            }));
        }
    });
    return tree;
}
/**
 * @param {JSXAttribute} node
 * @returns {Property}
 */ function toProperty(node) {
    /** @type {Expression} */ let value;
    if (node.value) {
        if (node.value.type === 'JSXExpressionContainer') {
            // @ts-expect-error `JSXEmptyExpression` is not allowed in props.
            value = node.value.expression;
        } else {
            // @ts-expect-error: JSX{Element,Fragment} are already compiled to
            // `CallExpression`.
            value = node.value;
            // @ts-expect-error Remove `raw` so we don’t get character references in
            // strings.
            delete value.raw;
        }
    } else {
        value = {
            type: 'Literal',
            value: true
        };
    }
    return create(node, {
        type: 'Property',
        key: toIdentifier(node.name),
        value,
        kind: 'init',
        method: false,
        shorthand: false,
        computed: false
    });
}
/**
 * @param {JSXMemberExpression | JSXNamespacedName | JSXIdentifier} node
 * @returns {MemberExpression | Identifier | Literal}
 */ function toIdentifier(node) {
    /** @type {MemberExpression | Identifier | Literal} */ let replace;
    if (node.type === 'JSXMemberExpression') {
        // `property` is always a `JSXIdentifier`, but it could be something that
        // isn’t an ES identifier name.
        const id = toIdentifier(node.property);
        replace = {
            type: 'MemberExpression',
            object: toIdentifier(node.object),
            property: id,
            computed: id.type === 'Literal',
            optional: false
        };
    } else if (node.type === 'JSXNamespacedName') {
        replace = {
            type: 'Literal',
            value: node.namespace.name + ':' + node.name.name
        };
    } else {
        replace = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"](node.name) ? {
            type: 'Identifier',
            name: node.name
        } : {
            type: 'Literal',
            value: node.name
        };
    }
    return create(node, replace);
}
/**
 * @param {string} id
 * @returns {Identifier | Literal | MemberExpression}
 */ function toMemberExpression(id) {
    const identifiers = id.split('.');
    let index = -1;
    /** @type {Identifier | Literal | MemberExpression | undefined} */ let result;
    while(++index < identifiers.length){
        /** @type {Identifier | Literal} */ const prop = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"](identifiers[index]) ? {
            type: 'Identifier',
            name: identifiers[index]
        } : {
            type: 'Literal',
            value: identifiers[index]
        };
        result = result ? {
            type: 'MemberExpression',
            object: result,
            property: prop,
            computed: Boolean(index && prop.type === 'Literal'),
            optional: false
        } : prop;
    }
    // @ts-expect-error: always a result.
    return result;
}
/**
 * @template {Node} T
 * @param {Node} from
 * @param {T} node
 * @returns {T}
 */ function create(from, node) {
    const fields = [
        'start',
        'end',
        'loc',
        'range',
        'comments'
    ];
    let index = -1;
    while(++index < fields.length){
        const field = fields[index];
        if (field in from) {
            // @ts-expect-error: indexable.
            node[field] = from[field];
        }
    }
    return node;
}

})()),
"[project]/node_modules/.pnpm/estree-util-build-jsx@2.2.2/node_modules/estree-util-build-jsx/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Options} Options
 * @typedef {import('./lib/index.js').Runtime} Runtime
 *
 * @typedef {Options} BuildJsxOptions
 *   To do: remove next major (replaced by `Options` ).
 */ __turbopack_esm__({
    "buildJsx": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$build$2d$jsx$40$2$2e$2$2e$2$2f$node_modules$2f$estree$2d$util$2d$build$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["buildJsx"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$build$2d$jsx$40$2$2e$2$2e$2$2f$node_modules$2f$estree$2d$util$2d$build$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-build-jsx@2.2.2/node_modules/estree-util-build-jsx/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/estree-util-build-jsx@3.0.1/node_modules/estree-util-build-jsx/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').Expression} Expression
 * @typedef {import('estree-jsx').Identifier} Identifier
 * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier
 * @typedef {import('estree-jsx').JSXAttribute} JSXAttribute
 * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier
 * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression
 * @typedef {import('estree-jsx').JSXNamespacedName} JSXNamespacedName
 * @typedef {import('estree-jsx').Literal} Literal
 * @typedef {import('estree-jsx').MemberExpression} MemberExpression
 * @typedef {import('estree-jsx').Node} Node
 * @typedef {import('estree-jsx').ObjectExpression} ObjectExpression
 * @typedef {import('estree-jsx').Property} Property
 * @typedef {import('estree-jsx').SpreadElement} SpreadElement
 *
 * @typedef {'automatic' | 'classic'} Runtime
 *   How to transform JSX.
 *
 * @typedef Options
 *   Configuration.
 *
 *   > 👉 **Note**: you can also configure `runtime`, `importSource`, `pragma`,
 *   > and `pragmaFrag` from within files through comments.
 * @property {Runtime | null | undefined} [runtime='classic']
 *   Choose the runtime (default: `'classic'`).
 *
 *   Comment form: `@jsxRuntime theRuntime`.
 * @property {string | null | undefined} [importSource='react']
 *   Place to import `jsx`, `jsxs`, `jsxDEV`, and `Fragment` from, when the
 *   effective runtime is automatic (default: `'react'`).
 *
 *   Comment form: `@jsxImportSource theSource`.
 *
 *   > 👉 **Note**: `/jsx-runtime` or `/jsx-dev-runtime` is appended to this
 *   > provided source.
 *   > In CJS, that can resolve to a file (as in `theSource/jsx-runtime.js`),
 *   > but for ESM an export map needs to be set up to point to files:
 *   >
 *   > ```js
 *   > // …
 *   > "exports": {
 *   >   // …
 *   >   "./jsx-runtime": "./path/to/jsx-runtime.js",
 *   >   "./jsx-dev-runtime": "./path/to/jsx-runtime.js"
 *   >   // …
 *   > ```
 * @property {string | null | undefined} [pragma='React.createElement']
 *   Identifier or member expression to call when the effective runtime is
 *   classic (default: `'React.createElement'`).
 *
 *   Comment form: `@jsx identifier`.
 * @property {string | null | undefined} [pragmaFrag='React.Fragment']
 *   Identifier or member expression to use as a symbol for fragments when the
 *   effective runtime is classic (default: `'React.Fragment'`).
 *
 *   Comment form: `@jsxFrag identifier`.
 * @property {boolean | null | undefined} [development=false]
 *   When in the automatic runtime, whether to import
 *   `theSource/jsx-dev-runtime.js`, use `jsxDEV`, and pass location info when
 *   available (default: `false`).
 *
 *   This helps debugging but adds a lot of code that you don’t want in
 *   production.
 * @property {string | null | undefined} [filePath]
 *   File path to the original source file (optional).
 *
 *   Passed in location info to `jsxDEV` when using the automatic runtime with
 *   `development: true`.
 *
 * @typedef Annotations
 *   State where info from comments is gathered.
 * @property {string | undefined} [jsx]
 *   JSX identifier (`pragma`).
 * @property {string | undefined} [jsxFrag]
 *   JSX identifier of fragment (`pragmaFrag`).
 * @property {string | undefined} [jsxImportSource]
 *   Where to import an automatic JSX runtime from.
 * @property {Runtime | undefined} [jsxRuntime]
 *   Runtime.
 *
 * @typedef Imports
 *   State of used identifiers from the automatic runtime.
 * @property {boolean | undefined} [fragment]
 *   Symbol of `Fragment`.
 * @property {boolean | undefined} [jsx]
 *   Symbol of `jsx`.
 * @property {boolean | undefined} [jsxs]
 *   Symbol of `jsxs`.
 * @property {boolean | undefined} [jsxDEV]
 *   Symbol of `jsxDEV`.
 */ __turbopack_esm__({
    "buildJsx": ()=>buildJsx
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
const regex = /@(jsx|jsxFrag|jsxImportSource|jsxRuntime)\s+(\S+)/g;
function buildJsx(tree, options) {
    const config = options || {};
    let automatic = config.runtime === 'automatic';
    /** @type {Annotations} */ const annotations = {};
    /** @type {Imports} */ const imports = {};
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$walker$40$3$2e$0$2e$3$2f$node_modules$2f$estree$2d$walker$2f$src$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["walk"](tree, {
        enter (node) {
            if (node.type === 'Program') {
                const comments = node.comments || [];
                let index = -1;
                while(++index < comments.length){
                    regex.lastIndex = 0;
                    let match = regex.exec(comments[index].value);
                    while(match){
                        // @ts-expect-error: `match[1]` is always a key, `match[2]` when
                        // runtime is checked later.
                        annotations[match[1]] = match[2];
                        match = regex.exec(comments[index].value);
                    }
                }
                if (annotations.jsxRuntime) {
                    if (annotations.jsxRuntime === 'automatic') {
                        automatic = true;
                        if (annotations.jsx) {
                            throw new Error('Unexpected `@jsx` pragma w/ automatic runtime');
                        }
                        if (annotations.jsxFrag) {
                            throw new Error('Unexpected `@jsxFrag` pragma w/ automatic runtime');
                        }
                    } else if (annotations.jsxRuntime === 'classic') {
                        automatic = false;
                        if (annotations.jsxImportSource) {
                            throw new Error('Unexpected `@jsxImportSource` w/ classic runtime');
                        }
                    } else {
                        throw new Error('Unexpected `jsxRuntime` `' + annotations.jsxRuntime + '`, expected `automatic` or `classic`');
                    }
                }
            }
        },
        // eslint-disable-next-line complexity
        leave (node) {
            if (node.type === 'Program') {
                /** @type {Array<ImportSpecifier>} */ const specifiers = [];
                if (imports.fragment) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'Fragment'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_Fragment'
                        }
                    });
                }
                if (imports.jsx) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsx'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsx'
                        }
                    });
                }
                if (imports.jsxs) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsxs'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsxs'
                        }
                    });
                }
                if (imports.jsxDEV) {
                    specifiers.push({
                        type: 'ImportSpecifier',
                        imported: {
                            type: 'Identifier',
                            name: 'jsxDEV'
                        },
                        local: {
                            type: 'Identifier',
                            name: '_jsxDEV'
                        }
                    });
                }
                if (specifiers.length > 0) {
                    let injectIndex = 0;
                    while(injectIndex < node.body.length){
                        const child = node.body[injectIndex];
                        if ('directive' in child && child.directive) {
                            injectIndex++;
                        } else {
                            break;
                        }
                    }
                    node.body.splice(injectIndex, 0, {
                        type: 'ImportDeclaration',
                        specifiers,
                        source: {
                            type: 'Literal',
                            value: (annotations.jsxImportSource || config.importSource || 'react') + (config.development ? '/jsx-dev-runtime' : '/jsx-runtime')
                        }
                    });
                }
            }
            if (node.type !== 'JSXElement' && node.type !== 'JSXFragment') {
                return;
            }
            /** @type {Array<Expression>} */ const children = [];
            let index = -1;
            // Figure out `children`.
            while(++index < node.children.length){
                const child = node.children[index];
                if (child.type === 'JSXExpressionContainer') {
                    // Ignore empty expressions.
                    if (child.expression.type !== 'JSXEmptyExpression') {
                        children.push(child.expression);
                    }
                } else if (child.type === 'JSXText') {
                    const value = child.value// Replace tabs w/ spaces.
                    .replace(/\t/g, ' ')// Use line feeds, drop spaces around them.
                    .replace(/ *(\r?\n|\r) */g, '\n')// Collapse multiple line feeds.
                    .replace(/\n+/g, '\n')// Drop final line feeds.
                    .replace(/\n+$/, '')// Drop first line feeds.
                    .replace(/^\n+/, '')// Replace line feeds with spaces.
                    .replace(/\n/g, ' ');
                    // Ignore collapsible text.
                    if (value) {
                        /** @type {Node} */ const text = {
                            type: 'Literal',
                            value
                        };
                        create(child, text);
                        children.push(text);
                    }
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](child.type !== 'JSXElement' && child.type !== 'JSXFragment' && child.type !== 'JSXSpreadChild');
                    children.push(child);
                }
            }
            /** @type {Identifier | Literal | MemberExpression} */ let name;
            /** @type {Array<Property | SpreadElement>} */ const fields = [];
            /** @type {Array<Expression>} */ let parameters = [];
            /** @type {Expression | undefined} */ let key;
            // Do the stuff needed for elements.
            if (node.type === 'JSXElement') {
                name = toIdentifier(node.openingElement.name);
                // If the name could be an identifier, but start with a lowercase letter,
                // it’s not a component.
                if (name.type === 'Identifier' && /^[a-z]/.test(name.name)) {
                    /** @type {Node} */ const next = {
                        type: 'Literal',
                        value: name.name
                    };
                    create(name, next);
                    name = next;
                }
                /** @type {boolean | undefined} */ let spread;
                const attributes = node.openingElement.attributes;
                let index = -1;
                // Place props in the right order, because we might have duplicates
                // in them and what’s spread in.
                while(++index < attributes.length){
                    const attribute = attributes[index];
                    if (attribute.type === 'JSXSpreadAttribute') {
                        if (attribute.argument.type === 'ObjectExpression') {
                            fields.push(...attribute.argument.properties);
                        } else {
                            fields.push({
                                type: 'SpreadElement',
                                argument: attribute.argument
                            });
                        }
                        spread = true;
                    } else {
                        const prop = toProperty(attribute);
                        if (automatic && prop.key.type === 'Identifier' && prop.key.name === 'key') {
                            if (spread) {
                                throw new Error('Expected `key` to come before any spread expressions');
                            }
                            const value = prop.value;
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](value.type !== 'AssignmentPattern' && value.type !== 'ArrayPattern' && value.type !== 'ObjectPattern' && value.type !== 'RestElement');
                            key = value;
                        } else {
                            fields.push(prop);
                        }
                    }
                }
            } else if (automatic) {
                imports.fragment = true;
                name = {
                    type: 'Identifier',
                    name: '_Fragment'
                };
            } else {
                name = toMemberExpression(annotations.jsxFrag || config.pragmaFrag || 'React.Fragment');
            }
            if (automatic) {
                if (children.length > 0) {
                    fields.push({
                        type: 'Property',
                        key: {
                            type: 'Identifier',
                            name: 'children'
                        },
                        value: children.length > 1 ? {
                            type: 'ArrayExpression',
                            elements: children
                        } : children[0],
                        kind: 'init',
                        method: false,
                        shorthand: false,
                        computed: false
                    });
                }
            } else {
                parameters = children;
            }
            /** @type {Identifier | Literal | MemberExpression} */ let callee;
            if (automatic) {
                parameters.push({
                    type: 'ObjectExpression',
                    properties: fields
                });
                if (key) {
                    parameters.push(key);
                } else if (config.development) {
                    parameters.push({
                        type: 'Identifier',
                        name: 'undefined'
                    });
                }
                const isStaticChildren = children.length > 1;
                if (config.development) {
                    imports.jsxDEV = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsxDEV'
                    };
                    parameters.push({
                        type: 'Literal',
                        value: isStaticChildren
                    });
                    /** @type {ObjectExpression} */ const source = {
                        type: 'ObjectExpression',
                        properties: [
                            {
                                type: 'Property',
                                method: false,
                                shorthand: false,
                                computed: false,
                                kind: 'init',
                                key: {
                                    type: 'Identifier',
                                    name: 'fileName'
                                },
                                value: {
                                    type: 'Literal',
                                    value: config.filePath || '<source.js>'
                                }
                            }
                        ]
                    };
                    if (node.loc) {
                        source.properties.push({
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            kind: 'init',
                            key: {
                                type: 'Identifier',
                                name: 'lineNumber'
                            },
                            value: {
                                type: 'Literal',
                                value: node.loc.start.line
                            }
                        }, {
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            kind: 'init',
                            key: {
                                type: 'Identifier',
                                name: 'columnNumber'
                            },
                            value: {
                                type: 'Literal',
                                value: node.loc.start.column + 1
                            }
                        });
                    }
                    parameters.push(source, {
                        type: 'ThisExpression'
                    });
                } else if (isStaticChildren) {
                    imports.jsxs = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsxs'
                    };
                } else {
                    imports.jsx = true;
                    callee = {
                        type: 'Identifier',
                        name: '_jsx'
                    };
                }
            } else {
                if (fields.length > 0) {
                    parameters.unshift({
                        type: 'ObjectExpression',
                        properties: fields
                    });
                } else if (parameters.length > 0) {
                    parameters.unshift({
                        type: 'Literal',
                        value: null
                    });
                }
                callee = toMemberExpression(annotations.jsx || config.pragma || 'React.createElement');
            }
            parameters.unshift(name);
            /** @type {Node} */ const call = {
                type: 'CallExpression',
                callee,
                arguments: parameters,
                optional: false
            };
            create(node, call);
            this.replace(call);
        }
    });
}
/**
 * Turn a JSX attribute into a JavaScript property.
 *
 * @param {JSXAttribute} node
 *   JSX attribute.
 * @returns {Property}
 *   JS property.
 */ function toProperty(node) {
    /** @type {Expression} */ let value;
    if (node.value) {
        if (node.value.type === 'JSXExpressionContainer') {
            const valueExpression = node.value.expression;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](valueExpression.type !== 'JSXEmptyExpression', '`JSXEmptyExpression` is not allowed in props.');
            value = valueExpression;
        } else {
            const nodeValue = node.value;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](nodeValue.type !== 'JSXElement' && nodeValue.type !== 'JSXFragment', 'JSX{Element,Fragment} are already compiled to `CallExpression`');
            value = nodeValue;
            delete value.raw;
        }
    } else {
        value = {
            type: 'Literal',
            value: true
        };
    }
    /** @type {Property} */ const replacement = {
        type: 'Property',
        key: toIdentifier(node.name),
        value,
        kind: 'init',
        method: false,
        shorthand: false,
        computed: false
    };
    create(node, replacement);
    return replacement;
}
/**
 * Turn a JSX identifier into a normal JS identifier.
 *
 * @param {JSXIdentifier | JSXMemberExpression | JSXNamespacedName} node
 *   JSX identifier.
 * @returns {Identifier | Literal | MemberExpression}
 *   JS identifier.
 */ function toIdentifier(node) {
    /** @type {Identifier | Literal | MemberExpression} */ let replace;
    if (node.type === 'JSXMemberExpression') {
        // `property` is always a `JSXIdentifier`, but it could be something that
        // isn’t an ES identifier name.
        const id = toIdentifier(node.property);
        replace = {
            type: 'MemberExpression',
            object: toIdentifier(node.object),
            property: id,
            computed: id.type === 'Literal',
            optional: false
        };
    } else if (node.type === 'JSXNamespacedName') {
        replace = {
            type: 'Literal',
            value: node.namespace.name + ':' + node.name.name
        };
    } else {
        replace = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"](node.name) ? {
            type: 'Identifier',
            name: node.name
        } : {
            type: 'Literal',
            value: node.name
        };
    }
    create(node, replace);
    return replace;
}
/**
 * Turn a dotted string into a member expression.
 *
 * @param {string} id
 *   Identifiers.
 * @returns {Identifier | Literal | MemberExpression}
 *   Expression.
 */ function toMemberExpression(id) {
    const identifiers = id.split('.');
    let index = -1;
    /** @type {Identifier | Literal | MemberExpression | undefined} */ let result;
    while(++index < identifiers.length){
        /** @type {Identifier | Literal} */ const prop = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"](identifiers[index]) ? {
            type: 'Identifier',
            name: identifiers[index]
        } : {
            type: 'Literal',
            value: identifiers[index]
        };
        result = result ? {
            type: 'MemberExpression',
            object: result,
            property: prop,
            computed: Boolean(index && prop.type === 'Literal'),
            optional: false
        } : prop;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](result, 'always a result');
    return result;
}
/**
 * Inherit some fields from `from` into `to`.
 *
 * @param {Node} from
 *   Node to inherit from.
 * @param {Node} to
 *   Node to add to.
 * @returns {undefined}
 *   Nothing.
 */ function create(from, to) {
    const fields = [
        'start',
        'end',
        'loc',
        'range',
        'comments'
    ];
    let index = -1;
    while(++index < fields.length){
        const field = fields[index];
        if (field in from) {
            // @ts-expect-error: indexable.
            to[field] = from[field];
        }
    }
}

})()),
"[project]/node_modules/.pnpm/estree-util-build-jsx@3.0.1/node_modules/estree-util-build-jsx/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Options} Options
 * @typedef {import('./lib/index.js').Runtime} Runtime
 */ __turbopack_esm__({
    "buildJsx": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$build$2d$jsx$40$3$2e$0$2e$1$2f$node_modules$2f$estree$2d$util$2d$build$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["buildJsx"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$build$2d$jsx$40$3$2e$0$2e$1$2f$node_modules$2f$estree$2d$util$2d$build$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-build-jsx@3.0.1/node_modules/estree-util-build-jsx/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/trough@2.1.0/node_modules/trough/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
 * @typedef {(...input: Array<any>) => any} Middleware
 *
 * @typedef {(...input: Array<any>) => void} Run
 *   Call all middleware.
 * @typedef {(fn: Middleware) => Pipeline} Use
 *   Add `fn` (middleware) to the list.
 * @typedef {{run: Run, use: Use}} Pipeline
 *   Middleware.
 */ /**
 * Create new middleware.
 *
 * @returns {Pipeline}
 */ __turbopack_esm__({
    "trough": ()=>trough,
    "wrap": ()=>wrap
});
function trough() {
    /** @type {Array<Middleware>} */ const fns = [];
    /** @type {Pipeline} */ const pipeline = {
        run,
        use
    };
    return pipeline;
    /** @type {Run} */ function run(...values) {
        let middlewareIndex = -1;
        /** @type {Callback} */ const callback = values.pop();
        if (typeof callback !== 'function') {
            throw new TypeError('Expected function as last argument, not ' + callback);
        }
        next(null, ...values);
        /**
     * Run the next `fn`, or we’re done.
     *
     * @param {Error|null|undefined} error
     * @param {Array<any>} output
     */ function next(error, ...output) {
            const fn = fns[++middlewareIndex];
            let index = -1;
            if (error) {
                callback(error);
                return;
            }
            // Copy non-nullish input into values.
            while(++index < values.length){
                if (output[index] === null || output[index] === undefined) {
                    output[index] = values[index];
                }
            }
            // Save the newly created `output` for the next call.
            values = output;
            // Next or done.
            if (fn) {
                wrap(fn, next)(...output);
            } else {
                callback(null, ...output);
            }
        }
    }
    /** @type {Use} */ function use(middelware) {
        if (typeof middelware !== 'function') {
            throw new TypeError('Expected `middelware` to be a function, not ' + middelware);
        }
        fns.push(middelware);
        return pipeline;
    }
}
function wrap(middleware, callback) {
    /** @type {boolean} */ let called;
    return wrapped;
    /**
   * Call `middleware`.
   * @this {any}
   * @param {Array<any>} parameters
   * @returns {void}
   */ function wrapped(...parameters) {
        const fnExpectsCallback = middleware.length > parameters.length;
        /** @type {any} */ let result;
        if (fnExpectsCallback) {
            parameters.push(done);
        }
        try {
            result = middleware.apply(this, parameters);
        } catch (error) {
            const exception = error;
            // Well, this is quite the pickle.
            // `middleware` received a callback and called it synchronously, but that
            // threw an error.
            // The only thing left to do is to throw the thing instead.
            if (fnExpectsCallback && called) {
                throw exception;
            }
            return done(exception);
        }
        if (!fnExpectsCallback) {
            if (result instanceof Promise) {
                result.then(then, done);
            } else if (result instanceof Error) {
                done(result);
            } else {
                then(result);
            }
        }
    }
    /**
   * Call `callback`, only once.
   * @type {Callback}
   */ function done(error, ...output) {
        if (!called) {
            called = true;
            callback(error, ...output);
        }
    }
    /**
   * Call `done` with one value.
   *
   * @param {any} [value]
   */ function then(value) {
        done(null, value);
    }
}

})()),
"[project]/node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "default": ()=>isPlainObject
});
function isPlainObject(value) {
    if (typeof value !== 'object' || value === null) {
        return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

})()),
"[project]/node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;
var isArray = function isArray(arr) {
    if (typeof Array.isArray === 'function') {
        return Array.isArray(arr);
    }
    return toStr.call(arr) === '[object Array]';
};
var isPlainObject = function isPlainObject(obj) {
    if (!obj || toStr.call(obj) !== '[object Object]') {
        return false;
    }
    var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    // Not own constructor property must be Object
    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
    }
    // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.
    var key;
    for(key in obj){}
    return typeof key === 'undefined' || hasOwn.call(obj, key);
};
// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
    if (defineProperty && options.name === '__proto__') {
        defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
        });
    } else {
        target[options.name] = options.newValue;
    }
};
// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
    if (name === '__proto__') {
        if (!hasOwn.call(obj, name)) {
            return void 0;
        } else if (gOPD) {
            // In early versions of node, obj['__proto__'] is buggy when obj has
            // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
            return gOPD(obj, name).value;
        }
    }
    return obj[name];
};
module.exports = function extend() {
    var options, name, src, copy, copyIsArray, clone;
    var target = arguments[0];
    var i = 1;
    var length = arguments.length;
    var deep = false;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2;
    }
    if (target == null || typeof target !== 'object' && typeof target !== 'function') {
        target = {};
    }
    for(; i < length; ++i){
        options = arguments[i];
        // Only deal with non-null/undefined values
        if (options != null) {
            // Extend the base object
            for(name in options){
                src = getProperty(target, name);
                copy = getProperty(options, name);
                // Prevent never-ending loop
                if (target !== copy) {
                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && isArray(src) ? src : [];
                        } else {
                            clone = src && isPlainObject(src) ? src : {};
                        }
                        // Never move original objects, clone them
                        setProperty(target, {
                            name: name,
                            newValue: extend(deep, clone, copy)
                        });
                    // Don't bring in undefined values
                    } else if (typeof copy !== 'undefined') {
                        setProperty(target, {
                            name: name,
                            newValue: copy
                        });
                    }
                }
            }
        }
    }
    // Return the modified object
    return target;
};

}.call(this) }),
"[project]/node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */ __turbopack_esm__({
    "bail": ()=>bail
});
function bail(error) {
    if (error) {
        throw error;
    }
}

})()),
"[project]/node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('vfile').VFileCompatible} VFileCompatible
 * @typedef {import('vfile').VFileValue} VFileValue
 * @typedef {import('..').Processor} Processor
 * @typedef {import('..').Plugin} Plugin
 * @typedef {import('..').Preset} Preset
 * @typedef {import('..').Pluggable} Pluggable
 * @typedef {import('..').PluggableList} PluggableList
 * @typedef {import('..').Transformer} Transformer
 * @typedef {import('..').Parser} Parser
 * @typedef {import('..').Compiler} Compiler
 * @typedef {import('..').RunCallback} RunCallback
 * @typedef {import('..').ProcessCallback} ProcessCallback
 *
 * @typedef Context
 * @property {Node} tree
 * @property {VFile} file
 */ __turbopack_esm__({
    "unified": ()=>unified
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$bail$40$2$2e$0$2e$2$2f$node_modules$2f$bail$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$buffer$40$2$2e$0$2e$5$2f$node_modules$2f$is$2d$buffer$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$extend$40$3$2e$0$2e$2$2f$node_modules$2f$extend$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$plain$2d$obj$40$4$2e$1$2e$0$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$trough$40$2$2e$1$2e$0$2f$node_modules$2f$trough$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/trough@2.1.0/node_modules/trough/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
const unified = base().freeze();
const own = {}.hasOwnProperty;
// Function to create the first processor.
/**
 * @returns {Processor}
 */ function base() {
    const transformers = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$trough$40$2$2e$1$2e$0$2f$node_modules$2f$trough$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["trough"]();
    /** @type {Processor['attachers']} */ const attachers = [];
    /** @type {Record<string, unknown>} */ let namespace = {};
    /** @type {boolean|undefined} */ let frozen;
    let freezeIndex = -1;
    // Data management.
    // @ts-expect-error: overloads are handled.
    processor.data = data;
    processor.Parser = undefined;
    processor.Compiler = undefined;
    // Lock.
    processor.freeze = freeze;
    // Plugins.
    processor.attachers = attachers;
    // @ts-expect-error: overloads are handled.
    processor.use = use;
    // API.
    processor.parse = parse;
    processor.stringify = stringify;
    // @ts-expect-error: overloads are handled.
    processor.run = run;
    processor.runSync = runSync;
    // @ts-expect-error: overloads are handled.
    processor.process = process;
    processor.processSync = processSync;
    // Expose.
    return processor;
    // Create a new processor based on the processor in the current scope.
    /** @type {Processor} */ function processor() {
        const destination = base();
        let index = -1;
        while(++index < attachers.length){
            destination.use(...attachers[index]);
        }
        destination.data(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$extend$40$3$2e$0$2e$2$2f$node_modules$2f$extend$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](true, {}, namespace));
        return destination;
    }
    /**
   * @param {string|Record<string, unknown>} [key]
   * @param {unknown} [value]
   * @returns {unknown}
   */ function data(key, value) {
        if (typeof key === 'string') {
            // Set `key`.
            if (arguments.length === 2) {
                assertUnfrozen('data', frozen);
                namespace[key] = value;
                return processor;
            }
            // Get `key`.
            return own.call(namespace, key) && namespace[key] || null;
        }
        // Set space.
        if (key) {
            assertUnfrozen('data', frozen);
            namespace = key;
            return processor;
        }
        // Get space.
        return namespace;
    }
    /** @type {Processor['freeze']} */ function freeze() {
        if (frozen) {
            return processor;
        }
        while(++freezeIndex < attachers.length){
            const [attacher, ...options] = attachers[freezeIndex];
            if (options[0] === false) {
                continue;
            }
            if (options[0] === true) {
                options[0] = undefined;
            }
            /** @type {Transformer|void} */ const transformer = attacher.call(processor, ...options);
            if (typeof transformer === 'function') {
                transformers.use(transformer);
            }
        }
        frozen = true;
        freezeIndex = Number.POSITIVE_INFINITY;
        return processor;
    }
    /**
   * @param {Pluggable|null|undefined} [value]
   * @param {...unknown} options
   * @returns {Processor}
   */ function use(value, ...options) {
        /** @type {Record<string, unknown>|undefined} */ let settings;
        assertUnfrozen('use', frozen);
        if (value === null || value === undefined) {
        // Empty.
        } else if (typeof value === 'function') {
            addPlugin(value, ...options);
        } else if (typeof value === 'object') {
            if (Array.isArray(value)) {
                addList(value);
            } else {
                addPreset(value);
            }
        } else {
            throw new TypeError('Expected usable value, not `' + value + '`');
        }
        if (settings) {
            namespace.settings = Object.assign(namespace.settings || {}, settings);
        }
        return processor;
        /**
     * @param {import('..').Pluggable<unknown[]>} value
     * @returns {void}
     */ function add(value) {
            if (typeof value === 'function') {
                addPlugin(value);
            } else if (typeof value === 'object') {
                if (Array.isArray(value)) {
                    const [plugin, ...options] = value;
                    addPlugin(plugin, ...options);
                } else {
                    addPreset(value);
                }
            } else {
                throw new TypeError('Expected usable value, not `' + value + '`');
            }
        }
        /**
     * @param {Preset} result
     * @returns {void}
     */ function addPreset(result) {
            addList(result.plugins);
            if (result.settings) {
                settings = Object.assign(settings || {}, result.settings);
            }
        }
        /**
     * @param {PluggableList|null|undefined} [plugins]
     * @returns {void}
     */ function addList(plugins) {
            let index = -1;
            if (plugins === null || plugins === undefined) {
            // Empty.
            } else if (Array.isArray(plugins)) {
                while(++index < plugins.length){
                    const thing = plugins[index];
                    add(thing);
                }
            } else {
                throw new TypeError('Expected a list of plugins, not `' + plugins + '`');
            }
        }
        /**
     * @param {Plugin} plugin
     * @param {...unknown} [value]
     * @returns {void}
     */ function addPlugin(plugin, value) {
            let index = -1;
            /** @type {Processor['attachers'][number]|undefined} */ let entry;
            while(++index < attachers.length){
                if (attachers[index][0] === plugin) {
                    entry = attachers[index];
                    break;
                }
            }
            if (entry) {
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$plain$2d$obj$40$4$2e$1$2e$0$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](entry[1]) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$plain$2d$obj$40$4$2e$1$2e$0$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](value)) {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$extend$40$3$2e$0$2e$2$2f$node_modules$2f$extend$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](true, entry[1], value);
                }
                entry[1] = value;
            } else {
                // @ts-expect-error: fine.
                attachers.push([
                    ...arguments
                ]);
            }
        }
    }
    /** @type {Processor['parse']} */ function parse(doc) {
        processor.freeze();
        const file = vfile(doc);
        const Parser = processor.Parser;
        assertParser('parse', Parser);
        if (newable(Parser, 'parse')) {
            // @ts-expect-error: `newable` checks this.
            return new Parser(String(file), file).parse();
        }
        // @ts-expect-error: `newable` checks this.
        return Parser(String(file), file) // eslint-disable-line new-cap
        ;
    }
    /** @type {Processor['stringify']} */ function stringify(node, doc) {
        processor.freeze();
        const file = vfile(doc);
        const Compiler = processor.Compiler;
        assertCompiler('stringify', Compiler);
        assertNode(node);
        if (newable(Compiler, 'compile')) {
            // @ts-expect-error: `newable` checks this.
            return new Compiler(node, file).compile();
        }
        // @ts-expect-error: `newable` checks this.
        return Compiler(node, file) // eslint-disable-line new-cap
        ;
    }
    /**
   * @param {Node} node
   * @param {VFileCompatible|RunCallback} [doc]
   * @param {RunCallback} [callback]
   * @returns {Promise<Node>|void}
   */ function run(node, doc, callback) {
        assertNode(node);
        processor.freeze();
        if (!callback && typeof doc === 'function') {
            callback = doc;
            doc = undefined;
        }
        if (!callback) {
            return new Promise(executor);
        }
        executor(null, callback);
        /**
     * @param {null|((node: Node) => void)} resolve
     * @param {(error: Error) => void} reject
     * @returns {void}
     */ function executor(resolve, reject) {
            // @ts-expect-error: `doc` can’t be a callback anymore, we checked.
            transformers.run(node, vfile(doc), done);
            /**
       * @param {Error|null} error
       * @param {Node} tree
       * @param {VFile} file
       * @returns {void}
       */ function done(error, tree, file) {
                tree = tree || node;
                if (error) {
                    reject(error);
                } else if (resolve) {
                    resolve(tree);
                } else {
                    // @ts-expect-error: `callback` is defined if `resolve` is not.
                    callback(null, tree, file);
                }
            }
        }
    }
    /** @type {Processor['runSync']} */ function runSync(node, file) {
        /** @type {Node|undefined} */ let result;
        /** @type {boolean|undefined} */ let complete;
        processor.run(node, file, done);
        assertDone('runSync', 'run', complete);
        // @ts-expect-error: we either bailed on an error or have a tree.
        return result;
        /**
     * @param {Error|null} [error]
     * @param {Node} [tree]
     * @returns {void}
     */ function done(error, tree) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$bail$40$2$2e$0$2e$2$2f$node_modules$2f$bail$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["bail"](error);
            result = tree;
            complete = true;
        }
    }
    /**
   * @param {VFileCompatible} doc
   * @param {ProcessCallback} [callback]
   * @returns {Promise<VFile>|undefined}
   */ function process(doc, callback) {
        processor.freeze();
        assertParser('process', processor.Parser);
        assertCompiler('process', processor.Compiler);
        if (!callback) {
            return new Promise(executor);
        }
        executor(null, callback);
        /**
     * @param {null|((file: VFile) => void)} resolve
     * @param {(error?: Error|null|undefined) => void} reject
     * @returns {void}
     */ function executor(resolve, reject) {
            const file = vfile(doc);
            processor.run(processor.parse(file), file, (error, tree, file)=>{
                if (error || !tree || !file) {
                    done(error);
                } else {
                    /** @type {unknown} */ const result = processor.stringify(tree, file);
                    if (result === undefined || result === null) {
                    // Empty.
                    } else if (looksLikeAVFileValue(result)) {
                        file.value = result;
                    } else {
                        file.result = result;
                    }
                    done(error, file);
                }
            });
            /**
       * @param {Error|null|undefined} [error]
       * @param {VFile|undefined} [file]
       * @returns {void}
       */ function done(error, file) {
                if (error || !file) {
                    reject(error);
                } else if (resolve) {
                    resolve(file);
                } else {
                    // @ts-expect-error: `callback` is defined if `resolve` is not.
                    callback(null, file);
                }
            }
        }
    }
    /** @type {Processor['processSync']} */ function processSync(doc) {
        /** @type {boolean|undefined} */ let complete;
        processor.freeze();
        assertParser('processSync', processor.Parser);
        assertCompiler('processSync', processor.Compiler);
        const file = vfile(doc);
        processor.process(file, done);
        assertDone('processSync', 'process', complete);
        return file;
        /**
     * @param {Error|null|undefined} [error]
     * @returns {void}
     */ function done(error) {
            complete = true;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$bail$40$2$2e$0$2e$2$2f$node_modules$2f$bail$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["bail"](error);
        }
    }
}
/**
 * Check if `value` is a constructor.
 *
 * @param {unknown} value
 * @param {string} name
 * @returns {boolean}
 */ function newable(value, name) {
    return typeof value === 'function' && // Prototypes do exist.
    // type-coverage:ignore-next-line
    value.prototype && // A function with keys in its prototype is probably a constructor.
    // Classes’ prototype methods are not enumerable, so we check if some value
    // exists in the prototype.
    // type-coverage:ignore-next-line
    (keys(value.prototype) || name in value.prototype);
}
/**
 * Check if `value` is an object with keys.
 *
 * @param {Record<string, unknown>} value
 * @returns {boolean}
 */ function keys(value) {
    /** @type {string} */ let key;
    for(key in value){
        if (own.call(value, key)) {
            return true;
        }
    }
    return false;
}
/**
 * Assert a parser is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Parser}
 */ function assertParser(name, value) {
    if (typeof value !== 'function') {
        throw new TypeError('Cannot `' + name + '` without `Parser`');
    }
}
/**
 * Assert a compiler is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Compiler}
 */ function assertCompiler(name, value) {
    if (typeof value !== 'function') {
        throw new TypeError('Cannot `' + name + '` without `Compiler`');
    }
}
/**
 * Assert the processor is not frozen.
 *
 * @param {string} name
 * @param {unknown} frozen
 * @returns {asserts frozen is false}
 */ function assertUnfrozen(name, frozen) {
    if (frozen) {
        throw new Error('Cannot call `' + name + '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');
    }
}
/**
 * Assert `node` is a unist node.
 *
 * @param {unknown} node
 * @returns {asserts node is Node}
 */ function assertNode(node) {
    // `isPlainObj` unfortunately uses `any` instead of `unknown`.
    // type-coverage:ignore-next-line
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$plain$2d$obj$40$4$2e$1$2e$0$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](node) || typeof node.type !== 'string') {
        throw new TypeError('Expected node, got `' + node + '`');
    // Fine.
    }
}
/**
 * Assert that `complete` is `true`.
 *
 * @param {string} name
 * @param {string} asyncName
 * @param {unknown} complete
 * @returns {asserts complete is true}
 */ function assertDone(name, asyncName, complete) {
    if (!complete) {
        throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');
    }
}
/**
 * @param {VFileCompatible} [value]
 * @returns {VFile}
 */ function vfile(value) {
    return looksLikeAVFile(value) ? value : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFile"](value);
}
/**
 * @param {VFileCompatible} [value]
 * @returns {value is VFile}
 */ function looksLikeAVFile(value) {
    return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);
}
/**
 * @param {unknown} [value]
 * @returns {value is VFileValue}
 */ function looksLikeAVFileValue(value) {
    return typeof value === 'string' || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$buffer$40$2$2e$0$2e$5$2f$node_modules$2f$is$2d$buffer$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](value);
}

})()),
"[project]/node_modules/.pnpm/unified@10.1.2/node_modules/unified/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "unified": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unified$40$10$2e$1$2e$2$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unified"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unified$40$10$2e$1$2e$2$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unified@11.0.4/node_modules/unified/lib/callable-instance.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "CallableInstance": ()=>CallableInstance
});
const CallableInstance = /**
       * @this {Function}
       * @param {string | symbol} property
       * @returns {(...parameters: Array<unknown>) => unknown}
       */ function(property) {
    const self = this;
    const constr = self.constructor;
    const proto = // Prototypes do exist.
    // type-coverage:ignore-next-line
    constr.prototype;
    const func = proto[property];
    /** @type {(...parameters: Array<unknown>) => unknown} */ const apply = function() {
        return func.apply(apply, arguments);
    };
    Object.setPrototypeOf(apply, proto);
    const names = Object.getOwnPropertyNames(func);
    for (const p of names){
        const descriptor = Object.getOwnPropertyDescriptor(func, p);
        if (descriptor) Object.defineProperty(apply, p, descriptor);
    }
    return apply;
};

})()),
"[project]/node_modules/.pnpm/unified@11.0.4/node_modules/unified/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('trough').Pipeline} Pipeline
 *
 * @typedef {import('unist').Node} Node
 *
 * @typedef {import('vfile').Compatible} Compatible
 * @typedef {import('vfile').Value} Value
 *
 * @typedef {import('../index.js').CompileResultMap} CompileResultMap
 * @typedef {import('../index.js').Data} Data
 * @typedef {import('../index.js').Settings} Settings
 */ /**
 * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults
 *   Acceptable results from compilers.
 *
 *   To register custom results, add them to
 *   {@link CompileResultMap `CompileResultMap`}.
 */ /**
 * @template {Node} [Tree=Node]
 *   The node that the compiler receives (default: `Node`).
 * @template {CompileResults} [Result=CompileResults]
 *   The thing that the compiler yields (default: `CompileResults`).
 * @callback Compiler
 *   A **compiler** handles the compiling of a syntax tree to something else
 *   (in most cases, text) (TypeScript type).
 *
 *   It is used in the stringify phase and called with a {@link Node `Node`}
 *   and {@link VFile `VFile`} representation of the document to compile.
 *   It should return the textual representation of the given tree (typically
 *   `string`).
 *
 *   > 👉 **Note**: unified typically compiles by serializing: most compilers
 *   > return `string` (or `Uint8Array`).
 *   > Some compilers, such as the one configured with
 *   > [`rehype-react`][rehype-react], return other values (in this case, a
 *   > React tree).
 *   > If you’re using a compiler that doesn’t serialize, expect different
 *   > result values.
 *   >
 *   > To register custom results in TypeScript, add them to
 *   > {@link CompileResultMap `CompileResultMap`}.
 *
 *   [rehype-react]: https://github.com/rehypejs/rehype-react
 * @param {Tree} tree
 *   Tree to compile.
 * @param {VFile} file
 *   File associated with `tree`.
 * @returns {Result}
 *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or
 *   something else (for `file.result`).
 */ /**
 * @template {Node} [Tree=Node]
 *   The node that the parser yields (default: `Node`)
 * @callback Parser
 *   A **parser** handles the parsing of text to a syntax tree.
 *
 *   It is used in the parse phase and is called with a `string` and
 *   {@link VFile `VFile`} of the document to parse.
 *   It must return the syntax tree representation of the given file
 *   ({@link Node `Node`}).
 * @param {string} document
 *   Document to parse.
 * @param {VFile} file
 *   File associated with `document`.
 * @returns {Tree}
 *   Node representing the given file.
 */ /**
 * @typedef {(
 *   Plugin<Array<any>, any, any> |
 *   PluginTuple<Array<any>, any, any> |
 *   Preset
 * )} Pluggable
 *   Union of the different ways to add plugins and settings.
 */ /**
 * @typedef {Array<Pluggable>} PluggableList
 *   List of plugins and presets.
 */ // Note: we can’t use `callback` yet as it messes up `this`:
//  <https://github.com/microsoft/TypeScript/issues/55197>.
/**
 * @template {Array<unknown>} [PluginParameters=[]]
 *   Arguments passed to the plugin (default: `[]`, the empty tuple).
 * @template {Node | string | undefined} [Input=Node]
 *   Value that is expected as input (default: `Node`).
 *
 *   *   If the plugin returns a {@link Transformer `Transformer`}, this
 *       should be the node it expects.
 *   *   If the plugin sets a {@link Parser `Parser`}, this should be
 *       `string`.
 *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the
 *       node it expects.
 * @template [Output=Input]
 *   Value that is yielded as output (default: `Input`).
 *
 *   *   If the plugin returns a {@link Transformer `Transformer`}, this
 *       should be the node that that yields.
 *   *   If the plugin sets a {@link Parser `Parser`}, this should be the
 *       node that it yields.
 *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be
 *       result it yields.
 * @typedef {(
 *   (this: Processor, ...parameters: PluginParameters) =>
 *     Input extends string ? // Parser.
 *        Output extends Node | undefined ? undefined | void : never :
 *     Output extends CompileResults ? // Compiler.
 *        Input extends Node | undefined ? undefined | void : never :
 *     Transformer<
 *       Input extends Node ? Input : Node,
 *       Output extends Node ? Output : Node
 *     > | undefined | void
 * )} Plugin
 *   Single plugin.
 *
 *   Plugins configure the processors they are applied on in the following
 *   ways:
 *
 *   *   they change the processor, such as the parser, the compiler, or by
 *       configuring data
 *   *   they specify how to handle trees and files
 *
 *   In practice, they are functions that can receive options and configure the
 *   processor (`this`).
 *
 *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when
 *   > they are applied.
 */ /**
 * Tuple of a plugin and its configuration.
 *
 * The first item is a plugin, the rest are its parameters.
 *
 * @template {Array<unknown>} [TupleParameters=[]]
 *   Arguments passed to the plugin (default: `[]`, the empty tuple).
 * @template {Node | string | undefined} [Input=undefined]
 *   Value that is expected as input (optional).
 *
 *   *   If the plugin returns a {@link Transformer `Transformer`}, this
 *       should be the node it expects.
 *   *   If the plugin sets a {@link Parser `Parser`}, this should be
 *       `string`.
 *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the
 *       node it expects.
 * @template [Output=undefined] (optional).
 *   Value that is yielded as output.
 *
 *   *   If the plugin returns a {@link Transformer `Transformer`}, this
 *       should be the node that that yields.
 *   *   If the plugin sets a {@link Parser `Parser`}, this should be the
 *       node that it yields.
 *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be
 *       result it yields.
 * @typedef {(
 *   [
 *     plugin: Plugin<TupleParameters, Input, Output>,
 *     ...parameters: TupleParameters
 *   ]
 * )} PluginTuple
 */ /**
 * @typedef Preset
 *   Sharable configuration.
 *
 *   They can contain plugins and settings.
 * @property {PluggableList | undefined} [plugins]
 *   List of plugins and presets (optional).
 * @property {Settings | undefined} [settings]
 *   Shared settings for parsers and compilers (optional).
 */ /**
 * @template {VFile} [File=VFile]
 *   The file that the callback receives (default: `VFile`).
 * @callback ProcessCallback
 *   Callback called when the process is done.
 *
 *   Called with either an error or a result.
 * @param {Error | undefined} [error]
 *   Fatal error (optional).
 * @param {File | undefined} [file]
 *   Processed file (optional).
 * @returns {undefined}
 *   Nothing.
 */ /**
 * @template {Node} [Tree=Node]
 *   The tree that the callback receives (default: `Node`).
 * @callback RunCallback
 *   Callback called when transformers are done.
 *
 *   Called with either an error or results.
 * @param {Error | undefined} [error]
 *   Fatal error (optional).
 * @param {Tree | undefined} [tree]
 *   Transformed tree (optional).
 * @param {VFile | undefined} [file]
 *   File (optional).
 * @returns {undefined}
 *   Nothing.
 */ /**
 * @template {Node} [Output=Node]
 *   Node type that the transformer yields (default: `Node`).
 * @callback TransformCallback
 *   Callback passed to transforms.
 *
 *   If the signature of a `transformer` accepts a third argument, the
 *   transformer may perform asynchronous operations, and must call it.
 * @param {Error | undefined} [error]
 *   Fatal error to stop the process (optional).
 * @param {Output | undefined} [tree]
 *   New, changed, tree (optional).
 * @param {VFile | undefined} [file]
 *   New, changed, file (optional).
 * @returns {undefined}
 *   Nothing.
 */ /**
 * @template {Node} [Input=Node]
 *   Node type that the transformer expects (default: `Node`).
 * @template {Node} [Output=Input]
 *   Node type that the transformer yields (default: `Input`).
 * @callback Transformer
 *   Transformers handle syntax trees and files.
 *
 *   They are functions that are called each time a syntax tree and file are
 *   passed through the run phase.
 *   When an error occurs in them (either because it’s thrown, returned,
 *   rejected, or passed to `next`), the process stops.
 *
 *   The run phase is handled by [`trough`][trough], see its documentation for
 *   the exact semantics of these functions.
 *
 *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.
 *   > it supports callback-style async work.
 *   > But promises are likely easier to reason about.
 *
 *   [trough]: https://github.com/wooorm/trough#function-fninput-next
 * @param {Input} tree
 *   Tree to handle.
 * @param {VFile} file
 *   File to handle.
 * @param {TransformCallback<Output>} next
 *   Callback.
 * @returns {(
 *   Promise<Output | undefined | void> |
 *   Promise<never> | // For some reason this is needed separately.
 *   Output |
 *   Error |
 *   undefined |
 *   void
 * )}
 *   If you accept `next`, nothing.
 *   Otherwise:
 *
 *   *   `Error` — fatal error to stop the process
 *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using
 *       same tree
 *   *   `Promise<Node>` or `Node` — new, changed, tree
 */ /**
 * @template {Node | undefined} ParseTree
 *   Output of `parse`.
 * @template {Node | undefined} HeadTree
 *   Input for `run`.
 * @template {Node | undefined} TailTree
 *   Output for `run`.
 * @template {Node | undefined} CompileTree
 *   Input of `stringify`.
 * @template {CompileResults | undefined} CompileResult
 *   Output of `stringify`.
 * @template {Node | string | undefined} Input
 *   Input of plugin.
 * @template Output
 *   Output of plugin (optional).
 * @typedef {(
 *   Input extends string
 *     ? Output extends Node | undefined
 *       ? // Parser.
 *         Processor<
 *           Output extends undefined ? ParseTree : Output,
 *           HeadTree,
 *           TailTree,
 *           CompileTree,
 *           CompileResult
 *         >
 *       : // Unknown.
 *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>
 *     : Output extends CompileResults
 *     ? Input extends Node | undefined
 *       ? // Compiler.
 *         Processor<
 *           ParseTree,
 *           HeadTree,
 *           TailTree,
 *           Input extends undefined ? CompileTree : Input,
 *           Output extends undefined ? CompileResult : Output
 *         >
 *       : // Unknown.
 *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>
 *     : Input extends Node | undefined
 *     ? Output extends Node | undefined
 *       ? // Transform.
 *         Processor<
 *           ParseTree,
 *           HeadTree extends undefined ? Input : HeadTree,
 *           Output extends undefined ? TailTree : Output,
 *           CompileTree,
 *           CompileResult
 *         >
 *       : // Unknown.
 *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>
 *     : // Unknown.
 *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>
 * )} UsePlugin
 *   Create a processor based on the input/output of a {@link Plugin plugin}.
 */ /**
 * @template {CompileResults | undefined} Result
 *   Node type that the transformer yields.
 * @typedef {(
 *   Result extends Value | undefined ?
 *     VFile :
 *     VFile & {result: Result}
 *   )} VFileWithOutput
 *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.
 *
 *   If a result that is not acceptable on a `VFile` is used, that will
 *   be stored on the `result` field of {@link VFile `VFile`}.
 */ __turbopack_esm__({
    "Processor": ()=>Processor,
    "unified": ()=>unified
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$bail$40$2$2e$0$2e$2$2f$node_modules$2f$bail$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$extend$40$3$2e$0$2e$2$2f$node_modules$2f$extend$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$plain$2d$obj$40$4$2e$1$2e$0$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$trough$40$2$2e$1$2e$0$2f$node_modules$2f$trough$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/trough@2.1.0/node_modules/trough/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@6.0.1/node_modules/vfile/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unified$40$11$2e$0$2e$4$2f$node_modules$2f$unified$2f$lib$2f$callable$2d$instance$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unified@11.0.4/node_modules/unified/lib/callable-instance.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.
// To do: we could start yielding `never` in TS when a parser is missing and
// `parse` is called.
// Currently, we allow directly setting `processor.parser`, which is untyped.
const own = {}.hasOwnProperty;
class Processor extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unified$40$11$2e$0$2e$4$2f$node_modules$2f$unified$2f$lib$2f$callable$2d$instance$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CallableInstance"] {
    /**
   * Create a processor.
   */ constructor(){
        // If `Processor()` is called (w/o new), `copy` is called instead.
        super('copy');
        /**
     * Compiler to use (deprecated).
     *
     * @deprecated
     *   Use `compiler` instead.
     * @type {(
     *   Compiler<
     *     CompileTree extends undefined ? Node : CompileTree,
     *     CompileResult extends undefined ? CompileResults : CompileResult
     *   > |
     *   undefined
     * )}
     */ this.Compiler = undefined;
        /**
     * Parser to use (deprecated).
     *
     * @deprecated
     *   Use `parser` instead.
     * @type {(
     *   Parser<ParseTree extends undefined ? Node : ParseTree> |
     *   undefined
     * )}
     */ this.Parser = undefined;
        // Note: the following fields are considered private.
        // However, they are needed for tests, and TSC generates an untyped
        // `private freezeIndex` field for, which trips `type-coverage` up.
        // Instead, we use `@deprecated` to visualize that they shouldn’t be used.
        /**
     * Internal list of configured plugins.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Array<PluginTuple<Array<unknown>>>}
     */ this.attachers = [];
        /**
     * Compiler to use.
     *
     * @type {(
     *   Compiler<
     *     CompileTree extends undefined ? Node : CompileTree,
     *     CompileResult extends undefined ? CompileResults : CompileResult
     *   > |
     *   undefined
     * )}
     */ this.compiler = undefined;
        /**
     * Internal state to track where we are while freezing.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {number}
     */ this.freezeIndex = -1;
        /**
     * Internal state to track whether we’re frozen.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {boolean | undefined}
     */ this.frozen = undefined;
        /**
     * Internal state.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Data}
     */ this.namespace = {};
        /**
     * Parser to use.
     *
     * @type {(
     *   Parser<ParseTree extends undefined ? Node : ParseTree> |
     *   undefined
     * )}
     */ this.parser = undefined;
        /**
     * Internal list of configured transformers.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Pipeline}
     */ this.transformers = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$trough$40$2$2e$1$2e$0$2f$node_modules$2f$trough$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["trough"]();
    }
    /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@link Processor `Processor`}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */ copy() {
        // Cast as the type parameters will be the same after attaching.
        const destination = new Processor();
        let index = -1;
        while(++index < this.attachers.length){
            const attacher = this.attachers[index];
            destination.use(...attacher);
        }
        destination.data(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$extend$40$3$2e$0$2e$2$2f$node_modules$2f$extend$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](true, {}, this.namespace));
        return destination;
    }
    /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > 👉 **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > 👉 **Note**: to register custom data in TypeScript, augment the
   * > {@link Data `Data`} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */ data(key, value) {
        if (typeof key === 'string') {
            // Set `key`.
            if (arguments.length === 2) {
                assertUnfrozen('data', this.frozen);
                this.namespace[key] = value;
                return this;
            }
            // Get `key`.
            return own.call(this.namespace, key) && this.namespace[key] || undefined;
        }
        // Set space.
        if (key) {
            assertUnfrozen('data', this.frozen);
            this.namespace = key;
            return this;
        }
        // Get space.
        return this.namespace;
    }
    /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */ freeze() {
        if (this.frozen) {
            return this;
        }
        // Cast so that we can type plugins easier.
        // Plugins are supposed to be usable on different processors, not just on
        // this exact processor.
        const self = this;
        while(++this.freezeIndex < this.attachers.length){
            const [attacher, ...options] = this.attachers[this.freezeIndex];
            if (options[0] === false) {
                continue;
            }
            if (options[0] === true) {
                options[0] = undefined;
            }
            const transformer = attacher.call(self, ...options);
            if (typeof transformer === 'function') {
                this.transformers.use(transformer);
            }
        }
        this.frozen = true;
        this.freezeIndex = Number.POSITIVE_INFINITY;
        return this;
    }
    /**
   * Parse text to a syntax tree.
   *
   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */ parse(file) {
        this.freeze();
        const realFile = vfile(file);
        const parser = this.parser || this.Parser;
        assertParser('parse', parser);
        return parser(String(realFile), realFile);
    }
    /**
   * Process the given file as configured on the processor.
   *
   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > 👉 **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@link CompileResultMap `CompileResultMap`}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */ process(file, done) {
        const self = this;
        this.freeze();
        assertParser('process', this.parser || this.Parser);
        assertCompiler('process', this.compiler || this.Compiler);
        return done ? executor(undefined, done) : new Promise(executor);
        // Note: `void`s needed for TS.
        /**
     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve
     * @param {(error: Error | undefined) => undefined | void} reject
     * @returns {undefined}
     */ function executor(resolve, reject) {
            const realFile = vfile(file);
            // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the
            // input of the first transform).
            const parseTree = self.parse(realFile);
            self.run(parseTree, realFile, function(error, tree, file) {
                if (error || !tree || !file) {
                    return realDone(error);
                }
                // Assume `TailTree` (the output of the last transform) matches
                // `CompileTree` (the input of the compiler).
                const compileTree = tree;
                const compileResult = self.stringify(compileTree, file);
                if (looksLikeAValue(compileResult)) {
                    file.value = compileResult;
                } else {
                    file.result = compileResult;
                }
                realDone(error, file);
            });
            /**
       * @param {Error | undefined} error
       * @param {VFileWithOutput<CompileResult> | undefined} [file]
       * @returns {undefined}
       */ function realDone(error, file) {
                if (error || !file) {
                    reject(error);
                } else if (resolve) {
                    resolve(file);
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](done, '`done` is defined if `resolve` is not');
                    done(undefined, file);
                }
            }
        }
    }
    /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > 👉 **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@link CompileResultMap `CompileResultMap`}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */ processSync(file) {
        /** @type {boolean} */ let complete = false;
        /** @type {VFileWithOutput<CompileResult> | undefined} */ let result;
        this.freeze();
        assertParser('processSync', this.parser || this.Parser);
        assertCompiler('processSync', this.compiler || this.Compiler);
        this.process(file, realDone);
        assertDone('processSync', 'process', complete);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](result, 'we either bailed on an error or have a tree');
        return result;
        /**
     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}
     */ function realDone(error, file) {
            complete = true;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$bail$40$2$2e$0$2e$2$2f$node_modules$2f$bail$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["bail"](error);
            result = file;
        }
    }
    /**
   * Run *transformers* on a syntax tree.
   *
   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */ run(tree, file, done) {
        assertNode(tree);
        this.freeze();
        const transformers = this.transformers;
        if (!done && typeof file === 'function') {
            done = file;
            file = undefined;
        }
        return done ? executor(undefined, done) : new Promise(executor);
        // Note: `void`s needed for TS.
        /**
     * @param {(
     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |
     *   undefined
     * )} resolve
     * @param {(error: Error) => undefined | void} reject
     * @returns {undefined}
     */ function executor(resolve, reject) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](typeof file !== 'function', '`file` can’t be a `done` anymore, we checked');
            const realFile = vfile(file);
            transformers.run(tree, realFile, realDone);
            /**
       * @param {Error | undefined} error
       * @param {Node} outputTree
       * @param {VFile} file
       * @returns {undefined}
       */ function realDone(error, outputTree, file) {
                const resultingTree = outputTree || tree;
                if (error) {
                    reject(error);
                } else if (resolve) {
                    resolve(resultingTree);
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](done, '`done` is defined if `resolve` is not');
                    done(undefined, resultingTree, file);
                }
            }
        }
    }
    /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */ runSync(tree, file) {
        /** @type {boolean} */ let complete = false;
        /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */ let result;
        this.run(tree, file, realDone);
        assertDone('runSync', 'run', complete);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](result, 'we either bailed on an error or have a tree');
        return result;
        /**
     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}
     */ function realDone(error, tree) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$bail$40$2$2e$0$2e$2$2f$node_modules$2f$bail$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["bail"](error);
            result = tree;
            complete = true;
        }
    }
    /**
   * Compile a syntax tree.
   *
   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > 👉 **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@link CompileResultMap `CompileResultMap`}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */ stringify(tree, file) {
        this.freeze();
        const realFile = vfile(file);
        const compiler = this.compiler || this.Compiler;
        assertCompiler('stringify', compiler);
        assertNode(tree);
        return compiler(tree, realFile);
    }
    /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > 👉 **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */ use(value, ...parameters) {
        const attachers = this.attachers;
        const namespace = this.namespace;
        assertUnfrozen('use', this.frozen);
        if (value === null || value === undefined) {
        // Empty.
        } else if (typeof value === 'function') {
            addPlugin(value, parameters);
        } else if (typeof value === 'object') {
            if (Array.isArray(value)) {
                addList(value);
            } else {
                addPreset(value);
            }
        } else {
            throw new TypeError('Expected usable value, not `' + value + '`');
        }
        return this;
        /**
     * @param {Pluggable} value
     * @returns {undefined}
     */ function add(value) {
            if (typeof value === 'function') {
                addPlugin(value, []);
            } else if (typeof value === 'object') {
                if (Array.isArray(value)) {
                    const [plugin, ...parameters] = value;
                    addPlugin(plugin, parameters);
                } else {
                    addPreset(value);
                }
            } else {
                throw new TypeError('Expected usable value, not `' + value + '`');
            }
        }
        /**
     * @param {Preset} result
     * @returns {undefined}
     */ function addPreset(result) {
            if (!('plugins' in result) && !('settings' in result)) {
                throw new Error('Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither');
            }
            addList(result.plugins);
            if (result.settings) {
                namespace.settings = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$extend$40$3$2e$0$2e$2$2f$node_modules$2f$extend$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](true, namespace.settings, result.settings);
            }
        }
        /**
     * @param {PluggableList | null | undefined} plugins
     * @returns {undefined}
     */ function addList(plugins) {
            let index = -1;
            if (plugins === null || plugins === undefined) {
            // Empty.
            } else if (Array.isArray(plugins)) {
                while(++index < plugins.length){
                    const thing = plugins[index];
                    add(thing);
                }
            } else {
                throw new TypeError('Expected a list of plugins, not `' + plugins + '`');
            }
        }
        /**
     * @param {Plugin} plugin
     * @param {Array<unknown>} parameters
     * @returns {undefined}
     */ function addPlugin(plugin, parameters) {
            let index = -1;
            let entryIndex = -1;
            while(++index < attachers.length){
                if (attachers[index][0] === plugin) {
                    entryIndex = index;
                    break;
                }
            }
            if (entryIndex === -1) {
                attachers.push([
                    plugin,
                    ...parameters
                ]);
            } else if (parameters.length > 0) {
                let [primary, ...rest] = parameters;
                const currentPrimary = attachers[entryIndex][1];
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$plain$2d$obj$40$4$2e$1$2e$0$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](currentPrimary) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$plain$2d$obj$40$4$2e$1$2e$0$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](primary)) {
                    primary = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$extend$40$3$2e$0$2e$2$2f$node_modules$2f$extend$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](true, currentPrimary, primary);
                }
                attachers[entryIndex] = [
                    plugin,
                    primary,
                    ...rest
                ];
            }
        }
    }
}
const unified = new Processor().freeze();
/**
 * Assert a parser is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Parser}
 */ function assertParser(name, value) {
    if (typeof value !== 'function') {
        throw new TypeError('Cannot `' + name + '` without `parser`');
    }
}
/**
 * Assert a compiler is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Compiler}
 */ function assertCompiler(name, value) {
    if (typeof value !== 'function') {
        throw new TypeError('Cannot `' + name + '` without `compiler`');
    }
}
/**
 * Assert the processor is not frozen.
 *
 * @param {string} name
 * @param {unknown} frozen
 * @returns {asserts frozen is false}
 */ function assertUnfrozen(name, frozen) {
    if (frozen) {
        throw new Error('Cannot call `' + name + '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');
    }
}
/**
 * Assert `node` is a unist node.
 *
 * @param {unknown} node
 * @returns {asserts node is Node}
 */ function assertNode(node) {
    // `isPlainObj` unfortunately uses `any` instead of `unknown`.
    // type-coverage:ignore-next-line
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$plain$2d$obj$40$4$2e$1$2e$0$2f$node_modules$2f$is$2d$plain$2d$obj$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"](node) || typeof node.type !== 'string') {
        throw new TypeError('Expected node, got `' + node + '`');
    // Fine.
    }
}
/**
 * Assert that `complete` is `true`.
 *
 * @param {string} name
 * @param {string} asyncName
 * @param {unknown} complete
 * @returns {asserts complete is true}
 */ function assertDone(name, asyncName, complete) {
    if (!complete) {
        throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');
    }
}
/**
 * @param {Compatible | undefined} [value]
 * @returns {VFile}
 */ function vfile(value) {
    return looksLikeAVFile(value) ? value : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$6$2e$0$2e$1$2f$node_modules$2f$vfile$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFile"](value);
}
/**
 * @param {Compatible | undefined} [value]
 * @returns {value is VFile}
 */ function looksLikeAVFile(value) {
    return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);
}
/**
 * @param {unknown} [value]
 * @returns {value is Value}
 */ function looksLikeAValue(value) {
    return typeof value === 'string' || isUint8Array(value);
}
/**
 * Assert `value` is an `Uint8Array`.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Uint8Array}
 *   Whether `value` is an `Uint8Array`.
 */ function isUint8Array(value) {
    return Boolean(value && typeof value === 'object' && 'byteLength' in value && 'byteOffset' in value);
}

})()),
"[project]/node_modules/.pnpm/unified@11.0.4/node_modules/unified/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "unified": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unified$40$11$2e$0$2e$4$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unified"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unified$40$11$2e$0$2e$4$2f$node_modules$2f$unified$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unified@11.0.4/node_modules/unified/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "trimLines": ()=>trimLines
});
const tab = 9 /* `\t` */ ;
const space = 32 /* ` ` */ ;
function trimLines(value) {
    const source = String(value);
    const search = /\r?\n|\r/g;
    let match = search.exec(source);
    let last = 0;
    /** @type {Array<string>} */ const lines = [];
    while(match){
        lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);
        last = match.index + match[0].length;
        match = search.exec(source);
    }
    lines.push(trimLine(source.slice(last), last > 0, false));
    return lines.join('');
}
/**
 * @param {string} value
 *   Line to trim.
 * @param {boolean} start
 *   Whether to trim the start of the line.
 * @param {boolean} end
 *   Whether to trim the end of the line.
 * @returns {string}
 *   Trimmed line.
 */ function trimLine(value, start, end) {
    let startIndex = 0;
    let endIndex = value.length;
    if (start) {
        let code = value.codePointAt(startIndex);
        while(code === tab || code === space){
            startIndex++;
            code = value.codePointAt(startIndex);
        }
    }
    if (end) {
        let code = value.codePointAt(endIndex - 1);
        while(code === tab || code === space){
            endIndex--;
            code = value.codePointAt(endIndex - 1);
        }
    }
    return endIndex > startIndex ? value.slice(startIndex, endIndex) : '';
}

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/values.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * This module is compiled away!
 *
 * While micromark works based on character codes, this module includes the
 * string versions of ’em.
 * The C0 block, except for LF, CR, HT, and w/ the replacement character added,
 * are available here.
 */ __turbopack_esm__({
    "values": ()=>values
});
const values = {
    ht: '\t',
    lf: '\n',
    cr: '\r',
    space: ' ',
    exclamationMark: '!',
    quotationMark: '"',
    numberSign: '#',
    dollarSign: '$',
    percentSign: '%',
    ampersand: '&',
    apostrophe: "'",
    leftParenthesis: '(',
    rightParenthesis: ')',
    asterisk: '*',
    plusSign: '+',
    comma: ',',
    dash: '-',
    dot: '.',
    slash: '/',
    digit0: '0',
    digit1: '1',
    digit2: '2',
    digit3: '3',
    digit4: '4',
    digit5: '5',
    digit6: '6',
    digit7: '7',
    digit8: '8',
    digit9: '9',
    colon: ':',
    semicolon: ';',
    lessThan: '<',
    equalsTo: '=',
    greaterThan: '>',
    questionMark: '?',
    atSign: '@',
    uppercaseA: 'A',
    uppercaseB: 'B',
    uppercaseC: 'C',
    uppercaseD: 'D',
    uppercaseE: 'E',
    uppercaseF: 'F',
    uppercaseG: 'G',
    uppercaseH: 'H',
    uppercaseI: 'I',
    uppercaseJ: 'J',
    uppercaseK: 'K',
    uppercaseL: 'L',
    uppercaseM: 'M',
    uppercaseN: 'N',
    uppercaseO: 'O',
    uppercaseP: 'P',
    uppercaseQ: 'Q',
    uppercaseR: 'R',
    uppercaseS: 'S',
    uppercaseT: 'T',
    uppercaseU: 'U',
    uppercaseV: 'V',
    uppercaseW: 'W',
    uppercaseX: 'X',
    uppercaseY: 'Y',
    uppercaseZ: 'Z',
    leftSquareBracket: '[',
    backslash: '\\',
    rightSquareBracket: ']',
    caret: '^',
    underscore: '_',
    graveAccent: '`',
    lowercaseA: 'a',
    lowercaseB: 'b',
    lowercaseC: 'c',
    lowercaseD: 'd',
    lowercaseE: 'e',
    lowercaseF: 'f',
    lowercaseG: 'g',
    lowercaseH: 'h',
    lowercaseI: 'i',
    lowercaseJ: 'j',
    lowercaseK: 'k',
    lowercaseL: 'l',
    lowercaseM: 'm',
    lowercaseN: 'n',
    lowercaseO: 'o',
    lowercaseP: 'p',
    lowercaseQ: 'q',
    lowercaseR: 'r',
    lowercaseS: 's',
    lowercaseT: 't',
    lowercaseU: 'u',
    lowercaseV: 'v',
    lowercaseW: 'w',
    lowercaseX: 'x',
    lowercaseY: 'y',
    lowercaseZ: 'z',
    leftCurlyBrace: '{',
    verticalBar: '|',
    rightCurlyBrace: '}',
    tilde: '~',
    replacementCharacter: '�'
};

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Character codes.
 *
 * This module is compiled away!
 *
 * micromark works based on character codes.
 * This module contains constants for the ASCII block and the replacement
 * character.
 * A couple of them are handled in a special way, such as the line endings
 * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal
 * tab) and its expansion based on what column it’s at (virtual space),
 * and the end-of-file (eof) character.
 * As values are preprocessed before handling them, the actual characters LF,
 * CR, HT, and NUL (which is present as the replacement character), are
 * guaranteed to not exist.
 *
 * Unicode basic latin block.
 */ __turbopack_esm__({
    "codes": ()=>codes
});
const codes = {
    carriageReturn: -5,
    lineFeed: -4,
    carriageReturnLineFeed: -3,
    horizontalTab: -2,
    virtualSpace: -1,
    eof: null,
    nul: 0,
    soh: 1,
    stx: 2,
    etx: 3,
    eot: 4,
    enq: 5,
    ack: 6,
    bel: 7,
    bs: 8,
    ht: 9,
    lf: 10,
    vt: 11,
    ff: 12,
    cr: 13,
    so: 14,
    si: 15,
    dle: 16,
    dc1: 17,
    dc2: 18,
    dc3: 19,
    dc4: 20,
    nak: 21,
    syn: 22,
    etb: 23,
    can: 24,
    em: 25,
    sub: 26,
    esc: 27,
    fs: 28,
    gs: 29,
    rs: 30,
    us: 31,
    space: 32,
    exclamationMark: 33,
    quotationMark: 34,
    numberSign: 35,
    dollarSign: 36,
    percentSign: 37,
    ampersand: 38,
    apostrophe: 39,
    leftParenthesis: 40,
    rightParenthesis: 41,
    asterisk: 42,
    plusSign: 43,
    comma: 44,
    dash: 45,
    dot: 46,
    slash: 47,
    digit0: 48,
    digit1: 49,
    digit2: 50,
    digit3: 51,
    digit4: 52,
    digit5: 53,
    digit6: 54,
    digit7: 55,
    digit8: 56,
    digit9: 57,
    colon: 58,
    semicolon: 59,
    lessThan: 60,
    equalsTo: 61,
    greaterThan: 62,
    questionMark: 63,
    atSign: 64,
    uppercaseA: 65,
    uppercaseB: 66,
    uppercaseC: 67,
    uppercaseD: 68,
    uppercaseE: 69,
    uppercaseF: 70,
    uppercaseG: 71,
    uppercaseH: 72,
    uppercaseI: 73,
    uppercaseJ: 74,
    uppercaseK: 75,
    uppercaseL: 76,
    uppercaseM: 77,
    uppercaseN: 78,
    uppercaseO: 79,
    uppercaseP: 80,
    uppercaseQ: 81,
    uppercaseR: 82,
    uppercaseS: 83,
    uppercaseT: 84,
    uppercaseU: 85,
    uppercaseV: 86,
    uppercaseW: 87,
    uppercaseX: 88,
    uppercaseY: 89,
    uppercaseZ: 90,
    leftSquareBracket: 91,
    backslash: 92,
    rightSquareBracket: 93,
    caret: 94,
    underscore: 95,
    graveAccent: 96,
    lowercaseA: 97,
    lowercaseB: 98,
    lowercaseC: 99,
    lowercaseD: 100,
    lowercaseE: 101,
    lowercaseF: 102,
    lowercaseG: 103,
    lowercaseH: 104,
    lowercaseI: 105,
    lowercaseJ: 106,
    lowercaseK: 107,
    lowercaseL: 108,
    lowercaseM: 109,
    lowercaseN: 110,
    lowercaseO: 111,
    lowercaseP: 112,
    lowercaseQ: 113,
    lowercaseR: 114,
    lowercaseS: 115,
    lowercaseT: 116,
    lowercaseU: 117,
    lowercaseV: 118,
    lowercaseW: 119,
    lowercaseX: 120,
    lowercaseY: 121,
    lowercaseZ: 122,
    leftCurlyBrace: 123,
    verticalBar: 124,
    rightCurlyBrace: 125,
    tilde: 126,
    del: 127,
    // Unicode Specials block.
    byteOrderMarker: 65279,
    // Unicode Specials block.
    replacementCharacter: 65533 // `�`
};

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * This module is compiled away!
 *
 * Here is the list of all types of tokens exposed by micromark, with a short
 * explanation of what they include and where they are found.
 * In picking names, generally, the rule is to be as explicit as possible
 * instead of reusing names.
 * For example, there is a `definitionDestination` and a `resourceDestination`,
 * instead of one shared name.
 */ // Note: when changing the next record, you must also change `TokenTypeMap`
// in `micromark-util-types/index.d.ts`.
__turbopack_esm__({
    "types": ()=>types
});
const types = {
    // Generic type for data, such as in a title, a destination, etc.
    data: 'data',
    // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).
    // Such as, between a fenced code fence and an info string.
    whitespace: 'whitespace',
    // Generic type for line endings (line feed, carriage return, carriage return +
    // line feed).
    lineEnding: 'lineEnding',
    // A line ending, but ending a blank line.
    lineEndingBlank: 'lineEndingBlank',
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a
    // line.
    linePrefix: 'linePrefix',
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a
    // line.
    lineSuffix: 'lineSuffix',
    // Whole ATX heading:
    //
    // ```markdown
    // #
    // ## Alpha
    // ### Bravo ###
    // ```
    //
    // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.
    atxHeading: 'atxHeading',
    // Sequence of number signs in an ATX heading (`###`).
    atxHeadingSequence: 'atxHeadingSequence',
    // Content in an ATX heading (`alpha`).
    // Includes text.
    atxHeadingText: 'atxHeadingText',
    // Whole autolink (`<https://example.com>` or `<admin@example.com>`)
    // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.
    autolink: 'autolink',
    // Email autolink w/o markers (`admin@example.com`)
    autolinkEmail: 'autolinkEmail',
    // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).
    autolinkMarker: 'autolinkMarker',
    // Protocol autolink w/o markers (`https://example.com`)
    autolinkProtocol: 'autolinkProtocol',
    // A whole character escape (`\-`).
    // Includes `escapeMarker` and `characterEscapeValue`.
    characterEscape: 'characterEscape',
    // The escaped character (`-`).
    characterEscapeValue: 'characterEscapeValue',
    // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).
    // Includes `characterReferenceMarker`, an optional
    // `characterReferenceMarkerNumeric`, in which case an optional
    // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.
    characterReference: 'characterReference',
    // The start or end marker (`&` or `;`).
    characterReferenceMarker: 'characterReferenceMarker',
    // Mark reference as numeric (`#`).
    characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',
    // Mark reference as numeric (`x` or `X`).
    characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',
    // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).
    characterReferenceValue: 'characterReferenceValue',
    // Whole fenced code:
    //
    // ````markdown
    // ```js
    // alert(1)
    // ```
    // ````
    codeFenced: 'codeFenced',
    // A fenced code fence, including whitespace, sequence, info, and meta
    // (` ```js `).
    codeFencedFence: 'codeFencedFence',
    // Sequence of grave accent or tilde characters (` ``` `) in a fence.
    codeFencedFenceSequence: 'codeFencedFenceSequence',
    // Info word (`js`) in a fence.
    // Includes string.
    codeFencedFenceInfo: 'codeFencedFenceInfo',
    // Meta words (`highlight="1"`) in a fence.
    // Includes string.
    codeFencedFenceMeta: 'codeFencedFenceMeta',
    // A line of code.
    codeFlowValue: 'codeFlowValue',
    // Whole indented code:
    //
    // ```markdown
    //     alert(1)
    // ```
    //
    // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.
    codeIndented: 'codeIndented',
    // A text code (``` `alpha` ```).
    // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include
    // `codeTextPadding`.
    codeText: 'codeText',
    codeTextData: 'codeTextData',
    // A space or line ending right after or before a tick.
    codeTextPadding: 'codeTextPadding',
    // A text code fence (` `` `).
    codeTextSequence: 'codeTextSequence',
    // Whole content:
    //
    // ```markdown
    // [a]: b
    // c
    // =
    // d
    // ```
    //
    // Includes `paragraph` and `definition`.
    content: 'content',
    // Whole definition:
    //
    // ```markdown
    // [micromark]: https://github.com/micromark/micromark
    // ```
    //
    // Includes `definitionLabel`, `definitionMarker`, `whitespace`,
    // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.
    definition: 'definition',
    // Destination of a definition (`https://github.com/micromark/micromark` or
    // `<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.
    definitionDestination: 'definitionDestination',
    // Enclosed destination of a definition
    // (`<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteralMarker` and optionally
    // `definitionDestinationString`.
    definitionDestinationLiteral: 'definitionDestinationLiteral',
    // Markers of an enclosed definition destination (`<` or `>`).
    definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',
    // Unenclosed destination of a definition
    // (`https://github.com/micromark/micromark`).
    // Includes `definitionDestinationString`.
    definitionDestinationRaw: 'definitionDestinationRaw',
    // Text in an destination (`https://github.com/micromark/micromark`).
    // Includes string.
    definitionDestinationString: 'definitionDestinationString',
    // Label of a definition (`[micromark]`).
    // Includes `definitionLabelMarker` and `definitionLabelString`.
    definitionLabel: 'definitionLabel',
    // Markers of a definition label (`[` or `]`).
    definitionLabelMarker: 'definitionLabelMarker',
    // Value of a definition label (`micromark`).
    // Includes string.
    definitionLabelString: 'definitionLabelString',
    // Marker between a label and a destination (`:`).
    definitionMarker: 'definitionMarker',
    // Title of a definition (`"x"`, `'y'`, or `(z)`).
    // Includes `definitionTitleMarker` and optionally `definitionTitleString`.
    definitionTitle: 'definitionTitle',
    // Marker around a title of a definition (`"`, `'`, `(`, or `)`).
    definitionTitleMarker: 'definitionTitleMarker',
    // Data without markers in a title (`z`).
    // Includes string.
    definitionTitleString: 'definitionTitleString',
    // Emphasis (`*alpha*`).
    // Includes `emphasisSequence` and `emphasisText`.
    emphasis: 'emphasis',
    // Sequence of emphasis markers (`*` or `_`).
    emphasisSequence: 'emphasisSequence',
    // Emphasis text (`alpha`).
    // Includes text.
    emphasisText: 'emphasisText',
    // The character escape marker (`\`).
    escapeMarker: 'escapeMarker',
    // A hard break created with a backslash (`\\n`).
    // Note: does not include the line ending.
    hardBreakEscape: 'hardBreakEscape',
    // A hard break created with trailing spaces (`  \n`).
    // Does not include the line ending.
    hardBreakTrailing: 'hardBreakTrailing',
    // Flow HTML:
    //
    // ```markdown
    // <div
    // ```
    //
    // Inlcudes `lineEnding`, `htmlFlowData`.
    htmlFlow: 'htmlFlow',
    htmlFlowData: 'htmlFlowData',
    // HTML in text (the tag in `a <i> b`).
    // Includes `lineEnding`, `htmlTextData`.
    htmlText: 'htmlText',
    htmlTextData: 'htmlTextData',
    // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or
    // `![alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    image: 'image',
    // Whole link label (`[*alpha*]`).
    // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.
    label: 'label',
    // Text in an label (`*alpha*`).
    // Includes text.
    labelText: 'labelText',
    // Start a link label (`[`).
    // Includes a `labelMarker`.
    labelLink: 'labelLink',
    // Start an image label (`![`).
    // Includes `labelImageMarker` and `labelMarker`.
    labelImage: 'labelImage',
    // Marker of a label (`[` or `]`).
    labelMarker: 'labelMarker',
    // Marker to start an image (`!`).
    labelImageMarker: 'labelImageMarker',
    // End a label (`]`).
    // Includes `labelMarker`.
    labelEnd: 'labelEnd',
    // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    link: 'link',
    // Whole paragraph:
    //
    // ```markdown
    // alpha
    // bravo.
    // ```
    //
    // Includes text.
    paragraph: 'paragraph',
    // A reference (`[alpha]` or `[]`).
    // Includes `referenceMarker` and an optional `referenceString`.
    reference: 'reference',
    // A reference marker (`[` or `]`).
    referenceMarker: 'referenceMarker',
    // Reference text (`alpha`).
    // Includes string.
    referenceString: 'referenceString',
    // A resource (`(https://example.com "alpha")`).
    // Includes `resourceMarker`, an optional `resourceDestination` with an optional
    // `whitespace` and `resourceTitle`.
    resource: 'resource',
    // A resource destination (`https://example.com`).
    // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.
    resourceDestination: 'resourceDestination',
    // A literal resource destination (`<https://example.com>`).
    // Includes `resourceDestinationLiteralMarker` and optionally
    // `resourceDestinationString`.
    resourceDestinationLiteral: 'resourceDestinationLiteral',
    // A resource destination marker (`<` or `>`).
    resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',
    // A raw resource destination (`https://example.com`).
    // Includes `resourceDestinationString`.
    resourceDestinationRaw: 'resourceDestinationRaw',
    // Resource destination text (`https://example.com`).
    // Includes string.
    resourceDestinationString: 'resourceDestinationString',
    // A resource marker (`(` or `)`).
    resourceMarker: 'resourceMarker',
    // A resource title (`"alpha"`, `'alpha'`, or `(alpha)`).
    // Includes `resourceTitleMarker` and optionally `resourceTitleString`.
    resourceTitle: 'resourceTitle',
    // A resource title marker (`"`, `'`, `(`, or `)`).
    resourceTitleMarker: 'resourceTitleMarker',
    // Resource destination title (`alpha`).
    // Includes string.
    resourceTitleString: 'resourceTitleString',
    // Whole setext heading:
    //
    // ```markdown
    // alpha
    // bravo
    // =====
    // ```
    //
    // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and
    // `setextHeadingLine`.
    setextHeading: 'setextHeading',
    // Content in a setext heading (`alpha\nbravo`).
    // Includes text.
    setextHeadingText: 'setextHeadingText',
    // Underline in a setext heading, including whitespace suffix (`==`).
    // Includes `setextHeadingLineSequence`.
    setextHeadingLine: 'setextHeadingLine',
    // Sequence of equals or dash characters in underline in a setext heading (`-`).
    setextHeadingLineSequence: 'setextHeadingLineSequence',
    // Strong (`**alpha**`).
    // Includes `strongSequence` and `strongText`.
    strong: 'strong',
    // Sequence of strong markers (`**` or `__`).
    strongSequence: 'strongSequence',
    // Strong text (`alpha`).
    // Includes text.
    strongText: 'strongText',
    // Whole thematic break:
    //
    // ```markdown
    // * * *
    // ```
    //
    // Includes `thematicBreakSequence` and `whitespace`.
    thematicBreak: 'thematicBreak',
    // A sequence of one or more thematic break markers (`***`).
    thematicBreakSequence: 'thematicBreakSequence',
    // Whole block quote:
    //
    // ```markdown
    // > a
    // >
    // > b
    // ```
    //
    // Includes `blockQuotePrefix` and flow.
    blockQuote: 'blockQuote',
    // The `>` or `> ` of a block quote.
    blockQuotePrefix: 'blockQuotePrefix',
    // The `>` of a block quote prefix.
    blockQuoteMarker: 'blockQuoteMarker',
    // The optional ` ` of a block quote prefix.
    blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',
    // Whole unordered list:
    //
    // ```markdown
    // - a
    //   b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listOrdered: 'listOrdered',
    // Whole ordered list:
    //
    // ```markdown
    // 1. a
    //    b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listUnordered: 'listUnordered',
    // The indent of further list item lines.
    listItemIndent: 'listItemIndent',
    // A marker, as in, `*`, `+`, `-`, `.`, or `)`.
    listItemMarker: 'listItemMarker',
    // The thing that starts a list item, such as `1. `.
    // Includes `listItemValue` if ordered, `listItemMarker`, and
    // `listItemPrefixWhitespace` (unless followed by a line ending).
    listItemPrefix: 'listItemPrefix',
    // The whitespace after a marker.
    listItemPrefixWhitespace: 'listItemPrefixWhitespace',
    // The numerical value of an ordered item.
    listItemValue: 'listItemValue',
    // Internal types used for subtokenizers, compiled away
    chunkDocument: 'chunkDocument',
    chunkContent: 'chunkContent',
    chunkFlow: 'chunkFlow',
    chunkText: 'chunkText',
    chunkString: 'chunkString'
};

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/constants.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * This module is compiled away!
 *
 * Parsing markdown comes with a couple of constants, such as minimum or maximum
 * sizes of certain sequences.
 * Additionally, there are a couple symbols used inside micromark.
 * These are all defined here, but compiled away by scripts.
 */ __turbopack_esm__({
    "constants": ()=>constants
});
const constants = {
    attentionSideBefore: 1,
    attentionSideAfter: 2,
    atxHeadingOpeningFenceSizeMax: 6,
    autolinkDomainSizeMax: 63,
    autolinkSchemeSizeMax: 32,
    cdataOpeningString: 'CDATA[',
    characterGroupWhitespace: 1,
    characterGroupPunctuation: 2,
    characterReferenceDecimalSizeMax: 7,
    characterReferenceHexadecimalSizeMax: 6,
    characterReferenceNamedSizeMax: 31,
    codeFencedSequenceSizeMin: 3,
    contentTypeDocument: 'document',
    contentTypeFlow: 'flow',
    contentTypeContent: 'content',
    contentTypeString: 'string',
    contentTypeText: 'text',
    hardBreakPrefixSizeMin: 2,
    htmlRaw: 1,
    htmlComment: 2,
    htmlInstruction: 3,
    htmlDeclaration: 4,
    htmlCdata: 5,
    htmlBasic: 6,
    htmlComplete: 7,
    htmlRawSizeMax: 8,
    linkResourceDestinationBalanceMax: 32,
    linkReferenceSizeMax: 999,
    listItemValueSizeMax: 10,
    numericBaseDecimal: 10,
    numericBaseHexadecimal: 0x10,
    tabSize: 4,
    thematicBreakMarkerCountMin: 3,
    v8MaxSafeChunkSize: 10000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.
};

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/values.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * This module is compiled away!
 *
 * While micromark works based on character codes, this module includes the
 * string versions of ’em.
 * The C0 block, except for LF, CR, HT, and w/ the replacement character added,
 * are available here.
 */ __turbopack_esm__({
    "values": ()=>values
});
const values = {
    ht: '\t',
    lf: '\n',
    cr: '\r',
    space: ' ',
    exclamationMark: '!',
    quotationMark: '"',
    numberSign: '#',
    dollarSign: '$',
    percentSign: '%',
    ampersand: '&',
    apostrophe: "'",
    leftParenthesis: '(',
    rightParenthesis: ')',
    asterisk: '*',
    plusSign: '+',
    comma: ',',
    dash: '-',
    dot: '.',
    slash: '/',
    digit0: '0',
    digit1: '1',
    digit2: '2',
    digit3: '3',
    digit4: '4',
    digit5: '5',
    digit6: '6',
    digit7: '7',
    digit8: '8',
    digit9: '9',
    colon: ':',
    semicolon: ';',
    lessThan: '<',
    equalsTo: '=',
    greaterThan: '>',
    questionMark: '?',
    atSign: '@',
    uppercaseA: 'A',
    uppercaseB: 'B',
    uppercaseC: 'C',
    uppercaseD: 'D',
    uppercaseE: 'E',
    uppercaseF: 'F',
    uppercaseG: 'G',
    uppercaseH: 'H',
    uppercaseI: 'I',
    uppercaseJ: 'J',
    uppercaseK: 'K',
    uppercaseL: 'L',
    uppercaseM: 'M',
    uppercaseN: 'N',
    uppercaseO: 'O',
    uppercaseP: 'P',
    uppercaseQ: 'Q',
    uppercaseR: 'R',
    uppercaseS: 'S',
    uppercaseT: 'T',
    uppercaseU: 'U',
    uppercaseV: 'V',
    uppercaseW: 'W',
    uppercaseX: 'X',
    uppercaseY: 'Y',
    uppercaseZ: 'Z',
    leftSquareBracket: '[',
    backslash: '\\',
    rightSquareBracket: ']',
    caret: '^',
    underscore: '_',
    graveAccent: '`',
    lowercaseA: 'a',
    lowercaseB: 'b',
    lowercaseC: 'c',
    lowercaseD: 'd',
    lowercaseE: 'e',
    lowercaseF: 'f',
    lowercaseG: 'g',
    lowercaseH: 'h',
    lowercaseI: 'i',
    lowercaseJ: 'j',
    lowercaseK: 'k',
    lowercaseL: 'l',
    lowercaseM: 'm',
    lowercaseN: 'n',
    lowercaseO: 'o',
    lowercaseP: 'p',
    lowercaseQ: 'q',
    lowercaseR: 'r',
    lowercaseS: 's',
    lowercaseT: 't',
    lowercaseU: 'u',
    lowercaseV: 'v',
    lowercaseW: 'w',
    lowercaseX: 'x',
    lowercaseY: 'y',
    lowercaseZ: 'z',
    leftCurlyBrace: '{',
    verticalBar: '|',
    rightCurlyBrace: '}',
    tilde: '~',
    replacementCharacter: '�'
};

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/types.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * This module is compiled away!
 *
 * Here is the list of all types of tokens exposed by micromark, with a short
 * explanation of what they include and where they are found.
 * In picking names, generally, the rule is to be as explicit as possible
 * instead of reusing names.
 * For example, there is a `definitionDestination` and a `resourceDestination`,
 * instead of one shared name.
 */ // Note: when changing the next record, you must also change `TokenTypeMap`
// in `micromark-util-types/index.d.ts`.
__turbopack_esm__({
    "types": ()=>types
});
const types = {
    // Generic type for data, such as in a title, a destination, etc.
    data: 'data',
    // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).
    // Such as, between a fenced code fence and an info string.
    whitespace: 'whitespace',
    // Generic type for line endings (line feed, carriage return, carriage return +
    // line feed).
    lineEnding: 'lineEnding',
    // A line ending, but ending a blank line.
    lineEndingBlank: 'lineEndingBlank',
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a
    // line.
    linePrefix: 'linePrefix',
    // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a
    // line.
    lineSuffix: 'lineSuffix',
    // Whole ATX heading:
    //
    // ```markdown
    // #
    // ## Alpha
    // ### Bravo ###
    // ```
    //
    // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.
    atxHeading: 'atxHeading',
    // Sequence of number signs in an ATX heading (`###`).
    atxHeadingSequence: 'atxHeadingSequence',
    // Content in an ATX heading (`alpha`).
    // Includes text.
    atxHeadingText: 'atxHeadingText',
    // Whole autolink (`<https://example.com>` or `<admin@example.com>`)
    // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.
    autolink: 'autolink',
    // Email autolink w/o markers (`admin@example.com`)
    autolinkEmail: 'autolinkEmail',
    // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).
    autolinkMarker: 'autolinkMarker',
    // Protocol autolink w/o markers (`https://example.com`)
    autolinkProtocol: 'autolinkProtocol',
    // A whole character escape (`\-`).
    // Includes `escapeMarker` and `characterEscapeValue`.
    characterEscape: 'characterEscape',
    // The escaped character (`-`).
    characterEscapeValue: 'characterEscapeValue',
    // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).
    // Includes `characterReferenceMarker`, an optional
    // `characterReferenceMarkerNumeric`, in which case an optional
    // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.
    characterReference: 'characterReference',
    // The start or end marker (`&` or `;`).
    characterReferenceMarker: 'characterReferenceMarker',
    // Mark reference as numeric (`#`).
    characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',
    // Mark reference as numeric (`x` or `X`).
    characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',
    // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).
    characterReferenceValue: 'characterReferenceValue',
    // Whole fenced code:
    //
    // ````markdown
    // ```js
    // alert(1)
    // ```
    // ````
    codeFenced: 'codeFenced',
    // A fenced code fence, including whitespace, sequence, info, and meta
    // (` ```js `).
    codeFencedFence: 'codeFencedFence',
    // Sequence of grave accent or tilde characters (` ``` `) in a fence.
    codeFencedFenceSequence: 'codeFencedFenceSequence',
    // Info word (`js`) in a fence.
    // Includes string.
    codeFencedFenceInfo: 'codeFencedFenceInfo',
    // Meta words (`highlight="1"`) in a fence.
    // Includes string.
    codeFencedFenceMeta: 'codeFencedFenceMeta',
    // A line of code.
    codeFlowValue: 'codeFlowValue',
    // Whole indented code:
    //
    // ```markdown
    //     alert(1)
    // ```
    //
    // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.
    codeIndented: 'codeIndented',
    // A text code (``` `alpha` ```).
    // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include
    // `codeTextPadding`.
    codeText: 'codeText',
    codeTextData: 'codeTextData',
    // A space or line ending right after or before a tick.
    codeTextPadding: 'codeTextPadding',
    // A text code fence (` `` `).
    codeTextSequence: 'codeTextSequence',
    // Whole content:
    //
    // ```markdown
    // [a]: b
    // c
    // =
    // d
    // ```
    //
    // Includes `paragraph` and `definition`.
    content: 'content',
    // Whole definition:
    //
    // ```markdown
    // [micromark]: https://github.com/micromark/micromark
    // ```
    //
    // Includes `definitionLabel`, `definitionMarker`, `whitespace`,
    // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.
    definition: 'definition',
    // Destination of a definition (`https://github.com/micromark/micromark` or
    // `<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.
    definitionDestination: 'definitionDestination',
    // Enclosed destination of a definition
    // (`<https://github.com/micromark/micromark>`).
    // Includes `definitionDestinationLiteralMarker` and optionally
    // `definitionDestinationString`.
    definitionDestinationLiteral: 'definitionDestinationLiteral',
    // Markers of an enclosed definition destination (`<` or `>`).
    definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',
    // Unenclosed destination of a definition
    // (`https://github.com/micromark/micromark`).
    // Includes `definitionDestinationString`.
    definitionDestinationRaw: 'definitionDestinationRaw',
    // Text in an destination (`https://github.com/micromark/micromark`).
    // Includes string.
    definitionDestinationString: 'definitionDestinationString',
    // Label of a definition (`[micromark]`).
    // Includes `definitionLabelMarker` and `definitionLabelString`.
    definitionLabel: 'definitionLabel',
    // Markers of a definition label (`[` or `]`).
    definitionLabelMarker: 'definitionLabelMarker',
    // Value of a definition label (`micromark`).
    // Includes string.
    definitionLabelString: 'definitionLabelString',
    // Marker between a label and a destination (`:`).
    definitionMarker: 'definitionMarker',
    // Title of a definition (`"x"`, `'y'`, or `(z)`).
    // Includes `definitionTitleMarker` and optionally `definitionTitleString`.
    definitionTitle: 'definitionTitle',
    // Marker around a title of a definition (`"`, `'`, `(`, or `)`).
    definitionTitleMarker: 'definitionTitleMarker',
    // Data without markers in a title (`z`).
    // Includes string.
    definitionTitleString: 'definitionTitleString',
    // Emphasis (`*alpha*`).
    // Includes `emphasisSequence` and `emphasisText`.
    emphasis: 'emphasis',
    // Sequence of emphasis markers (`*` or `_`).
    emphasisSequence: 'emphasisSequence',
    // Emphasis text (`alpha`).
    // Includes text.
    emphasisText: 'emphasisText',
    // The character escape marker (`\`).
    escapeMarker: 'escapeMarker',
    // A hard break created with a backslash (`\\n`).
    // Note: does not include the line ending.
    hardBreakEscape: 'hardBreakEscape',
    // A hard break created with trailing spaces (`  \n`).
    // Does not include the line ending.
    hardBreakTrailing: 'hardBreakTrailing',
    // Flow HTML:
    //
    // ```markdown
    // <div
    // ```
    //
    // Inlcudes `lineEnding`, `htmlFlowData`.
    htmlFlow: 'htmlFlow',
    htmlFlowData: 'htmlFlowData',
    // HTML in text (the tag in `a <i> b`).
    // Includes `lineEnding`, `htmlTextData`.
    htmlText: 'htmlText',
    htmlTextData: 'htmlTextData',
    // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or
    // `![alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    image: 'image',
    // Whole link label (`[*alpha*]`).
    // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.
    label: 'label',
    // Text in an label (`*alpha*`).
    // Includes text.
    labelText: 'labelText',
    // Start a link label (`[`).
    // Includes a `labelMarker`.
    labelLink: 'labelLink',
    // Start an image label (`![`).
    // Includes `labelImageMarker` and `labelMarker`.
    labelImage: 'labelImage',
    // Marker of a label (`[` or `]`).
    labelMarker: 'labelMarker',
    // Marker to start an image (`!`).
    labelImageMarker: 'labelImageMarker',
    // End a label (`]`).
    // Includes `labelMarker`.
    labelEnd: 'labelEnd',
    // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).
    // Includes `label` and an optional `resource` or `reference`.
    link: 'link',
    // Whole paragraph:
    //
    // ```markdown
    // alpha
    // bravo.
    // ```
    //
    // Includes text.
    paragraph: 'paragraph',
    // A reference (`[alpha]` or `[]`).
    // Includes `referenceMarker` and an optional `referenceString`.
    reference: 'reference',
    // A reference marker (`[` or `]`).
    referenceMarker: 'referenceMarker',
    // Reference text (`alpha`).
    // Includes string.
    referenceString: 'referenceString',
    // A resource (`(https://example.com "alpha")`).
    // Includes `resourceMarker`, an optional `resourceDestination` with an optional
    // `whitespace` and `resourceTitle`.
    resource: 'resource',
    // A resource destination (`https://example.com`).
    // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.
    resourceDestination: 'resourceDestination',
    // A literal resource destination (`<https://example.com>`).
    // Includes `resourceDestinationLiteralMarker` and optionally
    // `resourceDestinationString`.
    resourceDestinationLiteral: 'resourceDestinationLiteral',
    // A resource destination marker (`<` or `>`).
    resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',
    // A raw resource destination (`https://example.com`).
    // Includes `resourceDestinationString`.
    resourceDestinationRaw: 'resourceDestinationRaw',
    // Resource destination text (`https://example.com`).
    // Includes string.
    resourceDestinationString: 'resourceDestinationString',
    // A resource marker (`(` or `)`).
    resourceMarker: 'resourceMarker',
    // A resource title (`"alpha"`, `'alpha'`, or `(alpha)`).
    // Includes `resourceTitleMarker` and optionally `resourceTitleString`.
    resourceTitle: 'resourceTitle',
    // A resource title marker (`"`, `'`, `(`, or `)`).
    resourceTitleMarker: 'resourceTitleMarker',
    // Resource destination title (`alpha`).
    // Includes string.
    resourceTitleString: 'resourceTitleString',
    // Whole setext heading:
    //
    // ```markdown
    // alpha
    // bravo
    // =====
    // ```
    //
    // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and
    // `setextHeadingLine`.
    setextHeading: 'setextHeading',
    // Content in a setext heading (`alpha\nbravo`).
    // Includes text.
    setextHeadingText: 'setextHeadingText',
    // Underline in a setext heading, including whitespace suffix (`==`).
    // Includes `setextHeadingLineSequence`.
    setextHeadingLine: 'setextHeadingLine',
    // Sequence of equals or dash characters in underline in a setext heading (`-`).
    setextHeadingLineSequence: 'setextHeadingLineSequence',
    // Strong (`**alpha**`).
    // Includes `strongSequence` and `strongText`.
    strong: 'strong',
    // Sequence of strong markers (`**` or `__`).
    strongSequence: 'strongSequence',
    // Strong text (`alpha`).
    // Includes text.
    strongText: 'strongText',
    // Whole thematic break:
    //
    // ```markdown
    // * * *
    // ```
    //
    // Includes `thematicBreakSequence` and `whitespace`.
    thematicBreak: 'thematicBreak',
    // A sequence of one or more thematic break markers (`***`).
    thematicBreakSequence: 'thematicBreakSequence',
    // Whole block quote:
    //
    // ```markdown
    // > a
    // >
    // > b
    // ```
    //
    // Includes `blockQuotePrefix` and flow.
    blockQuote: 'blockQuote',
    // The `>` or `> ` of a block quote.
    blockQuotePrefix: 'blockQuotePrefix',
    // The `>` of a block quote prefix.
    blockQuoteMarker: 'blockQuoteMarker',
    // The optional ` ` of a block quote prefix.
    blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',
    // Whole unordered list:
    //
    // ```markdown
    // - a
    //   b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listOrdered: 'listOrdered',
    // Whole ordered list:
    //
    // ```markdown
    // 1. a
    //    b
    // ```
    //
    // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
    // lines.
    listUnordered: 'listUnordered',
    // The indent of further list item lines.
    listItemIndent: 'listItemIndent',
    // A marker, as in, `*`, `+`, `-`, `.`, or `)`.
    listItemMarker: 'listItemMarker',
    // The thing that starts a list item, such as `1. `.
    // Includes `listItemValue` if ordered, `listItemMarker`, and
    // `listItemPrefixWhitespace` (unless followed by a line ending).
    listItemPrefix: 'listItemPrefix',
    // The whitespace after a marker.
    listItemPrefixWhitespace: 'listItemPrefixWhitespace',
    // The numerical value of an ordered item.
    listItemValue: 'listItemValue',
    // Internal types used for subtokenizers, compiled away
    chunkDocument: 'chunkDocument',
    chunkContent: 'chunkContent',
    chunkFlow: 'chunkFlow',
    chunkText: 'chunkText',
    chunkString: 'chunkString'
};

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/constants.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * This module is compiled away!
 *
 * Parsing markdown comes with a couple of constants, such as minimum or maximum
 * sizes of certain sequences.
 * Additionally, there are a couple symbols used inside micromark.
 * These are all defined here, but compiled away by scripts.
 */ __turbopack_esm__({
    "constants": ()=>constants
});
const constants = {
    attentionSideBefore: 1,
    attentionSideAfter: 2,
    atxHeadingOpeningFenceSizeMax: 6,
    autolinkDomainSizeMax: 63,
    autolinkSchemeSizeMax: 32,
    cdataOpeningString: 'CDATA[',
    characterGroupWhitespace: 1,
    characterGroupPunctuation: 2,
    characterReferenceDecimalSizeMax: 7,
    characterReferenceHexadecimalSizeMax: 6,
    characterReferenceNamedSizeMax: 31,
    codeFencedSequenceSizeMin: 3,
    contentTypeDocument: 'document',
    contentTypeFlow: 'flow',
    contentTypeContent: 'content',
    contentTypeString: 'string',
    contentTypeText: 'text',
    hardBreakPrefixSizeMin: 2,
    htmlRaw: 1,
    htmlComment: 2,
    htmlInstruction: 3,
    htmlDeclaration: 4,
    htmlCdata: 5,
    htmlBasic: 6,
    htmlComplete: 7,
    htmlRawSizeMax: 8,
    linkResourceDestinationBalanceMax: 32,
    linkReferenceSizeMax: 999,
    listItemValueSizeMax: 10,
    numericBaseDecimal: 10,
    numericBaseHexadecimal: 0x10,
    tabSize: 4,
    thematicBreakMarkerCountMin: 3,
    v8MaxSafeChunkSize: 10000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.
};

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Character codes.
 *
 * This module is compiled away!
 *
 * micromark works based on character codes.
 * This module contains constants for the ASCII block and the replacement
 * character.
 * A couple of them are handled in a special way, such as the line endings
 * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal
 * tab) and its expansion based on what column it’s at (virtual space),
 * and the end-of-file (eof) character.
 * As values are preprocessed before handling them, the actual characters LF,
 * CR, HT, and NUL (which is present as the replacement character), are
 * guaranteed to not exist.
 *
 * Unicode basic latin block.
 */ __turbopack_esm__({
    "codes": ()=>codes
});
const codes = {
    carriageReturn: -5,
    lineFeed: -4,
    carriageReturnLineFeed: -3,
    horizontalTab: -2,
    virtualSpace: -1,
    eof: null,
    nul: 0,
    soh: 1,
    stx: 2,
    etx: 3,
    eot: 4,
    enq: 5,
    ack: 6,
    bel: 7,
    bs: 8,
    ht: 9,
    lf: 10,
    vt: 11,
    ff: 12,
    cr: 13,
    so: 14,
    si: 15,
    dle: 16,
    dc1: 17,
    dc2: 18,
    dc3: 19,
    dc4: 20,
    nak: 21,
    syn: 22,
    etb: 23,
    can: 24,
    em: 25,
    sub: 26,
    esc: 27,
    fs: 28,
    gs: 29,
    rs: 30,
    us: 31,
    space: 32,
    exclamationMark: 33,
    quotationMark: 34,
    numberSign: 35,
    dollarSign: 36,
    percentSign: 37,
    ampersand: 38,
    apostrophe: 39,
    leftParenthesis: 40,
    rightParenthesis: 41,
    asterisk: 42,
    plusSign: 43,
    comma: 44,
    dash: 45,
    dot: 46,
    slash: 47,
    digit0: 48,
    digit1: 49,
    digit2: 50,
    digit3: 51,
    digit4: 52,
    digit5: 53,
    digit6: 54,
    digit7: 55,
    digit8: 56,
    digit9: 57,
    colon: 58,
    semicolon: 59,
    lessThan: 60,
    equalsTo: 61,
    greaterThan: 62,
    questionMark: 63,
    atSign: 64,
    uppercaseA: 65,
    uppercaseB: 66,
    uppercaseC: 67,
    uppercaseD: 68,
    uppercaseE: 69,
    uppercaseF: 70,
    uppercaseG: 71,
    uppercaseH: 72,
    uppercaseI: 73,
    uppercaseJ: 74,
    uppercaseK: 75,
    uppercaseL: 76,
    uppercaseM: 77,
    uppercaseN: 78,
    uppercaseO: 79,
    uppercaseP: 80,
    uppercaseQ: 81,
    uppercaseR: 82,
    uppercaseS: 83,
    uppercaseT: 84,
    uppercaseU: 85,
    uppercaseV: 86,
    uppercaseW: 87,
    uppercaseX: 88,
    uppercaseY: 89,
    uppercaseZ: 90,
    leftSquareBracket: 91,
    backslash: 92,
    rightSquareBracket: 93,
    caret: 94,
    underscore: 95,
    graveAccent: 96,
    lowercaseA: 97,
    lowercaseB: 98,
    lowercaseC: 99,
    lowercaseD: 100,
    lowercaseE: 101,
    lowercaseF: 102,
    lowercaseG: 103,
    lowercaseH: 104,
    lowercaseI: 105,
    lowercaseJ: 106,
    lowercaseK: 107,
    lowercaseL: 108,
    lowercaseM: 109,
    lowercaseN: 110,
    lowercaseO: 111,
    lowercaseP: 112,
    lowercaseQ: 113,
    lowercaseR: 114,
    lowercaseS: 115,
    lowercaseT: 116,
    lowercaseU: 117,
    lowercaseV: 118,
    lowercaseW: 119,
    lowercaseX: 120,
    lowercaseY: 121,
    lowercaseZ: 122,
    leftCurlyBrace: 123,
    verticalBar: 124,
    rightCurlyBrace: 125,
    tilde: 126,
    del: 127,
    // Unicode Specials block.
    byteOrderMarker: 65279,
    // Unicode Specials block.
    replacementCharacter: 65533 // `�`
};

})()),
"[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "codes": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"],
    "constants": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"],
    "types": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"],
    "values": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/constants.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/values.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;

})()),
"[project]/node_modules/.pnpm/micromark-util-encode@1.1.0/node_modules/micromark-util-encode/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "encode": ()=>encode
});
const characterReferences = {
    '"': 'quot',
    '&': 'amp',
    '<': 'lt',
    '>': 'gt'
};
function encode(value) {
    return value.replace(/["&<>]/g, replace);
    /**
   * @param {string} value
   * @returns {string}
   */ function replace(value) {
        // @ts-expect-error Hush, it’s fine.
        return '&' + characterReferences[value] + ';';
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-encode@2.0.0/node_modules/micromark-util-encode/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "encode": ()=>encode
});
const characterReferences = {
    '"': 'quot',
    '&': 'amp',
    '<': 'lt',
    '>': 'gt'
};
function encode(value) {
    return value.replace(/["&<>]/g, replace);
    /**
   * @param {string} value
   * @returns {string}
   */ function replace(value) {
        // @ts-expect-error Hush, it’s fine.
        return '&' + characterReferences[value] + ';';
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/lib/unicode-punctuation-regex.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// This module is generated by `script/`.
//
// CommonMark handles attention (emphasis, strong) markers based on what comes
// before or after them.
// One such difference is if those characters are Unicode punctuation.
// This script is generated from the Unicode data.
/**
 * Regular expression that matches a unicode punctuation character.
 */ __turbopack_esm__({
    "unicodePunctuationRegex": ()=>unicodePunctuationRegex
});
const unicodePunctuationRegex = /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

})()),
"[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Code} Code
 */ __turbopack_esm__({
    "asciiAlpha": ()=>asciiAlpha,
    "asciiAlphanumeric": ()=>asciiAlphanumeric,
    "asciiAtext": ()=>asciiAtext,
    "asciiControl": ()=>asciiControl,
    "asciiDigit": ()=>asciiDigit,
    "asciiHexDigit": ()=>asciiHexDigit,
    "asciiPunctuation": ()=>asciiPunctuation,
    "markdownLineEnding": ()=>markdownLineEnding,
    "markdownLineEndingOrSpace": ()=>markdownLineEndingOrSpace,
    "markdownSpace": ()=>markdownSpace,
    "unicodePunctuation": ()=>unicodePunctuation,
    "unicodeWhitespace": ()=>unicodeWhitespace
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$lib$2f$unicode$2d$punctuation$2d$regex$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/lib/unicode-punctuation-regex.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
const asciiAlpha = regexCheck(/[A-Za-z]/);
const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code) {
    return(// Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code !== null && (code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].del));
}
const asciiDigit = regexCheck(/\d/);
const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code) {
    return code !== null && code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab;
}
function markdownLineEndingOrSpace(code) {
    return code !== null && (code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].nul || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space);
}
function markdownSpace(code) {
    return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space;
}
const unicodePunctuation = regexCheck(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$lib$2f$unicode$2d$punctuation$2d$regex$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodePunctuationRegex"]);
const unicodeWhitespace = regexCheck(/\s/);
/**
 * Create a code check from a regex.
 *
 * @param {RegExp} regex
 * @returns {(code: Code) => boolean}
 */ function regexCheck(regex) {
    return check;
    /**
   * Check whether a code matches the bound regex.
   *
   * @param {Code} code
   *   Character code.
   * @returns {boolean}
   *   Whether the character code matches the bound regex.
   */ function check(code) {
        return code !== null && regex.test(String.fromCharCode(code));
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Code} Code
 */ __turbopack_esm__({
    "asciiAlpha": ()=>asciiAlpha,
    "asciiAlphanumeric": ()=>asciiAlphanumeric,
    "asciiAtext": ()=>asciiAtext,
    "asciiControl": ()=>asciiControl,
    "asciiDigit": ()=>asciiDigit,
    "asciiHexDigit": ()=>asciiHexDigit,
    "asciiPunctuation": ()=>asciiPunctuation,
    "markdownLineEnding": ()=>markdownLineEnding,
    "markdownLineEndingOrSpace": ()=>markdownLineEndingOrSpace,
    "markdownSpace": ()=>markdownSpace,
    "unicodePunctuation": ()=>unicodePunctuation,
    "unicodeWhitespace": ()=>unicodeWhitespace
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const unicodePunctuationInternal = regexCheck(/\p{P}/u);
const asciiAlpha = regexCheck(/[A-Za-z]/);
const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code) {
    return(// Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code !== null && (code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].del));
}
const asciiDigit = regexCheck(/\d/);
const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code) {
    return code !== null && code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab;
}
function markdownLineEndingOrSpace(code) {
    return code !== null && (code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].nul || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space);
}
function markdownSpace(code) {
    return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space;
}
function unicodePunctuation(code) {
    return asciiPunctuation(code) || unicodePunctuationInternal(code);
}
const unicodeWhitespace = regexCheck(/\s/);
/**
 * Create a code check from a regex.
 *
 * @param {RegExp} regex
 * @returns {(code: Code) => boolean}
 */ function regexCheck(regex) {
    return check;
    /**
   * Check whether a code matches the bound regex.
   *
   * @param {Code} code
   *   Character code.
   * @returns {boolean}
   *   Whether the character code matches the bound regex.
   */ function check(code) {
        return code !== null && code > -1 && regex.test(String.fromCharCode(code));
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-sanitize-uri@1.2.0/node_modules/micromark-util-sanitize-uri/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "normalizeUri": ()=>normalizeUri,
    "sanitizeUri": ()=>sanitizeUri
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$encode$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$encode$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-encode@1.1.0/node_modules/micromark-util-encode/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/values.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
function sanitizeUri(url, protocol) {
    const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$encode$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$encode$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["encode"](normalizeUri(url || ''));
    if (!protocol) {
        return value;
    }
    const colon = value.indexOf(':');
    const questionMark = value.indexOf('?');
    const numberSign = value.indexOf('#');
    const slash = value.indexOf('/');
    if (// If there is no protocol, it’s relative.
    colon < 0 || slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign || // It is a protocol, it should be allowed.
    protocol.test(value.slice(0, colon))) {
        return value;
    }
    return '';
}
function normalizeUri(value) {
    /** @type {Array<string>} */ const result = [];
    let index = -1;
    let start = 0;
    let skip = 0;
    while(++index < value.length){
        const code = value.charCodeAt(index);
        /** @type {string} */ let replace = '';
        // A correct percent encoded value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].percentSign && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"](value.charCodeAt(index + 1)) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"](value.charCodeAt(index + 2))) {
            skip = 2;
        } else if (code < 128) {
            if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
                replace = String.fromCharCode(code);
            }
        } else if (code > 55295 && code < 57344) {
            const next = value.charCodeAt(index + 1);
            // A correct surrogate pair.
            if (code < 56320 && next > 56319 && next < 57344) {
                replace = String.fromCharCode(code, next);
                skip = 1;
            } else {
                replace = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].replacementCharacter;
            }
        } else {
            replace = String.fromCharCode(code);
        }
        if (replace) {
            result.push(value.slice(start, index), encodeURIComponent(replace));
            start = index + skip + 1;
            replace = '';
        }
        if (skip) {
            index += skip;
            skip = 0;
        }
    }
    return result.join('') + value.slice(start);
}

})()),
"[project]/node_modules/.pnpm/micromark-util-sanitize-uri@2.0.0/node_modules/micromark-util-sanitize-uri/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "normalizeUri": ()=>normalizeUri,
    "sanitizeUri": ()=>sanitizeUri
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$encode$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$encode$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-encode@2.0.0/node_modules/micromark-util-encode/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function sanitizeUri(url, protocol) {
    const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$encode$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$encode$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["encode"](normalizeUri(url || ''));
    if (!protocol) {
        return value;
    }
    const colon = value.indexOf(':');
    const questionMark = value.indexOf('?');
    const numberSign = value.indexOf('#');
    const slash = value.indexOf('/');
    if (// If there is no protocol, it’s relative.
    colon < 0 || slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign || // It is a protocol, it should be allowed.
    protocol.test(value.slice(0, colon))) {
        return value;
    }
    return '';
}
function normalizeUri(value) {
    /** @type {Array<string>} */ const result = [];
    let index = -1;
    let start = 0;
    let skip = 0;
    while(++index < value.length){
        const code = value.charCodeAt(index);
        /** @type {string} */ let replace = '';
        // A correct percent encoded value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].percentSign && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"](value.charCodeAt(index + 1)) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiAlphanumeric"](value.charCodeAt(index + 2))) {
            skip = 2;
        } else if (code < 128) {
            if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
                replace = String.fromCharCode(code);
            }
        } else if (code > 55_295 && code < 57_344) {
            const next = value.charCodeAt(index + 1);
            // A correct surrogate pair.
            if (code < 56_320 && next > 56_319 && next < 57_344) {
                replace = String.fromCharCode(code, next);
                skip = 1;
            } else {
                replace = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].replacementCharacter;
            }
        } else {
            replace = String.fromCharCode(code);
        }
        if (replace) {
            result.push(value.slice(start, index), encodeURIComponent(replace));
            start = index + skip + 1;
            replace = '';
        }
        if (skip) {
            index += skip;
            skip = 0;
        }
    }
    return result.join('') + value.slice(start);
}

})()),
"[project]/node_modules/.pnpm/mdast-util-definitions@5.1.2/node_modules/mdast-util-definitions/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Definition} Definition
 */ /**
 * @typedef {Root | Content} Node
 *
 * @callback GetDefinition
 *   Get a definition by identifier.
 * @param {string | null | undefined} [identifier]
 *   Identifier of definition.
 * @returns {Definition | null}
 *   Definition corresponding to `identifier` or `null`.
 */ __turbopack_esm__({
    "definitions": ()=>definitions
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$4$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$visit$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-visit@4.1.2/node_modules/unist-util-visit/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const own = {}.hasOwnProperty;
function definitions(tree) {
    /** @type {Record<string, Definition>} */ const cache = Object.create(null);
    if (!tree || !tree.type) {
        throw new Error('mdast-util-definitions expected node');
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$visit$40$4$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$visit$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visit"](tree, 'definition', (definition)=>{
        const id = clean(definition.identifier);
        if (id && !own.call(cache, id)) {
            cache[id] = definition;
        }
    });
    return definition;
    /** @type {GetDefinition} */ function definition(identifier) {
        const id = clean(identifier);
        // To do: next major: return `undefined` when not found.
        return id && own.call(cache, id) ? cache[id] : null;
    }
}
/**
 * @param {string | null | undefined} [value]
 * @returns {string}
 */ function clean(value) {
    return String(value || '').toUpperCase();
}

})()),
"[project]/node_modules/.pnpm/mdast-util-definitions@5.1.2/node_modules/mdast-util-definitions/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').GetDefinition} GetDefinition
 */ __turbopack_esm__({
    "definitions": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$definitions$40$5$2e$1$2e$2$2f$node_modules$2f$mdast$2d$util$2d$definitions$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["definitions"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$definitions$40$5$2e$1$2e$2$2f$node_modules$2f$mdast$2d$util$2d$definitions$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-definitions@5.1.2/node_modules/mdast-util-definitions/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/unist-util-generated@2.0.1/node_modules/unist-util-generated/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef NodeLike
 * @property {PositionLike | null | undefined} [position]
 */ /**
 * Check if `node` is generated.
 *
 * @param {NodeLike | null | undefined} [node]
 *   Node to check.
 * @returns {boolean}
 *   Whether `node` is generated (does not have positional info).
 */ __turbopack_esm__({
    "generated": ()=>generated
});
function generated(node) {
    return !node || !node.position || !node.position.start || !node.position.start.line || !node.position.start.column || !node.position.end || !node.position.end.line || !node.position.end.column;
}

})()),
"[project]/node_modules/.pnpm/unist-util-generated@2.0.1/node_modules/unist-util-generated/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "generated": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$generated$40$2$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$generated$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["generated"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$generated$40$2$2e$0$2e$1$2f$node_modules$2f$unist$2d$util$2d$generated$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-generated@2.0.1/node_modules/unist-util-generated/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/remark-rehype@10.1.0/node_modules/remark-rehype/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('mdast-util-to-hast').Options} Options
 * @typedef {import('unified').Processor<any, any, any, any>} Processor
 *
 * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree
 */ __turbopack_esm__({
    "default": ()=>__TURBOPACK__default__export__
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$12$2e$3$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(
/**
 * Plugin that turns markdown into HTML to support rehype.
 *
 * *   If a destination processor is given, that processor runs with a new HTML
 *     (hast) tree (bridge-mode).
 *     As the given processor runs with a hast tree, and rehype plugins support
 *     hast, that means rehype plugins can be used with the given processor.
 *     The hast tree is discarded in the end.
 *     It’s highly unlikely that you want to do this.
 * *   The common case is to not pass a destination processor, in which case the
 *     current processor continues running with a new HTML (hast) tree
 *     (mutate-mode).
 *     As the current processor continues with a hast tree, and rehype plugins
 *     support hast, that means rehype plugins can be used after
 *     `remark-rehype`.
 *     It’s likely that this is what you want to do.
 *
 * @param destination
 *   Optional unified processor.
 * @param options
 *   Options passed to `mdast-util-to-hast`.
 */ const remarkRehype = function(destination, options) {
    return destination && 'run' in destination ? bridge(destination, options) : mutate(destination || options);
};
const __TURBOPACK__default__export__ = remarkRehype;
/**
 * Bridge-mode.
 * Runs the destination with the new hast tree.
 *
 * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}
 */ function bridge(destination, options) {
    return (node, file, next)=>{
        destination.run(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$12$2e$3$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toHast"](node, options), file, (error)=>{
            next(error);
        });
    };
}
/**
 * Mutate-mode.
 * Further plugins run on the hast tree.
 *
 * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}
 */ function mutate(options) {
    // @ts-expect-error: assume a corresponding node is returned by `toHast`.
    return (node)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$12$2e$3$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toHast"](node, options);
}

})()),
"[project]/node_modules/.pnpm/remark-rehype@10.1.0/node_modules/remark-rehype/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Options} Options
 * @typedef {import('./lib/index.js').Processor} Processor
 */ __turbopack_esm__({
    "all": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$12$2e$3$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["all"],
    "default": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$rehype$40$10$2e$1$2e$0$2f$node_modules$2f$remark$2d$rehype$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"],
    "defaultHandlers": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$12$2e$3$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["defaultHandlers"],
    "one": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$12$2e$3$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["one"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$12$2e$3$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$rehype$40$10$2e$1$2e$0$2f$node_modules$2f$remark$2d$rehype$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/remark-rehype@10.1.0/node_modules/remark-rehype/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),
"[project]/node_modules/.pnpm/remark-rehype@11.0.0/node_modules/remark-rehype/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Include `data` fields in mdast and `raw` nodes in hast.
/// <reference types="mdast-util-to-hast" />
/**
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('mdast-util-to-hast').Options} Options
 * @typedef {import('unified').Processor} Processor
 * @typedef {import('vfile').VFile} VFile
 */ /**
 * @callback TransformBridge
 *   Bridge-mode.
 *
 *   Runs the destination with the new hast tree.
 *   Discards result.
 * @param {MdastRoot} tree
 *   Tree.
 * @param {VFile} file
 *   File.
 * @returns {Promise<undefined>}
 *   Nothing.
 *
 * @callback TransformMutate
 *  Mutate-mode.
 *
 *  Further transformers run on the hast tree.
 * @param {MdastRoot} tree
 *   Tree.
 * @param {VFile} file
 *   File.
 * @returns {HastRoot}
 *   Tree (hast).
 */ __turbopack_esm__({
    "default": ()=>remarkRehype
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$13$2e$0$2e$2$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-hast@13.0.2/node_modules/mdast-util-to-hast/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function remarkRehype(destination, options) {
    if (destination && 'run' in destination) {
        /**
     * @type {TransformBridge}
     */ return async function(tree, file) {
            // Cast because root in -> root out.
            const hastTree = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$13$2e$0$2e$2$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toHast"](tree, options);
            await destination.run(hastTree, file);
        };
    }
    /**
   * @type {TransformMutate}
   */ return function(tree) {
        // Cast because root in -> root out.
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$13$2e$0$2e$2$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toHast"](tree, options || destination);
    };
}

})()),
"[project]/node_modules/.pnpm/remark-rehype@11.0.0/node_modules/remark-rehype/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Options} Options
 */ __turbopack_esm__({
    "default": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$rehype$40$11$2e$0$2e$0$2f$node_modules$2f$remark$2d$rehype$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"],
    "defaultFootnoteBackContent": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$13$2e$0$2e$2$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["defaultFootnoteBackContent"],
    "defaultFootnoteBackLabel": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$13$2e$0$2e$2$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["defaultFootnoteBackLabel"],
    "defaultHandlers": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$13$2e$0$2e$2$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["defaultHandlers"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$hast$40$13$2e$0$2e$2$2f$node_modules$2f$mdast$2d$util$2d$to$2d$hast$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-hast@13.0.2/node_modules/mdast-util-to-hast/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$rehype$40$11$2e$0$2e$0$2f$node_modules$2f$remark$2d$rehype$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/remark-rehype@11.0.0/node_modules/remark-rehype/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),
"[project]/node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/types.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "ARRAY": ()=>ARRAY,
    "BIGINT": ()=>BIGINT,
    "DATE": ()=>DATE,
    "ERROR": ()=>ERROR,
    "MAP": ()=>MAP,
    "OBJECT": ()=>OBJECT,
    "PRIMITIVE": ()=>PRIMITIVE,
    "REGEXP": ()=>REGEXP,
    "SET": ()=>SET,
    "VOID": ()=>VOID
});
const VOID = -1;
const PRIMITIVE = 0;
const ARRAY = 1;
const OBJECT = 2;
const DATE = 3;
const REGEXP = 4;
const MAP = 5;
const SET = 6;
const ERROR = 7;
const BIGINT = 8; // export const SYMBOL = 9;

})()),
"[project]/node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/serialize.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "serialize": ()=>serialize
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/types.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const EMPTY = '';
const { toString } = {};
const { keys } = Object;
const typeOf = (value)=>{
    const type = typeof value;
    if (type !== 'object' || !value) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["PRIMITIVE"],
        type
    ];
    const asString = toString.call(value).slice(8, -1);
    switch(asString){
        case 'Array':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ARRAY"],
                EMPTY
            ];
        case 'Object':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["OBJECT"],
                EMPTY
            ];
        case 'Date':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["DATE"],
                EMPTY
            ];
        case 'RegExp':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["REGEXP"],
                EMPTY
            ];
        case 'Map':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["MAP"],
                EMPTY
            ];
        case 'Set':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SET"],
                EMPTY
            ];
    }
    if (asString.includes('Array')) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ARRAY"],
        asString
    ];
    if (asString.includes('Error')) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ERROR"],
        asString
    ];
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["OBJECT"],
        asString
    ];
};
const shouldSkip = ([TYPE, type])=>TYPE === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["PRIMITIVE"] && (type === 'function' || type === 'symbol');
const serializer = (strict, json, $, _)=>{
    const as = (out, value)=>{
        const index = _.push(out) - 1;
        $.set(value, index);
        return index;
    };
    const pair = (value)=>{
        if ($.has(value)) return $.get(value);
        let [TYPE, type] = typeOf(value);
        switch(TYPE){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["PRIMITIVE"]:
                {
                    let entry = value;
                    switch(type){
                        case 'bigint':
                            TYPE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["BIGINT"];
                            entry = value.toString();
                            break;
                        case 'function':
                        case 'symbol':
                            if (strict) throw new TypeError('unable to serialize ' + type);
                            entry = null;
                            break;
                        case 'undefined':
                            return as([
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VOID"]
                            ], value);
                    }
                    return as([
                        TYPE,
                        entry
                    ], value);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ARRAY"]:
                {
                    if (type) return as([
                        type,
                        [
                            ...value
                        ]
                    ], value);
                    const arr = [];
                    const index = as([
                        TYPE,
                        arr
                    ], value);
                    for (const entry of value)arr.push(pair(entry));
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["OBJECT"]:
                {
                    if (type) {
                        switch(type){
                            case 'BigInt':
                                return as([
                                    type,
                                    value.toString()
                                ], value);
                            case 'Boolean':
                            case 'Number':
                            case 'String':
                                return as([
                                    type,
                                    value.valueOf()
                                ], value);
                        }
                    }
                    if (json && 'toJSON' in value) return pair(value.toJSON());
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const key of keys(value)){
                        if (strict || !shouldSkip(typeOf(value[key]))) entries.push([
                            pair(key),
                            pair(value[key])
                        ]);
                    }
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["DATE"]:
                return as([
                    TYPE,
                    value.toISOString()
                ], value);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["REGEXP"]:
                {
                    const { source, flags } = value;
                    return as([
                        TYPE,
                        {
                            source,
                            flags
                        }
                    ], value);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["MAP"]:
                {
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const [key, entry] of value){
                        if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry)))) entries.push([
                            pair(key),
                            pair(entry)
                        ]);
                    }
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SET"]:
                {
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const entry of value){
                        if (strict || !shouldSkip(typeOf(entry))) entries.push(pair(entry));
                    }
                    return index;
                }
        }
        const { message } = value;
        return as([
            TYPE,
            {
                name: type,
                message
            }
        ], value);
    };
    return pair;
};
const serialize = (value, { json, lossy } = {})=>{
    const _ = [];
    return serializer(!(json || lossy), !!json, new Map, _)(value), _;
};

})()),
"[project]/node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/deserialize.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "deserialize": ()=>deserialize
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/types.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const env = typeof self === 'object' ? self : globalThis;
const deserializer = ($, _)=>{
    const as = (out, index)=>{
        $.set(index, out);
        return out;
    };
    const unpair = (index)=>{
        if ($.has(index)) return $.get(index);
        const [type, value] = _[index];
        switch(type){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["PRIMITIVE"]:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VOID"]:
                return as(value, index);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ARRAY"]:
                {
                    const arr = as([], index);
                    for (const index of value)arr.push(unpair(index));
                    return arr;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["OBJECT"]:
                {
                    const object = as({}, index);
                    for (const [key, index] of value)object[unpair(key)] = unpair(index);
                    return object;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["DATE"]:
                return as(new Date(value), index);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["REGEXP"]:
                {
                    const { source, flags } = value;
                    return as(new RegExp(source, flags), index);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["MAP"]:
                {
                    const map = as(new Map, index);
                    for (const [key, index] of value)map.set(unpair(key), unpair(index));
                    return map;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SET"]:
                {
                    const set = as(new Set, index);
                    for (const index of value)set.add(unpair(index));
                    return set;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ERROR"]:
                {
                    const { name, message } = value;
                    return as(new env[name](message), index);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["BIGINT"]:
                return as(BigInt(value), index);
            case 'BigInt':
                return as(Object(BigInt(value)), index);
        }
        return as(new env[type](value), index);
    };
    return unpair;
};
const deserialize = (serialized)=>deserializer(new Map, serialized)(0);

})()),
"[project]/node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "default": ()=>__TURBOPACK__default__export__,
    "deserialize": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["deserialize"],
    "serialize": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["serialize"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/deserialize.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/serialize.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
const __TURBOPACK__default__export__ = typeof structuredClone === "function" ? /* c8 ignore start */ (any, options)=>options && ('json' in options || 'lossy' in options) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["deserialize"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["serialize"](any, options)) : structuredClone(any) : (any, options)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["deserialize"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$ungap$2b$structured$2d$clone$40$1$2e$2$2e$0$2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["serialize"](any, options));
;

})()),
"[project]/node_modules/.pnpm/character-entities@2.0.2/node_modules/character-entities/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Map of named character references.
 *
 * @type {Record<string, string>}
 */ __turbopack_esm__({
    "characterEntities": ()=>characterEntities
});
const characterEntities = {
    AElig: 'Æ',
    AMP: '&',
    Aacute: 'Á',
    Abreve: 'Ă',
    Acirc: 'Â',
    Acy: 'А',
    Afr: '𝔄',
    Agrave: 'À',
    Alpha: 'Α',
    Amacr: 'Ā',
    And: '⩓',
    Aogon: 'Ą',
    Aopf: '𝔸',
    ApplyFunction: '⁡',
    Aring: 'Å',
    Ascr: '𝒜',
    Assign: '≔',
    Atilde: 'Ã',
    Auml: 'Ä',
    Backslash: '∖',
    Barv: '⫧',
    Barwed: '⌆',
    Bcy: 'Б',
    Because: '∵',
    Bernoullis: 'ℬ',
    Beta: 'Β',
    Bfr: '𝔅',
    Bopf: '𝔹',
    Breve: '˘',
    Bscr: 'ℬ',
    Bumpeq: '≎',
    CHcy: 'Ч',
    COPY: '©',
    Cacute: 'Ć',
    Cap: '⋒',
    CapitalDifferentialD: 'ⅅ',
    Cayleys: 'ℭ',
    Ccaron: 'Č',
    Ccedil: 'Ç',
    Ccirc: 'Ĉ',
    Cconint: '∰',
    Cdot: 'Ċ',
    Cedilla: '¸',
    CenterDot: '·',
    Cfr: 'ℭ',
    Chi: 'Χ',
    CircleDot: '⊙',
    CircleMinus: '⊖',
    CirclePlus: '⊕',
    CircleTimes: '⊗',
    ClockwiseContourIntegral: '∲',
    CloseCurlyDoubleQuote: '”',
    CloseCurlyQuote: '’',
    Colon: '∷',
    Colone: '⩴',
    Congruent: '≡',
    Conint: '∯',
    ContourIntegral: '∮',
    Copf: 'ℂ',
    Coproduct: '∐',
    CounterClockwiseContourIntegral: '∳',
    Cross: '⨯',
    Cscr: '𝒞',
    Cup: '⋓',
    CupCap: '≍',
    DD: 'ⅅ',
    DDotrahd: '⤑',
    DJcy: 'Ђ',
    DScy: 'Ѕ',
    DZcy: 'Џ',
    Dagger: '‡',
    Darr: '↡',
    Dashv: '⫤',
    Dcaron: 'Ď',
    Dcy: 'Д',
    Del: '∇',
    Delta: 'Δ',
    Dfr: '𝔇',
    DiacriticalAcute: '´',
    DiacriticalDot: '˙',
    DiacriticalDoubleAcute: '˝',
    DiacriticalGrave: '`',
    DiacriticalTilde: '˜',
    Diamond: '⋄',
    DifferentialD: 'ⅆ',
    Dopf: '𝔻',
    Dot: '¨',
    DotDot: '⃜',
    DotEqual: '≐',
    DoubleContourIntegral: '∯',
    DoubleDot: '¨',
    DoubleDownArrow: '⇓',
    DoubleLeftArrow: '⇐',
    DoubleLeftRightArrow: '⇔',
    DoubleLeftTee: '⫤',
    DoubleLongLeftArrow: '⟸',
    DoubleLongLeftRightArrow: '⟺',
    DoubleLongRightArrow: '⟹',
    DoubleRightArrow: '⇒',
    DoubleRightTee: '⊨',
    DoubleUpArrow: '⇑',
    DoubleUpDownArrow: '⇕',
    DoubleVerticalBar: '∥',
    DownArrow: '↓',
    DownArrowBar: '⤓',
    DownArrowUpArrow: '⇵',
    DownBreve: '̑',
    DownLeftRightVector: '⥐',
    DownLeftTeeVector: '⥞',
    DownLeftVector: '↽',
    DownLeftVectorBar: '⥖',
    DownRightTeeVector: '⥟',
    DownRightVector: '⇁',
    DownRightVectorBar: '⥗',
    DownTee: '⊤',
    DownTeeArrow: '↧',
    Downarrow: '⇓',
    Dscr: '𝒟',
    Dstrok: 'Đ',
    ENG: 'Ŋ',
    ETH: 'Ð',
    Eacute: 'É',
    Ecaron: 'Ě',
    Ecirc: 'Ê',
    Ecy: 'Э',
    Edot: 'Ė',
    Efr: '𝔈',
    Egrave: 'È',
    Element: '∈',
    Emacr: 'Ē',
    EmptySmallSquare: '◻',
    EmptyVerySmallSquare: '▫',
    Eogon: 'Ę',
    Eopf: '𝔼',
    Epsilon: 'Ε',
    Equal: '⩵',
    EqualTilde: '≂',
    Equilibrium: '⇌',
    Escr: 'ℰ',
    Esim: '⩳',
    Eta: 'Η',
    Euml: 'Ë',
    Exists: '∃',
    ExponentialE: 'ⅇ',
    Fcy: 'Ф',
    Ffr: '𝔉',
    FilledSmallSquare: '◼',
    FilledVerySmallSquare: '▪',
    Fopf: '𝔽',
    ForAll: '∀',
    Fouriertrf: 'ℱ',
    Fscr: 'ℱ',
    GJcy: 'Ѓ',
    GT: '>',
    Gamma: 'Γ',
    Gammad: 'Ϝ',
    Gbreve: 'Ğ',
    Gcedil: 'Ģ',
    Gcirc: 'Ĝ',
    Gcy: 'Г',
    Gdot: 'Ġ',
    Gfr: '𝔊',
    Gg: '⋙',
    Gopf: '𝔾',
    GreaterEqual: '≥',
    GreaterEqualLess: '⋛',
    GreaterFullEqual: '≧',
    GreaterGreater: '⪢',
    GreaterLess: '≷',
    GreaterSlantEqual: '⩾',
    GreaterTilde: '≳',
    Gscr: '𝒢',
    Gt: '≫',
    HARDcy: 'Ъ',
    Hacek: 'ˇ',
    Hat: '^',
    Hcirc: 'Ĥ',
    Hfr: 'ℌ',
    HilbertSpace: 'ℋ',
    Hopf: 'ℍ',
    HorizontalLine: '─',
    Hscr: 'ℋ',
    Hstrok: 'Ħ',
    HumpDownHump: '≎',
    HumpEqual: '≏',
    IEcy: 'Е',
    IJlig: 'Ĳ',
    IOcy: 'Ё',
    Iacute: 'Í',
    Icirc: 'Î',
    Icy: 'И',
    Idot: 'İ',
    Ifr: 'ℑ',
    Igrave: 'Ì',
    Im: 'ℑ',
    Imacr: 'Ī',
    ImaginaryI: 'ⅈ',
    Implies: '⇒',
    Int: '∬',
    Integral: '∫',
    Intersection: '⋂',
    InvisibleComma: '⁣',
    InvisibleTimes: '⁢',
    Iogon: 'Į',
    Iopf: '𝕀',
    Iota: 'Ι',
    Iscr: 'ℐ',
    Itilde: 'Ĩ',
    Iukcy: 'І',
    Iuml: 'Ï',
    Jcirc: 'Ĵ',
    Jcy: 'Й',
    Jfr: '𝔍',
    Jopf: '𝕁',
    Jscr: '𝒥',
    Jsercy: 'Ј',
    Jukcy: 'Є',
    KHcy: 'Х',
    KJcy: 'Ќ',
    Kappa: 'Κ',
    Kcedil: 'Ķ',
    Kcy: 'К',
    Kfr: '𝔎',
    Kopf: '𝕂',
    Kscr: '𝒦',
    LJcy: 'Љ',
    LT: '<',
    Lacute: 'Ĺ',
    Lambda: 'Λ',
    Lang: '⟪',
    Laplacetrf: 'ℒ',
    Larr: '↞',
    Lcaron: 'Ľ',
    Lcedil: 'Ļ',
    Lcy: 'Л',
    LeftAngleBracket: '⟨',
    LeftArrow: '←',
    LeftArrowBar: '⇤',
    LeftArrowRightArrow: '⇆',
    LeftCeiling: '⌈',
    LeftDoubleBracket: '⟦',
    LeftDownTeeVector: '⥡',
    LeftDownVector: '⇃',
    LeftDownVectorBar: '⥙',
    LeftFloor: '⌊',
    LeftRightArrow: '↔',
    LeftRightVector: '⥎',
    LeftTee: '⊣',
    LeftTeeArrow: '↤',
    LeftTeeVector: '⥚',
    LeftTriangle: '⊲',
    LeftTriangleBar: '⧏',
    LeftTriangleEqual: '⊴',
    LeftUpDownVector: '⥑',
    LeftUpTeeVector: '⥠',
    LeftUpVector: '↿',
    LeftUpVectorBar: '⥘',
    LeftVector: '↼',
    LeftVectorBar: '⥒',
    Leftarrow: '⇐',
    Leftrightarrow: '⇔',
    LessEqualGreater: '⋚',
    LessFullEqual: '≦',
    LessGreater: '≶',
    LessLess: '⪡',
    LessSlantEqual: '⩽',
    LessTilde: '≲',
    Lfr: '𝔏',
    Ll: '⋘',
    Lleftarrow: '⇚',
    Lmidot: 'Ŀ',
    LongLeftArrow: '⟵',
    LongLeftRightArrow: '⟷',
    LongRightArrow: '⟶',
    Longleftarrow: '⟸',
    Longleftrightarrow: '⟺',
    Longrightarrow: '⟹',
    Lopf: '𝕃',
    LowerLeftArrow: '↙',
    LowerRightArrow: '↘',
    Lscr: 'ℒ',
    Lsh: '↰',
    Lstrok: 'Ł',
    Lt: '≪',
    Map: '⤅',
    Mcy: 'М',
    MediumSpace: ' ',
    Mellintrf: 'ℳ',
    Mfr: '𝔐',
    MinusPlus: '∓',
    Mopf: '𝕄',
    Mscr: 'ℳ',
    Mu: 'Μ',
    NJcy: 'Њ',
    Nacute: 'Ń',
    Ncaron: 'Ň',
    Ncedil: 'Ņ',
    Ncy: 'Н',
    NegativeMediumSpace: '​',
    NegativeThickSpace: '​',
    NegativeThinSpace: '​',
    NegativeVeryThinSpace: '​',
    NestedGreaterGreater: '≫',
    NestedLessLess: '≪',
    NewLine: '\n',
    Nfr: '𝔑',
    NoBreak: '⁠',
    NonBreakingSpace: ' ',
    Nopf: 'ℕ',
    Not: '⫬',
    NotCongruent: '≢',
    NotCupCap: '≭',
    NotDoubleVerticalBar: '∦',
    NotElement: '∉',
    NotEqual: '≠',
    NotEqualTilde: '≂̸',
    NotExists: '∄',
    NotGreater: '≯',
    NotGreaterEqual: '≱',
    NotGreaterFullEqual: '≧̸',
    NotGreaterGreater: '≫̸',
    NotGreaterLess: '≹',
    NotGreaterSlantEqual: '⩾̸',
    NotGreaterTilde: '≵',
    NotHumpDownHump: '≎̸',
    NotHumpEqual: '≏̸',
    NotLeftTriangle: '⋪',
    NotLeftTriangleBar: '⧏̸',
    NotLeftTriangleEqual: '⋬',
    NotLess: '≮',
    NotLessEqual: '≰',
    NotLessGreater: '≸',
    NotLessLess: '≪̸',
    NotLessSlantEqual: '⩽̸',
    NotLessTilde: '≴',
    NotNestedGreaterGreater: '⪢̸',
    NotNestedLessLess: '⪡̸',
    NotPrecedes: '⊀',
    NotPrecedesEqual: '⪯̸',
    NotPrecedesSlantEqual: '⋠',
    NotReverseElement: '∌',
    NotRightTriangle: '⋫',
    NotRightTriangleBar: '⧐̸',
    NotRightTriangleEqual: '⋭',
    NotSquareSubset: '⊏̸',
    NotSquareSubsetEqual: '⋢',
    NotSquareSuperset: '⊐̸',
    NotSquareSupersetEqual: '⋣',
    NotSubset: '⊂⃒',
    NotSubsetEqual: '⊈',
    NotSucceeds: '⊁',
    NotSucceedsEqual: '⪰̸',
    NotSucceedsSlantEqual: '⋡',
    NotSucceedsTilde: '≿̸',
    NotSuperset: '⊃⃒',
    NotSupersetEqual: '⊉',
    NotTilde: '≁',
    NotTildeEqual: '≄',
    NotTildeFullEqual: '≇',
    NotTildeTilde: '≉',
    NotVerticalBar: '∤',
    Nscr: '𝒩',
    Ntilde: 'Ñ',
    Nu: 'Ν',
    OElig: 'Œ',
    Oacute: 'Ó',
    Ocirc: 'Ô',
    Ocy: 'О',
    Odblac: 'Ő',
    Ofr: '𝔒',
    Ograve: 'Ò',
    Omacr: 'Ō',
    Omega: 'Ω',
    Omicron: 'Ο',
    Oopf: '𝕆',
    OpenCurlyDoubleQuote: '“',
    OpenCurlyQuote: '‘',
    Or: '⩔',
    Oscr: '𝒪',
    Oslash: 'Ø',
    Otilde: 'Õ',
    Otimes: '⨷',
    Ouml: 'Ö',
    OverBar: '‾',
    OverBrace: '⏞',
    OverBracket: '⎴',
    OverParenthesis: '⏜',
    PartialD: '∂',
    Pcy: 'П',
    Pfr: '𝔓',
    Phi: 'Φ',
    Pi: 'Π',
    PlusMinus: '±',
    Poincareplane: 'ℌ',
    Popf: 'ℙ',
    Pr: '⪻',
    Precedes: '≺',
    PrecedesEqual: '⪯',
    PrecedesSlantEqual: '≼',
    PrecedesTilde: '≾',
    Prime: '″',
    Product: '∏',
    Proportion: '∷',
    Proportional: '∝',
    Pscr: '𝒫',
    Psi: 'Ψ',
    QUOT: '"',
    Qfr: '𝔔',
    Qopf: 'ℚ',
    Qscr: '𝒬',
    RBarr: '⤐',
    REG: '®',
    Racute: 'Ŕ',
    Rang: '⟫',
    Rarr: '↠',
    Rarrtl: '⤖',
    Rcaron: 'Ř',
    Rcedil: 'Ŗ',
    Rcy: 'Р',
    Re: 'ℜ',
    ReverseElement: '∋',
    ReverseEquilibrium: '⇋',
    ReverseUpEquilibrium: '⥯',
    Rfr: 'ℜ',
    Rho: 'Ρ',
    RightAngleBracket: '⟩',
    RightArrow: '→',
    RightArrowBar: '⇥',
    RightArrowLeftArrow: '⇄',
    RightCeiling: '⌉',
    RightDoubleBracket: '⟧',
    RightDownTeeVector: '⥝',
    RightDownVector: '⇂',
    RightDownVectorBar: '⥕',
    RightFloor: '⌋',
    RightTee: '⊢',
    RightTeeArrow: '↦',
    RightTeeVector: '⥛',
    RightTriangle: '⊳',
    RightTriangleBar: '⧐',
    RightTriangleEqual: '⊵',
    RightUpDownVector: '⥏',
    RightUpTeeVector: '⥜',
    RightUpVector: '↾',
    RightUpVectorBar: '⥔',
    RightVector: '⇀',
    RightVectorBar: '⥓',
    Rightarrow: '⇒',
    Ropf: 'ℝ',
    RoundImplies: '⥰',
    Rrightarrow: '⇛',
    Rscr: 'ℛ',
    Rsh: '↱',
    RuleDelayed: '⧴',
    SHCHcy: 'Щ',
    SHcy: 'Ш',
    SOFTcy: 'Ь',
    Sacute: 'Ś',
    Sc: '⪼',
    Scaron: 'Š',
    Scedil: 'Ş',
    Scirc: 'Ŝ',
    Scy: 'С',
    Sfr: '𝔖',
    ShortDownArrow: '↓',
    ShortLeftArrow: '←',
    ShortRightArrow: '→',
    ShortUpArrow: '↑',
    Sigma: 'Σ',
    SmallCircle: '∘',
    Sopf: '𝕊',
    Sqrt: '√',
    Square: '□',
    SquareIntersection: '⊓',
    SquareSubset: '⊏',
    SquareSubsetEqual: '⊑',
    SquareSuperset: '⊐',
    SquareSupersetEqual: '⊒',
    SquareUnion: '⊔',
    Sscr: '𝒮',
    Star: '⋆',
    Sub: '⋐',
    Subset: '⋐',
    SubsetEqual: '⊆',
    Succeeds: '≻',
    SucceedsEqual: '⪰',
    SucceedsSlantEqual: '≽',
    SucceedsTilde: '≿',
    SuchThat: '∋',
    Sum: '∑',
    Sup: '⋑',
    Superset: '⊃',
    SupersetEqual: '⊇',
    Supset: '⋑',
    THORN: 'Þ',
    TRADE: '™',
    TSHcy: 'Ћ',
    TScy: 'Ц',
    Tab: '\t',
    Tau: 'Τ',
    Tcaron: 'Ť',
    Tcedil: 'Ţ',
    Tcy: 'Т',
    Tfr: '𝔗',
    Therefore: '∴',
    Theta: 'Θ',
    ThickSpace: '  ',
    ThinSpace: ' ',
    Tilde: '∼',
    TildeEqual: '≃',
    TildeFullEqual: '≅',
    TildeTilde: '≈',
    Topf: '𝕋',
    TripleDot: '⃛',
    Tscr: '𝒯',
    Tstrok: 'Ŧ',
    Uacute: 'Ú',
    Uarr: '↟',
    Uarrocir: '⥉',
    Ubrcy: 'Ў',
    Ubreve: 'Ŭ',
    Ucirc: 'Û',
    Ucy: 'У',
    Udblac: 'Ű',
    Ufr: '𝔘',
    Ugrave: 'Ù',
    Umacr: 'Ū',
    UnderBar: '_',
    UnderBrace: '⏟',
    UnderBracket: '⎵',
    UnderParenthesis: '⏝',
    Union: '⋃',
    UnionPlus: '⊎',
    Uogon: 'Ų',
    Uopf: '𝕌',
    UpArrow: '↑',
    UpArrowBar: '⤒',
    UpArrowDownArrow: '⇅',
    UpDownArrow: '↕',
    UpEquilibrium: '⥮',
    UpTee: '⊥',
    UpTeeArrow: '↥',
    Uparrow: '⇑',
    Updownarrow: '⇕',
    UpperLeftArrow: '↖',
    UpperRightArrow: '↗',
    Upsi: 'ϒ',
    Upsilon: 'Υ',
    Uring: 'Ů',
    Uscr: '𝒰',
    Utilde: 'Ũ',
    Uuml: 'Ü',
    VDash: '⊫',
    Vbar: '⫫',
    Vcy: 'В',
    Vdash: '⊩',
    Vdashl: '⫦',
    Vee: '⋁',
    Verbar: '‖',
    Vert: '‖',
    VerticalBar: '∣',
    VerticalLine: '|',
    VerticalSeparator: '❘',
    VerticalTilde: '≀',
    VeryThinSpace: ' ',
    Vfr: '𝔙',
    Vopf: '𝕍',
    Vscr: '𝒱',
    Vvdash: '⊪',
    Wcirc: 'Ŵ',
    Wedge: '⋀',
    Wfr: '𝔚',
    Wopf: '𝕎',
    Wscr: '𝒲',
    Xfr: '𝔛',
    Xi: 'Ξ',
    Xopf: '𝕏',
    Xscr: '𝒳',
    YAcy: 'Я',
    YIcy: 'Ї',
    YUcy: 'Ю',
    Yacute: 'Ý',
    Ycirc: 'Ŷ',
    Ycy: 'Ы',
    Yfr: '𝔜',
    Yopf: '𝕐',
    Yscr: '𝒴',
    Yuml: 'Ÿ',
    ZHcy: 'Ж',
    Zacute: 'Ź',
    Zcaron: 'Ž',
    Zcy: 'З',
    Zdot: 'Ż',
    ZeroWidthSpace: '​',
    Zeta: 'Ζ',
    Zfr: 'ℨ',
    Zopf: 'ℤ',
    Zscr: '𝒵',
    aacute: 'á',
    abreve: 'ă',
    ac: '∾',
    acE: '∾̳',
    acd: '∿',
    acirc: 'â',
    acute: '´',
    acy: 'а',
    aelig: 'æ',
    af: '⁡',
    afr: '𝔞',
    agrave: 'à',
    alefsym: 'ℵ',
    aleph: 'ℵ',
    alpha: 'α',
    amacr: 'ā',
    amalg: '⨿',
    amp: '&',
    and: '∧',
    andand: '⩕',
    andd: '⩜',
    andslope: '⩘',
    andv: '⩚',
    ang: '∠',
    ange: '⦤',
    angle: '∠',
    angmsd: '∡',
    angmsdaa: '⦨',
    angmsdab: '⦩',
    angmsdac: '⦪',
    angmsdad: '⦫',
    angmsdae: '⦬',
    angmsdaf: '⦭',
    angmsdag: '⦮',
    angmsdah: '⦯',
    angrt: '∟',
    angrtvb: '⊾',
    angrtvbd: '⦝',
    angsph: '∢',
    angst: 'Å',
    angzarr: '⍼',
    aogon: 'ą',
    aopf: '𝕒',
    ap: '≈',
    apE: '⩰',
    apacir: '⩯',
    ape: '≊',
    apid: '≋',
    apos: "'",
    approx: '≈',
    approxeq: '≊',
    aring: 'å',
    ascr: '𝒶',
    ast: '*',
    asymp: '≈',
    asympeq: '≍',
    atilde: 'ã',
    auml: 'ä',
    awconint: '∳',
    awint: '⨑',
    bNot: '⫭',
    backcong: '≌',
    backepsilon: '϶',
    backprime: '‵',
    backsim: '∽',
    backsimeq: '⋍',
    barvee: '⊽',
    barwed: '⌅',
    barwedge: '⌅',
    bbrk: '⎵',
    bbrktbrk: '⎶',
    bcong: '≌',
    bcy: 'б',
    bdquo: '„',
    becaus: '∵',
    because: '∵',
    bemptyv: '⦰',
    bepsi: '϶',
    bernou: 'ℬ',
    beta: 'β',
    beth: 'ℶ',
    between: '≬',
    bfr: '𝔟',
    bigcap: '⋂',
    bigcirc: '◯',
    bigcup: '⋃',
    bigodot: '⨀',
    bigoplus: '⨁',
    bigotimes: '⨂',
    bigsqcup: '⨆',
    bigstar: '★',
    bigtriangledown: '▽',
    bigtriangleup: '△',
    biguplus: '⨄',
    bigvee: '⋁',
    bigwedge: '⋀',
    bkarow: '⤍',
    blacklozenge: '⧫',
    blacksquare: '▪',
    blacktriangle: '▴',
    blacktriangledown: '▾',
    blacktriangleleft: '◂',
    blacktriangleright: '▸',
    blank: '␣',
    blk12: '▒',
    blk14: '░',
    blk34: '▓',
    block: '█',
    bne: '=⃥',
    bnequiv: '≡⃥',
    bnot: '⌐',
    bopf: '𝕓',
    bot: '⊥',
    bottom: '⊥',
    bowtie: '⋈',
    boxDL: '╗',
    boxDR: '╔',
    boxDl: '╖',
    boxDr: '╓',
    boxH: '═',
    boxHD: '╦',
    boxHU: '╩',
    boxHd: '╤',
    boxHu: '╧',
    boxUL: '╝',
    boxUR: '╚',
    boxUl: '╜',
    boxUr: '╙',
    boxV: '║',
    boxVH: '╬',
    boxVL: '╣',
    boxVR: '╠',
    boxVh: '╫',
    boxVl: '╢',
    boxVr: '╟',
    boxbox: '⧉',
    boxdL: '╕',
    boxdR: '╒',
    boxdl: '┐',
    boxdr: '┌',
    boxh: '─',
    boxhD: '╥',
    boxhU: '╨',
    boxhd: '┬',
    boxhu: '┴',
    boxminus: '⊟',
    boxplus: '⊞',
    boxtimes: '⊠',
    boxuL: '╛',
    boxuR: '╘',
    boxul: '┘',
    boxur: '└',
    boxv: '│',
    boxvH: '╪',
    boxvL: '╡',
    boxvR: '╞',
    boxvh: '┼',
    boxvl: '┤',
    boxvr: '├',
    bprime: '‵',
    breve: '˘',
    brvbar: '¦',
    bscr: '𝒷',
    bsemi: '⁏',
    bsim: '∽',
    bsime: '⋍',
    bsol: '\\',
    bsolb: '⧅',
    bsolhsub: '⟈',
    bull: '•',
    bullet: '•',
    bump: '≎',
    bumpE: '⪮',
    bumpe: '≏',
    bumpeq: '≏',
    cacute: 'ć',
    cap: '∩',
    capand: '⩄',
    capbrcup: '⩉',
    capcap: '⩋',
    capcup: '⩇',
    capdot: '⩀',
    caps: '∩︀',
    caret: '⁁',
    caron: 'ˇ',
    ccaps: '⩍',
    ccaron: 'č',
    ccedil: 'ç',
    ccirc: 'ĉ',
    ccups: '⩌',
    ccupssm: '⩐',
    cdot: 'ċ',
    cedil: '¸',
    cemptyv: '⦲',
    cent: '¢',
    centerdot: '·',
    cfr: '𝔠',
    chcy: 'ч',
    check: '✓',
    checkmark: '✓',
    chi: 'χ',
    cir: '○',
    cirE: '⧃',
    circ: 'ˆ',
    circeq: '≗',
    circlearrowleft: '↺',
    circlearrowright: '↻',
    circledR: '®',
    circledS: 'Ⓢ',
    circledast: '⊛',
    circledcirc: '⊚',
    circleddash: '⊝',
    cire: '≗',
    cirfnint: '⨐',
    cirmid: '⫯',
    cirscir: '⧂',
    clubs: '♣',
    clubsuit: '♣',
    colon: ':',
    colone: '≔',
    coloneq: '≔',
    comma: ',',
    commat: '@',
    comp: '∁',
    compfn: '∘',
    complement: '∁',
    complexes: 'ℂ',
    cong: '≅',
    congdot: '⩭',
    conint: '∮',
    copf: '𝕔',
    coprod: '∐',
    copy: '©',
    copysr: '℗',
    crarr: '↵',
    cross: '✗',
    cscr: '𝒸',
    csub: '⫏',
    csube: '⫑',
    csup: '⫐',
    csupe: '⫒',
    ctdot: '⋯',
    cudarrl: '⤸',
    cudarrr: '⤵',
    cuepr: '⋞',
    cuesc: '⋟',
    cularr: '↶',
    cularrp: '⤽',
    cup: '∪',
    cupbrcap: '⩈',
    cupcap: '⩆',
    cupcup: '⩊',
    cupdot: '⊍',
    cupor: '⩅',
    cups: '∪︀',
    curarr: '↷',
    curarrm: '⤼',
    curlyeqprec: '⋞',
    curlyeqsucc: '⋟',
    curlyvee: '⋎',
    curlywedge: '⋏',
    curren: '¤',
    curvearrowleft: '↶',
    curvearrowright: '↷',
    cuvee: '⋎',
    cuwed: '⋏',
    cwconint: '∲',
    cwint: '∱',
    cylcty: '⌭',
    dArr: '⇓',
    dHar: '⥥',
    dagger: '†',
    daleth: 'ℸ',
    darr: '↓',
    dash: '‐',
    dashv: '⊣',
    dbkarow: '⤏',
    dblac: '˝',
    dcaron: 'ď',
    dcy: 'д',
    dd: 'ⅆ',
    ddagger: '‡',
    ddarr: '⇊',
    ddotseq: '⩷',
    deg: '°',
    delta: 'δ',
    demptyv: '⦱',
    dfisht: '⥿',
    dfr: '𝔡',
    dharl: '⇃',
    dharr: '⇂',
    diam: '⋄',
    diamond: '⋄',
    diamondsuit: '♦',
    diams: '♦',
    die: '¨',
    digamma: 'ϝ',
    disin: '⋲',
    div: '÷',
    divide: '÷',
    divideontimes: '⋇',
    divonx: '⋇',
    djcy: 'ђ',
    dlcorn: '⌞',
    dlcrop: '⌍',
    dollar: '$',
    dopf: '𝕕',
    dot: '˙',
    doteq: '≐',
    doteqdot: '≑',
    dotminus: '∸',
    dotplus: '∔',
    dotsquare: '⊡',
    doublebarwedge: '⌆',
    downarrow: '↓',
    downdownarrows: '⇊',
    downharpoonleft: '⇃',
    downharpoonright: '⇂',
    drbkarow: '⤐',
    drcorn: '⌟',
    drcrop: '⌌',
    dscr: '𝒹',
    dscy: 'ѕ',
    dsol: '⧶',
    dstrok: 'đ',
    dtdot: '⋱',
    dtri: '▿',
    dtrif: '▾',
    duarr: '⇵',
    duhar: '⥯',
    dwangle: '⦦',
    dzcy: 'џ',
    dzigrarr: '⟿',
    eDDot: '⩷',
    eDot: '≑',
    eacute: 'é',
    easter: '⩮',
    ecaron: 'ě',
    ecir: '≖',
    ecirc: 'ê',
    ecolon: '≕',
    ecy: 'э',
    edot: 'ė',
    ee: 'ⅇ',
    efDot: '≒',
    efr: '𝔢',
    eg: '⪚',
    egrave: 'è',
    egs: '⪖',
    egsdot: '⪘',
    el: '⪙',
    elinters: '⏧',
    ell: 'ℓ',
    els: '⪕',
    elsdot: '⪗',
    emacr: 'ē',
    empty: '∅',
    emptyset: '∅',
    emptyv: '∅',
    emsp13: ' ',
    emsp14: ' ',
    emsp: ' ',
    eng: 'ŋ',
    ensp: ' ',
    eogon: 'ę',
    eopf: '𝕖',
    epar: '⋕',
    eparsl: '⧣',
    eplus: '⩱',
    epsi: 'ε',
    epsilon: 'ε',
    epsiv: 'ϵ',
    eqcirc: '≖',
    eqcolon: '≕',
    eqsim: '≂',
    eqslantgtr: '⪖',
    eqslantless: '⪕',
    equals: '=',
    equest: '≟',
    equiv: '≡',
    equivDD: '⩸',
    eqvparsl: '⧥',
    erDot: '≓',
    erarr: '⥱',
    escr: 'ℯ',
    esdot: '≐',
    esim: '≂',
    eta: 'η',
    eth: 'ð',
    euml: 'ë',
    euro: '€',
    excl: '!',
    exist: '∃',
    expectation: 'ℰ',
    exponentiale: 'ⅇ',
    fallingdotseq: '≒',
    fcy: 'ф',
    female: '♀',
    ffilig: 'ﬃ',
    fflig: 'ﬀ',
    ffllig: 'ﬄ',
    ffr: '𝔣',
    filig: 'ﬁ',
    fjlig: 'fj',
    flat: '♭',
    fllig: 'ﬂ',
    fltns: '▱',
    fnof: 'ƒ',
    fopf: '𝕗',
    forall: '∀',
    fork: '⋔',
    forkv: '⫙',
    fpartint: '⨍',
    frac12: '½',
    frac13: '⅓',
    frac14: '¼',
    frac15: '⅕',
    frac16: '⅙',
    frac18: '⅛',
    frac23: '⅔',
    frac25: '⅖',
    frac34: '¾',
    frac35: '⅗',
    frac38: '⅜',
    frac45: '⅘',
    frac56: '⅚',
    frac58: '⅝',
    frac78: '⅞',
    frasl: '⁄',
    frown: '⌢',
    fscr: '𝒻',
    gE: '≧',
    gEl: '⪌',
    gacute: 'ǵ',
    gamma: 'γ',
    gammad: 'ϝ',
    gap: '⪆',
    gbreve: 'ğ',
    gcirc: 'ĝ',
    gcy: 'г',
    gdot: 'ġ',
    ge: '≥',
    gel: '⋛',
    geq: '≥',
    geqq: '≧',
    geqslant: '⩾',
    ges: '⩾',
    gescc: '⪩',
    gesdot: '⪀',
    gesdoto: '⪂',
    gesdotol: '⪄',
    gesl: '⋛︀',
    gesles: '⪔',
    gfr: '𝔤',
    gg: '≫',
    ggg: '⋙',
    gimel: 'ℷ',
    gjcy: 'ѓ',
    gl: '≷',
    glE: '⪒',
    gla: '⪥',
    glj: '⪤',
    gnE: '≩',
    gnap: '⪊',
    gnapprox: '⪊',
    gne: '⪈',
    gneq: '⪈',
    gneqq: '≩',
    gnsim: '⋧',
    gopf: '𝕘',
    grave: '`',
    gscr: 'ℊ',
    gsim: '≳',
    gsime: '⪎',
    gsiml: '⪐',
    gt: '>',
    gtcc: '⪧',
    gtcir: '⩺',
    gtdot: '⋗',
    gtlPar: '⦕',
    gtquest: '⩼',
    gtrapprox: '⪆',
    gtrarr: '⥸',
    gtrdot: '⋗',
    gtreqless: '⋛',
    gtreqqless: '⪌',
    gtrless: '≷',
    gtrsim: '≳',
    gvertneqq: '≩︀',
    gvnE: '≩︀',
    hArr: '⇔',
    hairsp: ' ',
    half: '½',
    hamilt: 'ℋ',
    hardcy: 'ъ',
    harr: '↔',
    harrcir: '⥈',
    harrw: '↭',
    hbar: 'ℏ',
    hcirc: 'ĥ',
    hearts: '♥',
    heartsuit: '♥',
    hellip: '…',
    hercon: '⊹',
    hfr: '𝔥',
    hksearow: '⤥',
    hkswarow: '⤦',
    hoarr: '⇿',
    homtht: '∻',
    hookleftarrow: '↩',
    hookrightarrow: '↪',
    hopf: '𝕙',
    horbar: '―',
    hscr: '𝒽',
    hslash: 'ℏ',
    hstrok: 'ħ',
    hybull: '⁃',
    hyphen: '‐',
    iacute: 'í',
    ic: '⁣',
    icirc: 'î',
    icy: 'и',
    iecy: 'е',
    iexcl: '¡',
    iff: '⇔',
    ifr: '𝔦',
    igrave: 'ì',
    ii: 'ⅈ',
    iiiint: '⨌',
    iiint: '∭',
    iinfin: '⧜',
    iiota: '℩',
    ijlig: 'ĳ',
    imacr: 'ī',
    image: 'ℑ',
    imagline: 'ℐ',
    imagpart: 'ℑ',
    imath: 'ı',
    imof: '⊷',
    imped: 'Ƶ',
    in: '∈',
    incare: '℅',
    infin: '∞',
    infintie: '⧝',
    inodot: 'ı',
    int: '∫',
    intcal: '⊺',
    integers: 'ℤ',
    intercal: '⊺',
    intlarhk: '⨗',
    intprod: '⨼',
    iocy: 'ё',
    iogon: 'į',
    iopf: '𝕚',
    iota: 'ι',
    iprod: '⨼',
    iquest: '¿',
    iscr: '𝒾',
    isin: '∈',
    isinE: '⋹',
    isindot: '⋵',
    isins: '⋴',
    isinsv: '⋳',
    isinv: '∈',
    it: '⁢',
    itilde: 'ĩ',
    iukcy: 'і',
    iuml: 'ï',
    jcirc: 'ĵ',
    jcy: 'й',
    jfr: '𝔧',
    jmath: 'ȷ',
    jopf: '𝕛',
    jscr: '𝒿',
    jsercy: 'ј',
    jukcy: 'є',
    kappa: 'κ',
    kappav: 'ϰ',
    kcedil: 'ķ',
    kcy: 'к',
    kfr: '𝔨',
    kgreen: 'ĸ',
    khcy: 'х',
    kjcy: 'ќ',
    kopf: '𝕜',
    kscr: '𝓀',
    lAarr: '⇚',
    lArr: '⇐',
    lAtail: '⤛',
    lBarr: '⤎',
    lE: '≦',
    lEg: '⪋',
    lHar: '⥢',
    lacute: 'ĺ',
    laemptyv: '⦴',
    lagran: 'ℒ',
    lambda: 'λ',
    lang: '⟨',
    langd: '⦑',
    langle: '⟨',
    lap: '⪅',
    laquo: '«',
    larr: '←',
    larrb: '⇤',
    larrbfs: '⤟',
    larrfs: '⤝',
    larrhk: '↩',
    larrlp: '↫',
    larrpl: '⤹',
    larrsim: '⥳',
    larrtl: '↢',
    lat: '⪫',
    latail: '⤙',
    late: '⪭',
    lates: '⪭︀',
    lbarr: '⤌',
    lbbrk: '❲',
    lbrace: '{',
    lbrack: '[',
    lbrke: '⦋',
    lbrksld: '⦏',
    lbrkslu: '⦍',
    lcaron: 'ľ',
    lcedil: 'ļ',
    lceil: '⌈',
    lcub: '{',
    lcy: 'л',
    ldca: '⤶',
    ldquo: '“',
    ldquor: '„',
    ldrdhar: '⥧',
    ldrushar: '⥋',
    ldsh: '↲',
    le: '≤',
    leftarrow: '←',
    leftarrowtail: '↢',
    leftharpoondown: '↽',
    leftharpoonup: '↼',
    leftleftarrows: '⇇',
    leftrightarrow: '↔',
    leftrightarrows: '⇆',
    leftrightharpoons: '⇋',
    leftrightsquigarrow: '↭',
    leftthreetimes: '⋋',
    leg: '⋚',
    leq: '≤',
    leqq: '≦',
    leqslant: '⩽',
    les: '⩽',
    lescc: '⪨',
    lesdot: '⩿',
    lesdoto: '⪁',
    lesdotor: '⪃',
    lesg: '⋚︀',
    lesges: '⪓',
    lessapprox: '⪅',
    lessdot: '⋖',
    lesseqgtr: '⋚',
    lesseqqgtr: '⪋',
    lessgtr: '≶',
    lesssim: '≲',
    lfisht: '⥼',
    lfloor: '⌊',
    lfr: '𝔩',
    lg: '≶',
    lgE: '⪑',
    lhard: '↽',
    lharu: '↼',
    lharul: '⥪',
    lhblk: '▄',
    ljcy: 'љ',
    ll: '≪',
    llarr: '⇇',
    llcorner: '⌞',
    llhard: '⥫',
    lltri: '◺',
    lmidot: 'ŀ',
    lmoust: '⎰',
    lmoustache: '⎰',
    lnE: '≨',
    lnap: '⪉',
    lnapprox: '⪉',
    lne: '⪇',
    lneq: '⪇',
    lneqq: '≨',
    lnsim: '⋦',
    loang: '⟬',
    loarr: '⇽',
    lobrk: '⟦',
    longleftarrow: '⟵',
    longleftrightarrow: '⟷',
    longmapsto: '⟼',
    longrightarrow: '⟶',
    looparrowleft: '↫',
    looparrowright: '↬',
    lopar: '⦅',
    lopf: '𝕝',
    loplus: '⨭',
    lotimes: '⨴',
    lowast: '∗',
    lowbar: '_',
    loz: '◊',
    lozenge: '◊',
    lozf: '⧫',
    lpar: '(',
    lparlt: '⦓',
    lrarr: '⇆',
    lrcorner: '⌟',
    lrhar: '⇋',
    lrhard: '⥭',
    lrm: '‎',
    lrtri: '⊿',
    lsaquo: '‹',
    lscr: '𝓁',
    lsh: '↰',
    lsim: '≲',
    lsime: '⪍',
    lsimg: '⪏',
    lsqb: '[',
    lsquo: '‘',
    lsquor: '‚',
    lstrok: 'ł',
    lt: '<',
    ltcc: '⪦',
    ltcir: '⩹',
    ltdot: '⋖',
    lthree: '⋋',
    ltimes: '⋉',
    ltlarr: '⥶',
    ltquest: '⩻',
    ltrPar: '⦖',
    ltri: '◃',
    ltrie: '⊴',
    ltrif: '◂',
    lurdshar: '⥊',
    luruhar: '⥦',
    lvertneqq: '≨︀',
    lvnE: '≨︀',
    mDDot: '∺',
    macr: '¯',
    male: '♂',
    malt: '✠',
    maltese: '✠',
    map: '↦',
    mapsto: '↦',
    mapstodown: '↧',
    mapstoleft: '↤',
    mapstoup: '↥',
    marker: '▮',
    mcomma: '⨩',
    mcy: 'м',
    mdash: '—',
    measuredangle: '∡',
    mfr: '𝔪',
    mho: '℧',
    micro: 'µ',
    mid: '∣',
    midast: '*',
    midcir: '⫰',
    middot: '·',
    minus: '−',
    minusb: '⊟',
    minusd: '∸',
    minusdu: '⨪',
    mlcp: '⫛',
    mldr: '…',
    mnplus: '∓',
    models: '⊧',
    mopf: '𝕞',
    mp: '∓',
    mscr: '𝓂',
    mstpos: '∾',
    mu: 'μ',
    multimap: '⊸',
    mumap: '⊸',
    nGg: '⋙̸',
    nGt: '≫⃒',
    nGtv: '≫̸',
    nLeftarrow: '⇍',
    nLeftrightarrow: '⇎',
    nLl: '⋘̸',
    nLt: '≪⃒',
    nLtv: '≪̸',
    nRightarrow: '⇏',
    nVDash: '⊯',
    nVdash: '⊮',
    nabla: '∇',
    nacute: 'ń',
    nang: '∠⃒',
    nap: '≉',
    napE: '⩰̸',
    napid: '≋̸',
    napos: 'ŉ',
    napprox: '≉',
    natur: '♮',
    natural: '♮',
    naturals: 'ℕ',
    nbsp: ' ',
    nbump: '≎̸',
    nbumpe: '≏̸',
    ncap: '⩃',
    ncaron: 'ň',
    ncedil: 'ņ',
    ncong: '≇',
    ncongdot: '⩭̸',
    ncup: '⩂',
    ncy: 'н',
    ndash: '–',
    ne: '≠',
    neArr: '⇗',
    nearhk: '⤤',
    nearr: '↗',
    nearrow: '↗',
    nedot: '≐̸',
    nequiv: '≢',
    nesear: '⤨',
    nesim: '≂̸',
    nexist: '∄',
    nexists: '∄',
    nfr: '𝔫',
    ngE: '≧̸',
    nge: '≱',
    ngeq: '≱',
    ngeqq: '≧̸',
    ngeqslant: '⩾̸',
    nges: '⩾̸',
    ngsim: '≵',
    ngt: '≯',
    ngtr: '≯',
    nhArr: '⇎',
    nharr: '↮',
    nhpar: '⫲',
    ni: '∋',
    nis: '⋼',
    nisd: '⋺',
    niv: '∋',
    njcy: 'њ',
    nlArr: '⇍',
    nlE: '≦̸',
    nlarr: '↚',
    nldr: '‥',
    nle: '≰',
    nleftarrow: '↚',
    nleftrightarrow: '↮',
    nleq: '≰',
    nleqq: '≦̸',
    nleqslant: '⩽̸',
    nles: '⩽̸',
    nless: '≮',
    nlsim: '≴',
    nlt: '≮',
    nltri: '⋪',
    nltrie: '⋬',
    nmid: '∤',
    nopf: '𝕟',
    not: '¬',
    notin: '∉',
    notinE: '⋹̸',
    notindot: '⋵̸',
    notinva: '∉',
    notinvb: '⋷',
    notinvc: '⋶',
    notni: '∌',
    notniva: '∌',
    notnivb: '⋾',
    notnivc: '⋽',
    npar: '∦',
    nparallel: '∦',
    nparsl: '⫽⃥',
    npart: '∂̸',
    npolint: '⨔',
    npr: '⊀',
    nprcue: '⋠',
    npre: '⪯̸',
    nprec: '⊀',
    npreceq: '⪯̸',
    nrArr: '⇏',
    nrarr: '↛',
    nrarrc: '⤳̸',
    nrarrw: '↝̸',
    nrightarrow: '↛',
    nrtri: '⋫',
    nrtrie: '⋭',
    nsc: '⊁',
    nsccue: '⋡',
    nsce: '⪰̸',
    nscr: '𝓃',
    nshortmid: '∤',
    nshortparallel: '∦',
    nsim: '≁',
    nsime: '≄',
    nsimeq: '≄',
    nsmid: '∤',
    nspar: '∦',
    nsqsube: '⋢',
    nsqsupe: '⋣',
    nsub: '⊄',
    nsubE: '⫅̸',
    nsube: '⊈',
    nsubset: '⊂⃒',
    nsubseteq: '⊈',
    nsubseteqq: '⫅̸',
    nsucc: '⊁',
    nsucceq: '⪰̸',
    nsup: '⊅',
    nsupE: '⫆̸',
    nsupe: '⊉',
    nsupset: '⊃⃒',
    nsupseteq: '⊉',
    nsupseteqq: '⫆̸',
    ntgl: '≹',
    ntilde: 'ñ',
    ntlg: '≸',
    ntriangleleft: '⋪',
    ntrianglelefteq: '⋬',
    ntriangleright: '⋫',
    ntrianglerighteq: '⋭',
    nu: 'ν',
    num: '#',
    numero: '№',
    numsp: ' ',
    nvDash: '⊭',
    nvHarr: '⤄',
    nvap: '≍⃒',
    nvdash: '⊬',
    nvge: '≥⃒',
    nvgt: '>⃒',
    nvinfin: '⧞',
    nvlArr: '⤂',
    nvle: '≤⃒',
    nvlt: '<⃒',
    nvltrie: '⊴⃒',
    nvrArr: '⤃',
    nvrtrie: '⊵⃒',
    nvsim: '∼⃒',
    nwArr: '⇖',
    nwarhk: '⤣',
    nwarr: '↖',
    nwarrow: '↖',
    nwnear: '⤧',
    oS: 'Ⓢ',
    oacute: 'ó',
    oast: '⊛',
    ocir: '⊚',
    ocirc: 'ô',
    ocy: 'о',
    odash: '⊝',
    odblac: 'ő',
    odiv: '⨸',
    odot: '⊙',
    odsold: '⦼',
    oelig: 'œ',
    ofcir: '⦿',
    ofr: '𝔬',
    ogon: '˛',
    ograve: 'ò',
    ogt: '⧁',
    ohbar: '⦵',
    ohm: 'Ω',
    oint: '∮',
    olarr: '↺',
    olcir: '⦾',
    olcross: '⦻',
    oline: '‾',
    olt: '⧀',
    omacr: 'ō',
    omega: 'ω',
    omicron: 'ο',
    omid: '⦶',
    ominus: '⊖',
    oopf: '𝕠',
    opar: '⦷',
    operp: '⦹',
    oplus: '⊕',
    or: '∨',
    orarr: '↻',
    ord: '⩝',
    order: 'ℴ',
    orderof: 'ℴ',
    ordf: 'ª',
    ordm: 'º',
    origof: '⊶',
    oror: '⩖',
    orslope: '⩗',
    orv: '⩛',
    oscr: 'ℴ',
    oslash: 'ø',
    osol: '⊘',
    otilde: 'õ',
    otimes: '⊗',
    otimesas: '⨶',
    ouml: 'ö',
    ovbar: '⌽',
    par: '∥',
    para: '¶',
    parallel: '∥',
    parsim: '⫳',
    parsl: '⫽',
    part: '∂',
    pcy: 'п',
    percnt: '%',
    period: '.',
    permil: '‰',
    perp: '⊥',
    pertenk: '‱',
    pfr: '𝔭',
    phi: 'φ',
    phiv: 'ϕ',
    phmmat: 'ℳ',
    phone: '☎',
    pi: 'π',
    pitchfork: '⋔',
    piv: 'ϖ',
    planck: 'ℏ',
    planckh: 'ℎ',
    plankv: 'ℏ',
    plus: '+',
    plusacir: '⨣',
    plusb: '⊞',
    pluscir: '⨢',
    plusdo: '∔',
    plusdu: '⨥',
    pluse: '⩲',
    plusmn: '±',
    plussim: '⨦',
    plustwo: '⨧',
    pm: '±',
    pointint: '⨕',
    popf: '𝕡',
    pound: '£',
    pr: '≺',
    prE: '⪳',
    prap: '⪷',
    prcue: '≼',
    pre: '⪯',
    prec: '≺',
    precapprox: '⪷',
    preccurlyeq: '≼',
    preceq: '⪯',
    precnapprox: '⪹',
    precneqq: '⪵',
    precnsim: '⋨',
    precsim: '≾',
    prime: '′',
    primes: 'ℙ',
    prnE: '⪵',
    prnap: '⪹',
    prnsim: '⋨',
    prod: '∏',
    profalar: '⌮',
    profline: '⌒',
    profsurf: '⌓',
    prop: '∝',
    propto: '∝',
    prsim: '≾',
    prurel: '⊰',
    pscr: '𝓅',
    psi: 'ψ',
    puncsp: ' ',
    qfr: '𝔮',
    qint: '⨌',
    qopf: '𝕢',
    qprime: '⁗',
    qscr: '𝓆',
    quaternions: 'ℍ',
    quatint: '⨖',
    quest: '?',
    questeq: '≟',
    quot: '"',
    rAarr: '⇛',
    rArr: '⇒',
    rAtail: '⤜',
    rBarr: '⤏',
    rHar: '⥤',
    race: '∽̱',
    racute: 'ŕ',
    radic: '√',
    raemptyv: '⦳',
    rang: '⟩',
    rangd: '⦒',
    range: '⦥',
    rangle: '⟩',
    raquo: '»',
    rarr: '→',
    rarrap: '⥵',
    rarrb: '⇥',
    rarrbfs: '⤠',
    rarrc: '⤳',
    rarrfs: '⤞',
    rarrhk: '↪',
    rarrlp: '↬',
    rarrpl: '⥅',
    rarrsim: '⥴',
    rarrtl: '↣',
    rarrw: '↝',
    ratail: '⤚',
    ratio: '∶',
    rationals: 'ℚ',
    rbarr: '⤍',
    rbbrk: '❳',
    rbrace: '}',
    rbrack: ']',
    rbrke: '⦌',
    rbrksld: '⦎',
    rbrkslu: '⦐',
    rcaron: 'ř',
    rcedil: 'ŗ',
    rceil: '⌉',
    rcub: '}',
    rcy: 'р',
    rdca: '⤷',
    rdldhar: '⥩',
    rdquo: '”',
    rdquor: '”',
    rdsh: '↳',
    real: 'ℜ',
    realine: 'ℛ',
    realpart: 'ℜ',
    reals: 'ℝ',
    rect: '▭',
    reg: '®',
    rfisht: '⥽',
    rfloor: '⌋',
    rfr: '𝔯',
    rhard: '⇁',
    rharu: '⇀',
    rharul: '⥬',
    rho: 'ρ',
    rhov: 'ϱ',
    rightarrow: '→',
    rightarrowtail: '↣',
    rightharpoondown: '⇁',
    rightharpoonup: '⇀',
    rightleftarrows: '⇄',
    rightleftharpoons: '⇌',
    rightrightarrows: '⇉',
    rightsquigarrow: '↝',
    rightthreetimes: '⋌',
    ring: '˚',
    risingdotseq: '≓',
    rlarr: '⇄',
    rlhar: '⇌',
    rlm: '‏',
    rmoust: '⎱',
    rmoustache: '⎱',
    rnmid: '⫮',
    roang: '⟭',
    roarr: '⇾',
    robrk: '⟧',
    ropar: '⦆',
    ropf: '𝕣',
    roplus: '⨮',
    rotimes: '⨵',
    rpar: ')',
    rpargt: '⦔',
    rppolint: '⨒',
    rrarr: '⇉',
    rsaquo: '›',
    rscr: '𝓇',
    rsh: '↱',
    rsqb: ']',
    rsquo: '’',
    rsquor: '’',
    rthree: '⋌',
    rtimes: '⋊',
    rtri: '▹',
    rtrie: '⊵',
    rtrif: '▸',
    rtriltri: '⧎',
    ruluhar: '⥨',
    rx: '℞',
    sacute: 'ś',
    sbquo: '‚',
    sc: '≻',
    scE: '⪴',
    scap: '⪸',
    scaron: 'š',
    sccue: '≽',
    sce: '⪰',
    scedil: 'ş',
    scirc: 'ŝ',
    scnE: '⪶',
    scnap: '⪺',
    scnsim: '⋩',
    scpolint: '⨓',
    scsim: '≿',
    scy: 'с',
    sdot: '⋅',
    sdotb: '⊡',
    sdote: '⩦',
    seArr: '⇘',
    searhk: '⤥',
    searr: '↘',
    searrow: '↘',
    sect: '§',
    semi: ';',
    seswar: '⤩',
    setminus: '∖',
    setmn: '∖',
    sext: '✶',
    sfr: '𝔰',
    sfrown: '⌢',
    sharp: '♯',
    shchcy: 'щ',
    shcy: 'ш',
    shortmid: '∣',
    shortparallel: '∥',
    shy: '­',
    sigma: 'σ',
    sigmaf: 'ς',
    sigmav: 'ς',
    sim: '∼',
    simdot: '⩪',
    sime: '≃',
    simeq: '≃',
    simg: '⪞',
    simgE: '⪠',
    siml: '⪝',
    simlE: '⪟',
    simne: '≆',
    simplus: '⨤',
    simrarr: '⥲',
    slarr: '←',
    smallsetminus: '∖',
    smashp: '⨳',
    smeparsl: '⧤',
    smid: '∣',
    smile: '⌣',
    smt: '⪪',
    smte: '⪬',
    smtes: '⪬︀',
    softcy: 'ь',
    sol: '/',
    solb: '⧄',
    solbar: '⌿',
    sopf: '𝕤',
    spades: '♠',
    spadesuit: '♠',
    spar: '∥',
    sqcap: '⊓',
    sqcaps: '⊓︀',
    sqcup: '⊔',
    sqcups: '⊔︀',
    sqsub: '⊏',
    sqsube: '⊑',
    sqsubset: '⊏',
    sqsubseteq: '⊑',
    sqsup: '⊐',
    sqsupe: '⊒',
    sqsupset: '⊐',
    sqsupseteq: '⊒',
    squ: '□',
    square: '□',
    squarf: '▪',
    squf: '▪',
    srarr: '→',
    sscr: '𝓈',
    ssetmn: '∖',
    ssmile: '⌣',
    sstarf: '⋆',
    star: '☆',
    starf: '★',
    straightepsilon: 'ϵ',
    straightphi: 'ϕ',
    strns: '¯',
    sub: '⊂',
    subE: '⫅',
    subdot: '⪽',
    sube: '⊆',
    subedot: '⫃',
    submult: '⫁',
    subnE: '⫋',
    subne: '⊊',
    subplus: '⪿',
    subrarr: '⥹',
    subset: '⊂',
    subseteq: '⊆',
    subseteqq: '⫅',
    subsetneq: '⊊',
    subsetneqq: '⫋',
    subsim: '⫇',
    subsub: '⫕',
    subsup: '⫓',
    succ: '≻',
    succapprox: '⪸',
    succcurlyeq: '≽',
    succeq: '⪰',
    succnapprox: '⪺',
    succneqq: '⪶',
    succnsim: '⋩',
    succsim: '≿',
    sum: '∑',
    sung: '♪',
    sup1: '¹',
    sup2: '²',
    sup3: '³',
    sup: '⊃',
    supE: '⫆',
    supdot: '⪾',
    supdsub: '⫘',
    supe: '⊇',
    supedot: '⫄',
    suphsol: '⟉',
    suphsub: '⫗',
    suplarr: '⥻',
    supmult: '⫂',
    supnE: '⫌',
    supne: '⊋',
    supplus: '⫀',
    supset: '⊃',
    supseteq: '⊇',
    supseteqq: '⫆',
    supsetneq: '⊋',
    supsetneqq: '⫌',
    supsim: '⫈',
    supsub: '⫔',
    supsup: '⫖',
    swArr: '⇙',
    swarhk: '⤦',
    swarr: '↙',
    swarrow: '↙',
    swnwar: '⤪',
    szlig: 'ß',
    target: '⌖',
    tau: 'τ',
    tbrk: '⎴',
    tcaron: 'ť',
    tcedil: 'ţ',
    tcy: 'т',
    tdot: '⃛',
    telrec: '⌕',
    tfr: '𝔱',
    there4: '∴',
    therefore: '∴',
    theta: 'θ',
    thetasym: 'ϑ',
    thetav: 'ϑ',
    thickapprox: '≈',
    thicksim: '∼',
    thinsp: ' ',
    thkap: '≈',
    thksim: '∼',
    thorn: 'þ',
    tilde: '˜',
    times: '×',
    timesb: '⊠',
    timesbar: '⨱',
    timesd: '⨰',
    tint: '∭',
    toea: '⤨',
    top: '⊤',
    topbot: '⌶',
    topcir: '⫱',
    topf: '𝕥',
    topfork: '⫚',
    tosa: '⤩',
    tprime: '‴',
    trade: '™',
    triangle: '▵',
    triangledown: '▿',
    triangleleft: '◃',
    trianglelefteq: '⊴',
    triangleq: '≜',
    triangleright: '▹',
    trianglerighteq: '⊵',
    tridot: '◬',
    trie: '≜',
    triminus: '⨺',
    triplus: '⨹',
    trisb: '⧍',
    tritime: '⨻',
    trpezium: '⏢',
    tscr: '𝓉',
    tscy: 'ц',
    tshcy: 'ћ',
    tstrok: 'ŧ',
    twixt: '≬',
    twoheadleftarrow: '↞',
    twoheadrightarrow: '↠',
    uArr: '⇑',
    uHar: '⥣',
    uacute: 'ú',
    uarr: '↑',
    ubrcy: 'ў',
    ubreve: 'ŭ',
    ucirc: 'û',
    ucy: 'у',
    udarr: '⇅',
    udblac: 'ű',
    udhar: '⥮',
    ufisht: '⥾',
    ufr: '𝔲',
    ugrave: 'ù',
    uharl: '↿',
    uharr: '↾',
    uhblk: '▀',
    ulcorn: '⌜',
    ulcorner: '⌜',
    ulcrop: '⌏',
    ultri: '◸',
    umacr: 'ū',
    uml: '¨',
    uogon: 'ų',
    uopf: '𝕦',
    uparrow: '↑',
    updownarrow: '↕',
    upharpoonleft: '↿',
    upharpoonright: '↾',
    uplus: '⊎',
    upsi: 'υ',
    upsih: 'ϒ',
    upsilon: 'υ',
    upuparrows: '⇈',
    urcorn: '⌝',
    urcorner: '⌝',
    urcrop: '⌎',
    uring: 'ů',
    urtri: '◹',
    uscr: '𝓊',
    utdot: '⋰',
    utilde: 'ũ',
    utri: '▵',
    utrif: '▴',
    uuarr: '⇈',
    uuml: 'ü',
    uwangle: '⦧',
    vArr: '⇕',
    vBar: '⫨',
    vBarv: '⫩',
    vDash: '⊨',
    vangrt: '⦜',
    varepsilon: 'ϵ',
    varkappa: 'ϰ',
    varnothing: '∅',
    varphi: 'ϕ',
    varpi: 'ϖ',
    varpropto: '∝',
    varr: '↕',
    varrho: 'ϱ',
    varsigma: 'ς',
    varsubsetneq: '⊊︀',
    varsubsetneqq: '⫋︀',
    varsupsetneq: '⊋︀',
    varsupsetneqq: '⫌︀',
    vartheta: 'ϑ',
    vartriangleleft: '⊲',
    vartriangleright: '⊳',
    vcy: 'в',
    vdash: '⊢',
    vee: '∨',
    veebar: '⊻',
    veeeq: '≚',
    vellip: '⋮',
    verbar: '|',
    vert: '|',
    vfr: '𝔳',
    vltri: '⊲',
    vnsub: '⊂⃒',
    vnsup: '⊃⃒',
    vopf: '𝕧',
    vprop: '∝',
    vrtri: '⊳',
    vscr: '𝓋',
    vsubnE: '⫋︀',
    vsubne: '⊊︀',
    vsupnE: '⫌︀',
    vsupne: '⊋︀',
    vzigzag: '⦚',
    wcirc: 'ŵ',
    wedbar: '⩟',
    wedge: '∧',
    wedgeq: '≙',
    weierp: '℘',
    wfr: '𝔴',
    wopf: '𝕨',
    wp: '℘',
    wr: '≀',
    wreath: '≀',
    wscr: '𝓌',
    xcap: '⋂',
    xcirc: '◯',
    xcup: '⋃',
    xdtri: '▽',
    xfr: '𝔵',
    xhArr: '⟺',
    xharr: '⟷',
    xi: 'ξ',
    xlArr: '⟸',
    xlarr: '⟵',
    xmap: '⟼',
    xnis: '⋻',
    xodot: '⨀',
    xopf: '𝕩',
    xoplus: '⨁',
    xotime: '⨂',
    xrArr: '⟹',
    xrarr: '⟶',
    xscr: '𝓍',
    xsqcup: '⨆',
    xuplus: '⨄',
    xutri: '△',
    xvee: '⋁',
    xwedge: '⋀',
    yacute: 'ý',
    yacy: 'я',
    ycirc: 'ŷ',
    ycy: 'ы',
    yen: '¥',
    yfr: '𝔶',
    yicy: 'ї',
    yopf: '𝕪',
    yscr: '𝓎',
    yucy: 'ю',
    yuml: 'ÿ',
    zacute: 'ź',
    zcaron: 'ž',
    zcy: 'з',
    zdot: 'ż',
    zeetrf: 'ℨ',
    zeta: 'ζ',
    zfr: '𝔷',
    zhcy: 'ж',
    zigrarr: '⇝',
    zopf: '𝕫',
    zscr: '𝓏',
    zwj: '‍',
    zwnj: '‌'
};

})()),
"[project]/node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "decodeNamedCharacterReference": ()=>decodeNamedCharacterReference
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$40$2$2e$0$2e$2$2f$node_modules$2f$character$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/character-entities@2.0.2/node_modules/character-entities/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const own = {}.hasOwnProperty;
function decodeNamedCharacterReference(value) {
    return own.call(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$40$2$2e$0$2e$2$2f$node_modules$2f$character$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterEntities"], value) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$40$2$2e$0$2e$2$2f$node_modules$2f$character$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterEntities"][value] : false;
}

})()),
"[project]/node_modules/.pnpm/micromark-util-normalize-identifier@1.1.0/node_modules/micromark-util-normalize-identifier/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "normalizeIdentifier": ()=>normalizeIdentifier
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/values.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function normalizeIdentifier(value) {
    return value// Collapse markdown whitespace.
    .replace(/[\t\n\r ]+/g, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].space)// Trim.
    .replace(/^ | $/g, '')// Some characters are considered “uppercase”, but if their lowercase
    // counterpart is uppercased will result in a different uppercase
    // character.
    // Hence, to get that form, we perform both lower- and uppercase.
    // Upper case makes sure keys will not interact with default prototypal
    // methods: no method is uppercase.
    .toLowerCase().toUpperCase();
}

})()),
"[project]/node_modules/.pnpm/micromark-util-normalize-identifier@2.0.0/node_modules/micromark-util-normalize-identifier/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "normalizeIdentifier": ()=>normalizeIdentifier
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function normalizeIdentifier(value) {
    return value// Collapse markdown whitespace.
    .replace(/[\t\n\r ]+/g, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].space)// Trim.
    .replace(/^ | $/g, '')// Some characters are considered “uppercase”, but if their lowercase
    // counterpart is uppercased will result in a different uppercase
    // character.
    // Hence, to get that form, we perform both lower- and uppercase.
    // Upper case makes sure keys will not interact with default prototypal
    // methods: no method is uppercase.
    .toLowerCase().toUpperCase();
}

})()),
"[project]/node_modules/.pnpm/micromark-util-decode-numeric-character-reference@1.1.0/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "decodeNumericCharacterReference": ()=>decodeNumericCharacterReference
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/values.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function decodeNumericCharacterReference(value, base) {
    const code = Number.parseInt(value, base);
    if (// C0 except for HT, LF, FF, CR, space.
    code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].ht || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].vt || code > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].cr && code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space || code > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].tilde && code < 160 || code > 55295 && code < 57344 || code > 64975 && code < 65008 || /* eslint-disable no-bitwise */ (code & 65535) === 65535 || (code & 65535) === 65534 || /* eslint-enable no-bitwise */ // Out of range
    code > 1114111) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].replacementCharacter;
    }
    return String.fromCharCode(code);
}

})()),
"[project]/node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.1/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "decodeNumericCharacterReference": ()=>decodeNumericCharacterReference
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function decodeNumericCharacterReference(value, base) {
    const code = Number.parseInt(value, base);
    if (// C0 except for HT, LF, FF, CR, space.
    code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].ht || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].vt || code > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].cr && code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space || code > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].tilde && code < 160 || code > 55_295 && code < 57_344 || code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */ (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */ // Out of range
    code > 1_114_111) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].replacementCharacter;
    }
    return String.fromCodePoint(code);
}

})()),
"[project]/node_modules/.pnpm/micromark-util-decode-string@1.1.0/node_modules/micromark-util-decode-string/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "decodeString": ()=>decodeString
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$decode$2d$named$2d$character$2d$reference$40$1$2e$0$2e$2$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-decode-numeric-character-reference@1.1.0/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/constants.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
const characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
}
/**
 * @param {string} $0
 * @param {string} $1
 * @param {string} $2
 * @returns {string}
 */ function decode($0, $1, $2) {
    if ($1) {
        // Escape.
        return $1;
    }
    // Reference.
    const head = $2.charCodeAt(0);
    if (head === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].numberSign) {
        const head = $2.charCodeAt(1);
        const hex = head === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseX || head === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseX;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["decodeNumericCharacterReference"]($2.slice(hex ? 2 : 1), hex ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseHexadecimal : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseDecimal);
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$decode$2d$named$2d$character$2d$reference$40$1$2e$0$2e$2$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["decodeNamedCharacterReference"]($2) || $0;
}

})()),
"[project]/node_modules/.pnpm/micromark-util-decode-string@2.0.0/node_modules/micromark-util-decode-string/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "decodeString": ()=>decodeString
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$decode$2d$named$2d$character$2d$reference$40$1$2e$0$2e$2$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.1/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
const characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
}
/**
 * @param {string} $0
 * @param {string} $1
 * @param {string} $2
 * @returns {string}
 */ function decode($0, $1, $2) {
    if ($1) {
        // Escape.
        return $1;
    }
    // Reference.
    const head = $2.charCodeAt(0);
    if (head === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].numberSign) {
        const head = $2.charCodeAt(1);
        const hex = head === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseX || head === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].uppercaseX;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$decode$2d$numeric$2d$character$2d$reference$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["decodeNumericCharacterReference"]($2.slice(hex ? 2 : 1), hex ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseHexadecimal : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseDecimal);
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$decode$2d$named$2d$character$2d$reference$40$1$2e$0$2e$2$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["decodeNamedCharacterReference"]($2) || $0;
}

})()),
"[project]/node_modules/.pnpm/kleur@4.1.5/node_modules/kleur/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
let FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY = true;
if (typeof process !== 'undefined') {
    ({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});
    isTTY = process.stdout && process.stdout.isTTY;
}
const $ = {
    enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== 'dumb' && (FORCE_COLOR != null && FORCE_COLOR !== '0' || isTTY),
    // modifiers
    reset: init(0, 0),
    bold: init(1, 22),
    dim: init(2, 22),
    italic: init(3, 23),
    underline: init(4, 24),
    inverse: init(7, 27),
    hidden: init(8, 28),
    strikethrough: init(9, 29),
    // colors
    black: init(30, 39),
    red: init(31, 39),
    green: init(32, 39),
    yellow: init(33, 39),
    blue: init(34, 39),
    magenta: init(35, 39),
    cyan: init(36, 39),
    white: init(37, 39),
    gray: init(90, 39),
    grey: init(90, 39),
    // background colors
    bgBlack: init(40, 49),
    bgRed: init(41, 49),
    bgGreen: init(42, 49),
    bgYellow: init(43, 49),
    bgBlue: init(44, 49),
    bgMagenta: init(45, 49),
    bgCyan: init(46, 49),
    bgWhite: init(47, 49)
};
function run(arr, str) {
    let i = 0, tmp, beg = '', end = '';
    for(; i < arr.length; i++){
        tmp = arr[i];
        beg += tmp.open;
        end += tmp.close;
        if (!!~str.indexOf(tmp.close)) {
            str = str.replace(tmp.rgx, tmp.close + tmp.open);
        }
    }
    return beg + str + end;
}
function chain(has, keys) {
    let ctx = {
        has,
        keys
    };
    ctx.reset = $.reset.bind(ctx);
    ctx.bold = $.bold.bind(ctx);
    ctx.dim = $.dim.bind(ctx);
    ctx.italic = $.italic.bind(ctx);
    ctx.underline = $.underline.bind(ctx);
    ctx.inverse = $.inverse.bind(ctx);
    ctx.hidden = $.hidden.bind(ctx);
    ctx.strikethrough = $.strikethrough.bind(ctx);
    ctx.black = $.black.bind(ctx);
    ctx.red = $.red.bind(ctx);
    ctx.green = $.green.bind(ctx);
    ctx.yellow = $.yellow.bind(ctx);
    ctx.blue = $.blue.bind(ctx);
    ctx.magenta = $.magenta.bind(ctx);
    ctx.cyan = $.cyan.bind(ctx);
    ctx.white = $.white.bind(ctx);
    ctx.gray = $.gray.bind(ctx);
    ctx.grey = $.grey.bind(ctx);
    ctx.bgBlack = $.bgBlack.bind(ctx);
    ctx.bgRed = $.bgRed.bind(ctx);
    ctx.bgGreen = $.bgGreen.bind(ctx);
    ctx.bgYellow = $.bgYellow.bind(ctx);
    ctx.bgBlue = $.bgBlue.bind(ctx);
    ctx.bgMagenta = $.bgMagenta.bind(ctx);
    ctx.bgCyan = $.bgCyan.bind(ctx);
    ctx.bgWhite = $.bgWhite.bind(ctx);
    return ctx;
}
function init(open, close) {
    let blk = {
        open: `\x1b[${open}m`,
        close: `\x1b[${close}m`,
        rgx: new RegExp(`\\x1b\\[${close}m`, 'g')
    };
    return function(txt) {
        if (this !== void 0 && this.has !== void 0) {
            !!~this.has.indexOf(open) || (this.has.push(open), this.keys.push(blk));
            return txt === void 0 ? this : $.enabled ? run(this.keys, txt + '') : txt + '';
        }
        return txt === void 0 ? chain([
            open
        ], [
            blk
        ]) : $.enabled ? run([
            blk
        ], txt + '') : txt + '';
    };
}
module.exports = $;

}.call(this) }),
"[project]/node_modules/.pnpm/kleur@4.1.5/node_modules/kleur/index.mjs [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "default": ()=>__TURBOPACK__default__export__
});
'use strict';
let FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY = true;
if (typeof process !== 'undefined') {
    ({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});
    isTTY = process.stdout && process.stdout.isTTY;
}
const $ = {
    enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== 'dumb' && (FORCE_COLOR != null && FORCE_COLOR !== '0' || isTTY),
    // modifiers
    reset: init(0, 0),
    bold: init(1, 22),
    dim: init(2, 22),
    italic: init(3, 23),
    underline: init(4, 24),
    inverse: init(7, 27),
    hidden: init(8, 28),
    strikethrough: init(9, 29),
    // colors
    black: init(30, 39),
    red: init(31, 39),
    green: init(32, 39),
    yellow: init(33, 39),
    blue: init(34, 39),
    magenta: init(35, 39),
    cyan: init(36, 39),
    white: init(37, 39),
    gray: init(90, 39),
    grey: init(90, 39),
    // background colors
    bgBlack: init(40, 49),
    bgRed: init(41, 49),
    bgGreen: init(42, 49),
    bgYellow: init(43, 49),
    bgBlue: init(44, 49),
    bgMagenta: init(45, 49),
    bgCyan: init(46, 49),
    bgWhite: init(47, 49)
};
function run(arr, str) {
    let i = 0, tmp, beg = '', end = '';
    for(; i < arr.length; i++){
        tmp = arr[i];
        beg += tmp.open;
        end += tmp.close;
        if (!!~str.indexOf(tmp.close)) {
            str = str.replace(tmp.rgx, tmp.close + tmp.open);
        }
    }
    return beg + str + end;
}
function chain(has, keys) {
    let ctx = {
        has,
        keys
    };
    ctx.reset = $.reset.bind(ctx);
    ctx.bold = $.bold.bind(ctx);
    ctx.dim = $.dim.bind(ctx);
    ctx.italic = $.italic.bind(ctx);
    ctx.underline = $.underline.bind(ctx);
    ctx.inverse = $.inverse.bind(ctx);
    ctx.hidden = $.hidden.bind(ctx);
    ctx.strikethrough = $.strikethrough.bind(ctx);
    ctx.black = $.black.bind(ctx);
    ctx.red = $.red.bind(ctx);
    ctx.green = $.green.bind(ctx);
    ctx.yellow = $.yellow.bind(ctx);
    ctx.blue = $.blue.bind(ctx);
    ctx.magenta = $.magenta.bind(ctx);
    ctx.cyan = $.cyan.bind(ctx);
    ctx.white = $.white.bind(ctx);
    ctx.gray = $.gray.bind(ctx);
    ctx.grey = $.grey.bind(ctx);
    ctx.bgBlack = $.bgBlack.bind(ctx);
    ctx.bgRed = $.bgRed.bind(ctx);
    ctx.bgGreen = $.bgGreen.bind(ctx);
    ctx.bgYellow = $.bgYellow.bind(ctx);
    ctx.bgBlue = $.bgBlue.bind(ctx);
    ctx.bgMagenta = $.bgMagenta.bind(ctx);
    ctx.bgCyan = $.bgCyan.bind(ctx);
    ctx.bgWhite = $.bgWhite.bind(ctx);
    return ctx;
}
function init(open, close) {
    let blk = {
        open: `\x1b[${open}m`,
        close: `\x1b[${close}m`,
        rgx: new RegExp(`\\x1b\\[${close}m`, 'g')
    };
    return function(txt) {
        if (this !== void 0 && this.has !== void 0) {
            !!~this.has.indexOf(open) || (this.has.push(open), this.keys.push(blk));
            return txt === void 0 ? this : $.enabled ? run(this.keys, txt + '') : txt + '';
        }
        return txt === void 0 ? chain([
            open
        ], [
            blk
        ]) : $.enabled ? run([
            blk
        ], txt + '') : txt + '';
    };
}
const __TURBOPACK__default__export__ = $;

})()),
"[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/diff/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

const kleur = __turbopack_require__("[project]/node_modules/.pnpm/kleur@4.1.5/node_modules/kleur/index.js [rsc] (ecmascript)");
const diff = __turbopack_require__("[project]/node_modules/.pnpm/diff@5.1.0/node_modules/diff/lib/index.js [rsc] (ecmascript)");
const colors = {
    '--': kleur.red,
    '··': kleur.grey,
    '++': kleur.green
};
const TITLE = kleur.dim().italic;
const TAB = kleur.dim('→'), SPACE = kleur.dim('·'), NL = kleur.dim('↵');
const LOG = (sym, str)=>colors[sym](sym + PRETTY(str)) + '\n';
const LINE = (num, x)=>kleur.dim('L' + String(num).padStart(x, '0') + ' ');
const PRETTY = (str)=>str.replace(/[ ]/g, SPACE).replace(/\t/g, TAB).replace(/(\r?\n)/g, NL);
function line(obj, prev, pad) {
    let char = obj.removed ? '--' : obj.added ? '++' : '··';
    let arr = obj.value.replace(/\r?\n$/, '').split('\n');
    let i = 0, tmp, out = '';
    if (obj.added) out += colors[char]().underline(TITLE('Expected:')) + '\n';
    else if (obj.removed) out += colors[char]().underline(TITLE('Actual:')) + '\n';
    for(; i < arr.length; i++){
        tmp = arr[i];
        if (tmp != null) {
            if (prev) out += LINE(prev + i, pad);
            out += LOG(char, tmp || '\n');
        }
    }
    return out;
}
// TODO: want better diffing
//~> complex items bail outright
function arrays(input, expect) {
    let arr = diff.diffArrays(input, expect);
    let i = 0, j = 0, k = 0, tmp, val, char, isObj, str;
    let out = LOG('··', '[');
    for(; i < arr.length; i++){
        char = (tmp = arr[i]).removed ? '--' : tmp.added ? '++' : '··';
        if (tmp.added) {
            out += colors[char]().underline(TITLE('Expected:')) + '\n';
        } else if (tmp.removed) {
            out += colors[char]().underline(TITLE('Actual:')) + '\n';
        }
        for(j = 0; j < tmp.value.length; j++){
            isObj = tmp.value[j] && typeof tmp.value[j] === 'object';
            val = stringify(tmp.value[j]).split(/\r?\n/g);
            for(k = 0; k < val.length;){
                str = '  ' + val[k++] + (isObj ? '' : ',');
                if (isObj && k === val.length && j + 1 < tmp.value.length) str += ',';
                out += LOG(char, str);
            }
        }
    }
    return out + LOG('··', ']');
}
function lines(input, expect, linenum = 0) {
    let i = 0, tmp, output = '';
    let arr = diff.diffLines(input, expect);
    let pad = String(expect.split(/\r?\n/g).length - linenum).length;
    for(; i < arr.length; i++){
        output += line(tmp = arr[i], linenum, pad);
        if (linenum && !tmp.removed) linenum += tmp.count;
    }
    return output;
}
function chars(input, expect) {
    let arr = diff.diffChars(input, expect);
    let i = 0, output = '', tmp;
    let l1 = input.length;
    let l2 = expect.length;
    let p1 = PRETTY(input);
    let p2 = PRETTY(expect);
    tmp = arr[i];
    if (l1 === l2) {
    // no length offsets
    } else if (tmp.removed && arr[i + 1]) {
        let del = tmp.count - arr[i + 1].count;
        if (del == 0) {
        // wash~
        } else if (del > 0) {
            expect = ' '.repeat(del) + expect;
            p2 = ' '.repeat(del) + p2;
            l2 += del;
        } else if (del < 0) {
            input = ' '.repeat(-del) + input;
            p1 = ' '.repeat(-del) + p1;
            l1 += -del;
        }
    }
    output += direct(p1, p2, l1, l2);
    if (l1 === l2) {
        for(tmp = '  '; i < l1; i++){
            tmp += input[i] === expect[i] ? ' ' : '^';
        }
    } else {
        for(tmp = '  '; i < arr.length; i++){
            tmp += (arr[i].added || arr[i].removed ? '^' : ' ').repeat(Math.max(arr[i].count, 0));
            if (i + 1 < arr.length && (arr[i].added && arr[i + 1].removed || arr[i].removed && arr[i + 1].added)) {
                arr[i + 1].count -= arr[i].count;
            }
        }
    }
    return output + kleur.red(tmp);
}
function direct(input, expect, lenA = String(input).length, lenB = String(expect).length) {
    let gutter = 4;
    let lenC = Math.max(lenA, lenB);
    let typeA = typeof input, typeB = typeof expect;
    if (typeA !== typeB) {
        gutter = 2;
        let delA = gutter + lenC - lenA;
        let delB = gutter + lenC - lenB;
        input += ' '.repeat(delA) + kleur.dim(`[${typeA}]`);
        expect += ' '.repeat(delB) + kleur.dim(`[${typeB}]`);
        lenA += delA + typeA.length + 2;
        lenB += delB + typeB.length + 2;
        lenC = Math.max(lenA, lenB);
    }
    let output = colors['++']('++' + expect + ' '.repeat(gutter + lenC - lenB) + TITLE('(Expected)')) + '\n';
    return output + colors['--']('--' + input + ' '.repeat(gutter + lenC - lenA) + TITLE('(Actual)')) + '\n';
}
function sort(input, expect) {
    var k, i = 0, tmp, isArr = Array.isArray(input);
    var keys = [], out = isArr ? Array(input.length) : {};
    if (isArr) {
        for(i = 0; i < out.length; i++){
            tmp = input[i];
            if (!tmp || typeof tmp !== 'object') out[i] = tmp;
            else out[i] = sort(tmp, expect[i]); // might not be right
        }
    } else {
        for(k in expect)keys.push(k);
        for(; i < keys.length; i++){
            if (Object.prototype.hasOwnProperty.call(input, k = keys[i])) {
                if (!(tmp = input[k]) || typeof tmp !== 'object') out[k] = tmp;
                else out[k] = sort(tmp, expect[k]);
            }
        }
        for(k in input){
            if (!out.hasOwnProperty(k)) {
                out[k] = input[k]; // expect didnt have
            }
        }
    }
    return out;
}
function circular() {
    var cache = new Set;
    return function print(key, val) {
        if (val === void 0) return '[__VOID__]';
        if (typeof val === 'number' && val !== val) return '[__NAN__]';
        if (typeof val === 'bigint') return val.toString();
        if (!val || typeof val !== 'object') return val;
        if (cache.has(val)) return '[Circular]';
        cache.add(val);
        return val;
    };
}
function stringify(input) {
    return JSON.stringify(input, circular(), 2).replace(/"\[__NAN__\]"/g, 'NaN').replace(/"\[__VOID__\]"/g, 'undefined');
}
function compare(input, expect) {
    if (Array.isArray(expect) && Array.isArray(input)) return arrays(input, expect);
    if (expect instanceof RegExp) return chars('' + input, '' + expect);
    let isA = input && typeof input == 'object';
    let isB = expect && typeof expect == 'object';
    if (isA && isB) input = sort(input, expect);
    if (isB) expect = stringify(expect);
    if (isA) input = stringify(input);
    if (expect && typeof expect == 'object') {
        input = stringify(sort(input, expect));
        expect = stringify(expect);
    }
    isA = typeof input == 'string';
    isB = typeof expect == 'string';
    if (isA && /\r?\n/.test(input)) return lines(input, '' + expect);
    if (isB && /\r?\n/.test(expect)) return lines('' + input, expect);
    if (isA && isB) return chars(input, expect);
    return direct(input, expect);
}
exports.arrays = arrays;
exports.chars = chars;
exports.circular = circular;
exports.compare = compare;
exports.direct = direct;
exports.lines = lines;
exports.sort = sort;
exports.stringify = stringify;

}.call(this) }),
"[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

const { dequal } = __turbopack_require__("[project]/node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.js [rsc] (ecmascript)");
const { compare, lines } = __turbopack_require__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/diff/index.js [rsc] (ecmascript)");
function dedent(str) {
    str = str.replace(/\r?\n/g, '\n');
    let arr = str.match(/^[ \t]*(?=\S)/gm);
    let i = 0, min = 1 / 0, len = (arr || []).length;
    for(; i < len; i++)min = Math.min(min, arr[i].length);
    return len && min ? str.replace(new RegExp(`^[ \\t]{${min}}`, 'gm'), '') : str;
}
class Assertion extends Error {
    constructor(opts = {}){
        super(opts.message);
        this.name = 'Assertion';
        this.code = 'ERR_ASSERTION';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
        this.details = opts.details || false;
        this.generated = !!opts.generated;
        this.operator = opts.operator;
        this.expects = opts.expects;
        this.actual = opts.actual;
    }
}
function assert(bool, actual, expects, operator, detailer, backup, msg) {
    if (bool) return;
    let message = msg || backup;
    if (msg instanceof Error) throw msg;
    let details = detailer && detailer(actual, expects);
    throw new Assertion({
        actual,
        expects,
        operator,
        message,
        details,
        generated: !msg
    });
}
function ok(val, msg) {
    assert(!!val, false, true, 'ok', false, 'Expected value to be truthy', msg);
}
function is(val, exp, msg) {
    assert(val === exp, val, exp, 'is', compare, 'Expected values to be strictly equal:', msg);
}
function equal(val, exp, msg) {
    assert(dequal(val, exp), val, exp, 'equal', compare, 'Expected values to be deeply equal:', msg);
}
function unreachable(msg) {
    assert(false, true, false, 'unreachable', false, 'Expected not to be reached!', msg);
}
function type(val, exp, msg) {
    let tmp = typeof val;
    assert(tmp === exp, tmp, exp, 'type', false, `Expected "${tmp}" to be "${exp}"`, msg);
}
function instance(val, exp, msg) {
    let name = '`' + (exp.name || exp.constructor.name) + '`';
    assert(val instanceof exp, val, exp, 'instance', false, `Expected value to be an instance of ${name}`, msg);
}
function match(val, exp, msg) {
    if (typeof exp === 'string') {
        assert(val.includes(exp), val, exp, 'match', false, `Expected value to include "${exp}" substring`, msg);
    } else {
        assert(exp.test(val), val, exp, 'match', false, `Expected value to match \`${String(exp)}\` pattern`, msg);
    }
}
function snapshot(val, exp, msg) {
    val = dedent(val);
    exp = dedent(exp);
    assert(val === exp, val, exp, 'snapshot', lines, 'Expected value to match snapshot:', msg);
}
const lineNums = (x, y)=>lines(x, y, 1);
function fixture(val, exp, msg) {
    val = dedent(val);
    exp = dedent(exp);
    assert(val === exp, val, exp, 'fixture', lineNums, 'Expected value to match fixture:', msg);
}
function throws(blk, exp, msg) {
    if (!msg && typeof exp === 'string') {
        msg = exp;
        exp = null;
    }
    try {
        blk();
        assert(false, false, true, 'throws', false, 'Expected function to throw', msg);
    } catch (err) {
        if (err instanceof Assertion) throw err;
        if (typeof exp === 'function') {
            assert(exp(err), false, true, 'throws', false, 'Expected function to throw matching exception', msg);
        } else if (exp instanceof RegExp) {
            assert(exp.test(err.message), false, true, 'throws', false, `Expected function to throw exception matching \`${String(exp)}\` pattern`, msg);
        }
    }
}
// ---
function not(val, msg) {
    assert(!val, true, false, 'not', false, 'Expected value to be falsey', msg);
}
not.ok = not;
is.not = function(val, exp, msg) {
    assert(val !== exp, val, exp, 'is.not', false, 'Expected values not to be strictly equal', msg);
};
not.equal = function(val, exp, msg) {
    assert(!dequal(val, exp), val, exp, 'not.equal', false, 'Expected values not to be deeply equal', msg);
};
not.type = function(val, exp, msg) {
    let tmp = typeof val;
    assert(tmp !== exp, tmp, exp, 'not.type', false, `Expected "${tmp}" not to be "${exp}"`, msg);
};
not.instance = function(val, exp, msg) {
    let name = '`' + (exp.name || exp.constructor.name) + '`';
    assert(!(val instanceof exp), val, exp, 'not.instance', false, `Expected value not to be an instance of ${name}`, msg);
};
not.snapshot = function(val, exp, msg) {
    val = dedent(val);
    exp = dedent(exp);
    assert(val !== exp, val, exp, 'not.snapshot', false, 'Expected value not to match snapshot', msg);
};
not.fixture = function(val, exp, msg) {
    val = dedent(val);
    exp = dedent(exp);
    assert(val !== exp, val, exp, 'not.fixture', false, 'Expected value not to match fixture', msg);
};
not.match = function(val, exp, msg) {
    if (typeof exp === 'string') {
        assert(!val.includes(exp), val, exp, 'not.match', false, `Expected value not to include "${exp}" substring`, msg);
    } else {
        assert(!exp.test(val), val, exp, 'not.match', false, `Expected value not to match \`${String(exp)}\` pattern`, msg);
    }
};
not.throws = function(blk, exp, msg) {
    if (!msg && typeof exp === 'string') {
        msg = exp;
        exp = null;
    }
    try {
        blk();
    } catch (err) {
        if (typeof exp === 'function') {
            assert(!exp(err), true, false, 'not.throws', false, 'Expected function not to throw matching exception', msg);
        } else if (exp instanceof RegExp) {
            assert(!exp.test(err.message), true, false, 'not.throws', false, `Expected function not to throw exception matching \`${String(exp)}\` pattern`, msg);
        } else if (!exp) {
            assert(false, true, false, 'not.throws', false, 'Expected function not to throw', msg);
        }
    }
};
exports.Assertion = Assertion;
exports.equal = equal;
exports.fixture = fixture;
exports.instance = instance;
exports.is = is;
exports.match = match;
exports.not = not;
exports.ok = ok;
exports.snapshot = snapshot;
exports.throws = throws;
exports.type = type;
exports.unreachable = unreachable;

}.call(this) }),
"[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/diff/index.mjs [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "arrays": ()=>arrays,
    "chars": ()=>chars,
    "circular": ()=>circular,
    "compare": ()=>compare,
    "direct": ()=>direct,
    "lines": ()=>lines,
    "sort": ()=>sort,
    "stringify": ()=>stringify
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/kleur@4.1.5/node_modules/kleur/index.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$diff$40$5$2e$1$2e$0$2f$node_modules$2f$diff$2f$lib$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/diff@5.1.0/node_modules/diff/lib/index.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
const colors = {
    '--': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].red,
    '··': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].grey,
    '++': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].green
};
const TITLE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].dim().italic;
const TAB = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].dim('→'), SPACE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].dim('·'), NL = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].dim('↵');
const LOG = (sym, str)=>colors[sym](sym + PRETTY(str)) + '\n';
const LINE = (num, x)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].dim('L' + String(num).padStart(x, '0') + ' ');
const PRETTY = (str)=>str.replace(/[ ]/g, SPACE).replace(/\t/g, TAB).replace(/(\r?\n)/g, NL);
function line(obj, prev, pad) {
    let char = obj.removed ? '--' : obj.added ? '++' : '··';
    let arr = obj.value.replace(/\r?\n$/, '').split('\n');
    let i = 0, tmp, out = '';
    if (obj.added) out += colors[char]().underline(TITLE('Expected:')) + '\n';
    else if (obj.removed) out += colors[char]().underline(TITLE('Actual:')) + '\n';
    for(; i < arr.length; i++){
        tmp = arr[i];
        if (tmp != null) {
            if (prev) out += LINE(prev + i, pad);
            out += LOG(char, tmp || '\n');
        }
    }
    return out;
}
function arrays(input, expect) {
    let arr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$diff$40$5$2e$1$2e$0$2f$node_modules$2f$diff$2f$lib$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__.diffArrays(input, expect);
    let i = 0, j = 0, k = 0, tmp, val, char, isObj, str;
    let out = LOG('··', '[');
    for(; i < arr.length; i++){
        char = (tmp = arr[i]).removed ? '--' : tmp.added ? '++' : '··';
        if (tmp.added) {
            out += colors[char]().underline(TITLE('Expected:')) + '\n';
        } else if (tmp.removed) {
            out += colors[char]().underline(TITLE('Actual:')) + '\n';
        }
        for(j = 0; j < tmp.value.length; j++){
            isObj = tmp.value[j] && typeof tmp.value[j] === 'object';
            val = stringify(tmp.value[j]).split(/\r?\n/g);
            for(k = 0; k < val.length;){
                str = '  ' + val[k++] + (isObj ? '' : ',');
                if (isObj && k === val.length && j + 1 < tmp.value.length) str += ',';
                out += LOG(char, str);
            }
        }
    }
    return out + LOG('··', ']');
}
function lines(input, expect, linenum = 0) {
    let i = 0, tmp, output = '';
    let arr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$diff$40$5$2e$1$2e$0$2f$node_modules$2f$diff$2f$lib$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__.diffLines(input, expect);
    let pad = String(expect.split(/\r?\n/g).length - linenum).length;
    for(; i < arr.length; i++){
        output += line(tmp = arr[i], linenum, pad);
        if (linenum && !tmp.removed) linenum += tmp.count;
    }
    return output;
}
function chars(input, expect) {
    let arr = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$diff$40$5$2e$1$2e$0$2f$node_modules$2f$diff$2f$lib$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__.diffChars(input, expect);
    let i = 0, output = '', tmp;
    let l1 = input.length;
    let l2 = expect.length;
    let p1 = PRETTY(input);
    let p2 = PRETTY(expect);
    tmp = arr[i];
    if (l1 === l2) {
    // no length offsets
    } else if (tmp.removed && arr[i + 1]) {
        let del = tmp.count - arr[i + 1].count;
        if (del == 0) {
        // wash~
        } else if (del > 0) {
            expect = ' '.repeat(del) + expect;
            p2 = ' '.repeat(del) + p2;
            l2 += del;
        } else if (del < 0) {
            input = ' '.repeat(-del) + input;
            p1 = ' '.repeat(-del) + p1;
            l1 += -del;
        }
    }
    output += direct(p1, p2, l1, l2);
    if (l1 === l2) {
        for(tmp = '  '; i < l1; i++){
            tmp += input[i] === expect[i] ? ' ' : '^';
        }
    } else {
        for(tmp = '  '; i < arr.length; i++){
            tmp += (arr[i].added || arr[i].removed ? '^' : ' ').repeat(Math.max(arr[i].count, 0));
            if (i + 1 < arr.length && (arr[i].added && arr[i + 1].removed || arr[i].removed && arr[i + 1].added)) {
                arr[i + 1].count -= arr[i].count;
            }
        }
    }
    return output + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].red(tmp);
}
function direct(input, expect, lenA = String(input).length, lenB = String(expect).length) {
    let gutter = 4;
    let lenC = Math.max(lenA, lenB);
    let typeA = typeof input, typeB = typeof expect;
    if (typeA !== typeB) {
        gutter = 2;
        let delA = gutter + lenC - lenA;
        let delB = gutter + lenC - lenB;
        input += ' '.repeat(delA) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].dim(`[${typeA}]`);
        expect += ' '.repeat(delB) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$kleur$40$4$2e$1$2e$5$2f$node_modules$2f$kleur$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"].dim(`[${typeB}]`);
        lenA += delA + typeA.length + 2;
        lenB += delB + typeB.length + 2;
        lenC = Math.max(lenA, lenB);
    }
    let output = colors['++']('++' + expect + ' '.repeat(gutter + lenC - lenB) + TITLE('(Expected)')) + '\n';
    return output + colors['--']('--' + input + ' '.repeat(gutter + lenC - lenA) + TITLE('(Actual)')) + '\n';
}
function sort(input, expect) {
    var k, i = 0, tmp, isArr = Array.isArray(input);
    var keys = [], out = isArr ? Array(input.length) : {};
    if (isArr) {
        for(i = 0; i < out.length; i++){
            tmp = input[i];
            if (!tmp || typeof tmp !== 'object') out[i] = tmp;
            else out[i] = sort(tmp, expect[i]); // might not be right
        }
    } else {
        for(k in expect)keys.push(k);
        for(; i < keys.length; i++){
            if (Object.prototype.hasOwnProperty.call(input, k = keys[i])) {
                if (!(tmp = input[k]) || typeof tmp !== 'object') out[k] = tmp;
                else out[k] = sort(tmp, expect[k]);
            }
        }
        for(k in input){
            if (!out.hasOwnProperty(k)) {
                out[k] = input[k]; // expect didnt have
            }
        }
    }
    return out;
}
function circular() {
    var cache = new Set;
    return function print(key, val) {
        if (val === void 0) return '[__VOID__]';
        if (typeof val === 'number' && val !== val) return '[__NAN__]';
        if (typeof val === 'bigint') return val.toString();
        if (!val || typeof val !== 'object') return val;
        if (cache.has(val)) return '[Circular]';
        cache.add(val);
        return val;
    };
}
function stringify(input) {
    return JSON.stringify(input, circular(), 2).replace(/"\[__NAN__\]"/g, 'NaN').replace(/"\[__VOID__\]"/g, 'undefined');
}
function compare(input, expect) {
    if (Array.isArray(expect) && Array.isArray(input)) return arrays(input, expect);
    if (expect instanceof RegExp) return chars('' + input, '' + expect);
    let isA = input && typeof input == 'object';
    let isB = expect && typeof expect == 'object';
    if (isA && isB) input = sort(input, expect);
    if (isB) expect = stringify(expect);
    if (isA) input = stringify(input);
    if (expect && typeof expect == 'object') {
        input = stringify(sort(input, expect));
        expect = stringify(expect);
    }
    isA = typeof input == 'string';
    isB = typeof expect == 'string';
    if (isA && /\r?\n/.test(input)) return lines(input, '' + expect);
    if (isB && /\r?\n/.test(expect)) return lines('' + input, expect);
    if (isA && isB) return chars(input, expect);
    return direct(input, expect);
}

})()),
"[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Assertion": ()=>Assertion,
    "equal": ()=>equal,
    "fixture": ()=>fixture,
    "instance": ()=>instance,
    "is": ()=>is,
    "match": ()=>match,
    "not": ()=>not,
    "ok": ()=>ok,
    "snapshot": ()=>snapshot,
    "throws": ()=>throws,
    "type": ()=>type,
    "unreachable": ()=>unreachable
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$dequal$40$2$2e$0$2e$3$2f$node_modules$2f$dequal$2f$dist$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$diff$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/diff/index.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function dedent(str) {
    str = str.replace(/\r?\n/g, '\n');
    let arr = str.match(/^[ \t]*(?=\S)/gm);
    let i = 0, min = 1 / 0, len = (arr || []).length;
    for(; i < len; i++)min = Math.min(min, arr[i].length);
    return len && min ? str.replace(new RegExp(`^[ \\t]{${min}}`, 'gm'), '') : str;
}
class Assertion extends Error {
    constructor(opts = {}){
        super(opts.message);
        this.name = 'Assertion';
        this.code = 'ERR_ASSERTION';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
        this.details = opts.details || false;
        this.generated = !!opts.generated;
        this.operator = opts.operator;
        this.expects = opts.expects;
        this.actual = opts.actual;
    }
}
function assert(bool, actual, expects, operator, detailer, backup, msg) {
    if (bool) return;
    let message = msg || backup;
    if (msg instanceof Error) throw msg;
    let details = detailer && detailer(actual, expects);
    throw new Assertion({
        actual,
        expects,
        operator,
        message,
        details,
        generated: !msg
    });
}
function ok(val, msg) {
    assert(!!val, false, true, 'ok', false, 'Expected value to be truthy', msg);
}
function is(val, exp, msg) {
    assert(val === exp, val, exp, 'is', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$diff$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["compare"], 'Expected values to be strictly equal:', msg);
}
function equal(val, exp, msg) {
    assert(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$dequal$40$2$2e$0$2e$3$2f$node_modules$2f$dequal$2f$dist$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["dequal"](val, exp), val, exp, 'equal', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$diff$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["compare"], 'Expected values to be deeply equal:', msg);
}
function unreachable(msg) {
    assert(false, true, false, 'unreachable', false, 'Expected not to be reached!', msg);
}
function type(val, exp, msg) {
    let tmp = typeof val;
    assert(tmp === exp, tmp, exp, 'type', false, `Expected "${tmp}" to be "${exp}"`, msg);
}
function instance(val, exp, msg) {
    let name = '`' + (exp.name || exp.constructor.name) + '`';
    assert(val instanceof exp, val, exp, 'instance', false, `Expected value to be an instance of ${name}`, msg);
}
function match(val, exp, msg) {
    if (typeof exp === 'string') {
        assert(val.includes(exp), val, exp, 'match', false, `Expected value to include "${exp}" substring`, msg);
    } else {
        assert(exp.test(val), val, exp, 'match', false, `Expected value to match \`${String(exp)}\` pattern`, msg);
    }
}
function snapshot(val, exp, msg) {
    val = dedent(val);
    exp = dedent(exp);
    assert(val === exp, val, exp, 'snapshot', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$diff$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["lines"], 'Expected value to match snapshot:', msg);
}
const lineNums = (x, y)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$diff$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["lines"](x, y, 1);
function fixture(val, exp, msg) {
    val = dedent(val);
    exp = dedent(exp);
    assert(val === exp, val, exp, 'fixture', lineNums, 'Expected value to match fixture:', msg);
}
function throws(blk, exp, msg) {
    if (!msg && typeof exp === 'string') {
        msg = exp;
        exp = null;
    }
    try {
        blk();
        assert(false, false, true, 'throws', false, 'Expected function to throw', msg);
    } catch (err) {
        if (err instanceof Assertion) throw err;
        if (typeof exp === 'function') {
            assert(exp(err), false, true, 'throws', false, 'Expected function to throw matching exception', msg);
        } else if (exp instanceof RegExp) {
            assert(exp.test(err.message), false, true, 'throws', false, `Expected function to throw exception matching \`${String(exp)}\` pattern`, msg);
        }
    }
}
function not(val, msg) {
    assert(!val, true, false, 'not', false, 'Expected value to be falsey', msg);
}
not.ok = not;
is.not = function(val, exp, msg) {
    assert(val !== exp, val, exp, 'is.not', false, 'Expected values not to be strictly equal', msg);
};
not.equal = function(val, exp, msg) {
    assert(!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$dequal$40$2$2e$0$2e$3$2f$node_modules$2f$dequal$2f$dist$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["dequal"](val, exp), val, exp, 'not.equal', false, 'Expected values not to be deeply equal', msg);
};
not.type = function(val, exp, msg) {
    let tmp = typeof val;
    assert(tmp !== exp, tmp, exp, 'not.type', false, `Expected "${tmp}" not to be "${exp}"`, msg);
};
not.instance = function(val, exp, msg) {
    let name = '`' + (exp.name || exp.constructor.name) + '`';
    assert(!(val instanceof exp), val, exp, 'not.instance', false, `Expected value not to be an instance of ${name}`, msg);
};
not.snapshot = function(val, exp, msg) {
    val = dedent(val);
    exp = dedent(exp);
    assert(val !== exp, val, exp, 'not.snapshot', false, 'Expected value not to match snapshot', msg);
};
not.fixture = function(val, exp, msg) {
    val = dedent(val);
    exp = dedent(exp);
    assert(val !== exp, val, exp, 'not.fixture', false, 'Expected value not to match fixture', msg);
};
not.match = function(val, exp, msg) {
    if (typeof exp === 'string') {
        assert(!val.includes(exp), val, exp, 'not.match', false, `Expected value not to include "${exp}" substring`, msg);
    } else {
        assert(!exp.test(val), val, exp, 'not.match', false, `Expected value not to match \`${String(exp)}\` pattern`, msg);
    }
};
not.throws = function(blk, exp, msg) {
    if (!msg && typeof exp === 'string') {
        msg = exp;
        exp = null;
    }
    try {
        blk();
    } catch (err) {
        if (typeof exp === 'function') {
            assert(!exp(err), true, false, 'not.throws', false, 'Expected function not to throw matching exception', msg);
        } else if (exp instanceof RegExp) {
            assert(!exp.test(err.message), true, false, 'not.throws', false, `Expected function not to throw exception matching \`${String(exp)}\` pattern`, msg);
        } else if (!exp) {
            assert(false, true, false, 'not.throws', false, 'Expected function not to throw', msg);
        }
    }
};

})()),
"[project]/node_modules/.pnpm/micromark-util-chunked@1.1.0/node_modules/micromark-util-chunked/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "push": ()=>push,
    "splice": ()=>splice
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/constants.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function splice(list, start, remove, items) {
    const end = list.length;
    let chunkStart = 0;
    /** @type {Array<unknown>} */ let parameters;
    // Make start between zero and `end` (included).
    if (start < 0) {
        start = -start > end ? 0 : end + start;
    } else {
        start = start > end ? end : start;
    }
    remove = remove > 0 ? remove : 0;
    // No need to chunk the items if there’s only a couple (10k) items.
    if (items.length < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize) {
        parameters = Array.from(items);
        parameters.unshift(start, remove);
        // @ts-expect-error Hush, it’s fine.
        list.splice(...parameters);
    } else {
        // Delete `remove` items starting from `start`
        if (remove) list.splice(start, remove);
        // Insert the items in chunks to not cause stack overflows.
        while(chunkStart < items.length){
            parameters = items.slice(chunkStart, chunkStart + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize);
            parameters.unshift(start, 0);
            // @ts-expect-error Hush, it’s fine.
            list.splice(...parameters);
            chunkStart += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize;
            start += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize;
        }
    }
}
function push(list, items) {
    if (list.length > 0) {
        splice(list, list.length, 0, items);
        return list;
    }
    return items;
}

})()),
"[project]/node_modules/.pnpm/micromark-util-chunked@2.0.0/node_modules/micromark-util-chunked/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "push": ()=>push,
    "splice": ()=>splice
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function splice(list, start, remove, items) {
    const end = list.length;
    let chunkStart = 0;
    /** @type {Array<unknown>} */ let parameters;
    // Make start between zero and `end` (included).
    if (start < 0) {
        start = -start > end ? 0 : end + start;
    } else {
        start = start > end ? end : start;
    }
    remove = remove > 0 ? remove : 0;
    // No need to chunk the items if there’s only a couple (10k) items.
    if (items.length < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize) {
        parameters = Array.from(items);
        parameters.unshift(start, remove);
        // @ts-expect-error Hush, it’s fine.
        list.splice(...parameters);
    } else {
        // Delete `remove` items starting from `start`
        if (remove) list.splice(start, remove);
        // Insert the items in chunks to not cause stack overflows.
        while(chunkStart < items.length){
            parameters = items.slice(chunkStart, chunkStart + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize);
            parameters.unshift(start, 0);
            // @ts-expect-error Hush, it’s fine.
            list.splice(...parameters);
            chunkStart += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize;
            start += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].v8MaxSafeChunkSize;
        }
    }
}
function push(list, items) {
    if (list.length > 0) {
        splice(list, list.length, 0, items);
        return list;
    }
    return items;
}

})()),
"[project]/node_modules/.pnpm/micromark-util-subtokenize@1.1.0/node_modules/micromark-util-subtokenize/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Token} Token
 */ __turbopack_esm__({
    "subtokenize": ()=>subtokenize
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-chunked@1.1.0/node_modules/micromark-util-chunked/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
function subtokenize(events) {
    /** @type {Record<string, number>} */ const jumps = {};
    let index = -1;
    /** @type {Event} */ let event;
    /** @type {number | undefined} */ let lineIndex;
    /** @type {number} */ let otherIndex;
    /** @type {Event} */ let otherEvent;
    /** @type {Array<Event>} */ let parameters;
    /** @type {Array<Event>} */ let subevents;
    /** @type {boolean | undefined} */ let more;
    while(++index < events.length){
        while(index in jumps){
            index = jumps[index];
        }
        event = events[index];
        // Add a hook for the GFM tasklist extension, which needs to know if text
        // is in the first content of a list item.
        if (index && event[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkFlow && events[index - 1][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].listItemPrefix) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](event[1]._tokenizer, 'expected `_tokenizer` on subtokens');
            subevents = event[1]._tokenizer.events;
            otherIndex = 0;
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank) {
                otherIndex += 2;
            }
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].content) {
                while(++otherIndex < subevents.length){
                    if (subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].content) {
                        break;
                    }
                    if (subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkText) {
                        subevents[otherIndex][1]._isInFirstContentOfListItem = true;
                        otherIndex++;
                    }
                }
            }
        }
        // Enter.
        if (event[0] === 'enter') {
            if (event[1].contentType) {
                Object.assign(jumps, subcontent(events, index));
                index = jumps[index];
                more = true;
            }
        } else if (event[1]._container) {
            otherIndex = index;
            lineIndex = undefined;
            while(otherIndex--){
                otherEvent = events[otherIndex];
                if (otherEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || otherEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank) {
                    if (otherEvent[0] === 'enter') {
                        if (lineIndex) {
                            events[lineIndex][1].type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank;
                        }
                        otherEvent[1].type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding;
                        lineIndex = otherIndex;
                    }
                } else {
                    break;
                }
            }
            if (lineIndex) {
                // Fix position.
                event[1].end = Object.assign({}, events[lineIndex][1].start);
                // Switch container exit w/ line endings.
                parameters = events.slice(lineIndex, index);
                parameters.unshift(event);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["splice"](events, lineIndex, index - lineIndex + 1, parameters);
            }
        }
    }
    return !more;
}
/**
 * Tokenize embedded tokens.
 *
 * @param {Array<Event>} events
 * @param {number} eventIndex
 * @returns {Record<string, number>}
 */ function subcontent(events, eventIndex) {
    const token = events[eventIndex][1];
    const context = events[eventIndex][2];
    let startPosition = eventIndex - 1;
    /** @type {Array<number>} */ const startPositions = [];
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](token.contentType, 'expected `contentType` on subtokens');
    const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    /** @type {Array<[number, number]>} */ const jumps = [];
    /** @type {Record<string, number>} */ const gaps = {};
    /** @type {Array<Chunk>} */ let stream;
    /** @type {Token | undefined} */ let previous;
    let index = -1;
    /** @type {Token | undefined} */ let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [
        start
    ];
    // Loop forward through the linked tokens to pass them in order to the
    // subtokenizer.
    while(current){
        // Find the position of the event for this token.
        while(events[++startPosition][1] !== current){
        // Empty.
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](!previous || current.previous === previous, 'expected previous to match');
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](!previous || previous.next === current, 'expected next to match');
        startPositions.push(startPosition);
        if (!current._tokenizer) {
            stream = context.sliceStream(current);
            if (!current.next) {
                stream.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof);
            }
            if (previous) {
                tokenizer.defineSkip(current.start);
            }
            if (current._isInFirstContentOfListItem) {
                tokenizer._gfmTasklistFirstContentOfListItem = true;
            }
            tokenizer.write(stream);
            if (current._isInFirstContentOfListItem) {
                tokenizer._gfmTasklistFirstContentOfListItem = undefined;
            }
        }
        // Unravel the next token.
        previous = current;
        current = current.next;
    }
    // Now, loop back through all events (and linked tokens), to figure out which
    // parts belong where.
    current = token;
    while(++index < childEvents.length){
        if (// Find a void token that includes a break.
        childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](current, 'expected a current token');
            start = index + 1;
            breaks.push(start);
            // Help GC.
            current._tokenizer = undefined;
            current.previous = undefined;
            current = current.next;
        }
    }
    // Help GC.
    tokenizer.events = [];
    // If there’s one more token (which is the cases for lines that end in an
    // EOF), that’s perfect: the last point we found starts it.
    // If there isn’t then make sure any remaining content is added to it.
    if (current) {
        // Help GC.
        current._tokenizer = undefined;
        current.previous = undefined;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](!current.next, 'expected no next token');
    } else {
        breaks.pop();
    }
    // Now splice the events from the subtokenizer into the current events,
    // moving back to front so that splice indices aren’t affected.
    index = breaks.length;
    while(index--){
        const slice = childEvents.slice(breaks[index], breaks[index + 1]);
        const start = startPositions.pop();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](start !== undefined, 'expected a start position when splicing');
        jumps.unshift([
            start,
            start + slice.length - 1
        ]);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["splice"](events, start, 2, slice);
    }
    index = -1;
    while(++index < jumps.length){
        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
        adjust += jumps[index][1] - jumps[index][0] - 1;
    }
    return gaps;
}

})()),
"[project]/node_modules/.pnpm/micromark-util-subtokenize@2.0.0/node_modules/micromark-util-subtokenize/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Token} Token
 */ __turbopack_esm__({
    "subtokenize": ()=>subtokenize
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-chunked@2.0.0/node_modules/micromark-util-chunked/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function subtokenize(events) {
    /** @type {Record<string, number>} */ const jumps = {};
    let index = -1;
    /** @type {Event} */ let event;
    /** @type {number | undefined} */ let lineIndex;
    /** @type {number} */ let otherIndex;
    /** @type {Event} */ let otherEvent;
    /** @type {Array<Event>} */ let parameters;
    /** @type {Array<Event>} */ let subevents;
    /** @type {boolean | undefined} */ let more;
    while(++index < events.length){
        while(index in jumps){
            index = jumps[index];
        }
        event = events[index];
        // Add a hook for the GFM tasklist extension, which needs to know if text
        // is in the first content of a list item.
        if (index && event[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkFlow && events[index - 1][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].listItemPrefix) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](event[1]._tokenizer, 'expected `_tokenizer` on subtokens');
            subevents = event[1]._tokenizer.events;
            otherIndex = 0;
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank) {
                otherIndex += 2;
            }
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].content) {
                while(++otherIndex < subevents.length){
                    if (subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].content) {
                        break;
                    }
                    if (subevents[otherIndex][1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkText) {
                        subevents[otherIndex][1]._isInFirstContentOfListItem = true;
                        otherIndex++;
                    }
                }
            }
        }
        // Enter.
        if (event[0] === 'enter') {
            if (event[1].contentType) {
                Object.assign(jumps, subcontent(events, index));
                index = jumps[index];
                more = true;
            }
        } else if (event[1]._container) {
            otherIndex = index;
            lineIndex = undefined;
            while(otherIndex--){
                otherEvent = events[otherIndex];
                if (otherEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || otherEvent[1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank) {
                    if (otherEvent[0] === 'enter') {
                        if (lineIndex) {
                            events[lineIndex][1].type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank;
                        }
                        otherEvent[1].type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding;
                        lineIndex = otherIndex;
                    }
                } else {
                    break;
                }
            }
            if (lineIndex) {
                // Fix position.
                event[1].end = Object.assign({}, events[lineIndex][1].start);
                // Switch container exit w/ line endings.
                parameters = events.slice(lineIndex, index);
                parameters.unshift(event);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["splice"](events, lineIndex, index - lineIndex + 1, parameters);
            }
        }
    }
    return !more;
}
/**
 * Tokenize embedded tokens.
 *
 * @param {Array<Event>} events
 * @param {number} eventIndex
 * @returns {Record<string, number>}
 */ function subcontent(events, eventIndex) {
    const token = events[eventIndex][1];
    const context = events[eventIndex][2];
    let startPosition = eventIndex - 1;
    /** @type {Array<number>} */ const startPositions = [];
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](token.contentType, 'expected `contentType` on subtokens');
    const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    /** @type {Array<[number, number]>} */ const jumps = [];
    /** @type {Record<string, number>} */ const gaps = {};
    /** @type {Array<Chunk>} */ let stream;
    /** @type {Token | undefined} */ let previous;
    let index = -1;
    /** @type {Token | undefined} */ let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [
        start
    ];
    // Loop forward through the linked tokens to pass them in order to the
    // subtokenizer.
    while(current){
        // Find the position of the event for this token.
        while(events[++startPosition][1] !== current){
        // Empty.
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](!previous || current.previous === previous, 'expected previous to match');
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](!previous || previous.next === current, 'expected next to match');
        startPositions.push(startPosition);
        if (!current._tokenizer) {
            stream = context.sliceStream(current);
            if (!current.next) {
                stream.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof);
            }
            if (previous) {
                tokenizer.defineSkip(current.start);
            }
            if (current._isInFirstContentOfListItem) {
                tokenizer._gfmTasklistFirstContentOfListItem = true;
            }
            tokenizer.write(stream);
            if (current._isInFirstContentOfListItem) {
                tokenizer._gfmTasklistFirstContentOfListItem = undefined;
            }
        }
        // Unravel the next token.
        previous = current;
        current = current.next;
    }
    // Now, loop back through all events (and linked tokens), to figure out which
    // parts belong where.
    current = token;
    while(++index < childEvents.length){
        if (// Find a void token that includes a break.
        childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](current, 'expected a current token');
            start = index + 1;
            breaks.push(start);
            // Help GC.
            current._tokenizer = undefined;
            current.previous = undefined;
            current = current.next;
        }
    }
    // Help GC.
    tokenizer.events = [];
    // If there’s one more token (which is the cases for lines that end in an
    // EOF), that’s perfect: the last point we found starts it.
    // If there isn’t then make sure any remaining content is added to it.
    if (current) {
        // Help GC.
        current._tokenizer = undefined;
        current.previous = undefined;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](!current.next, 'expected no next token');
    } else {
        breaks.pop();
    }
    // Now splice the events from the subtokenizer into the current events,
    // moving back to front so that splice indices aren’t affected.
    index = breaks.length;
    while(index--){
        const slice = childEvents.slice(breaks[index], breaks[index + 1]);
        const start = startPositions.pop();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](start !== undefined, 'expected a start position when splicing');
        jumps.unshift([
            start,
            start + slice.length - 1
        ]);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["splice"](events, start, 2, slice);
    }
    index = -1;
    while(++index < jumps.length){
        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
        adjust += jumps[index][1] - jumps[index][0] - 1;
    }
    return gaps;
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-space@1.1.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factorySpace": ()=>factorySpace
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function factorySpace(effects, ok, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start;
    /** @type {State} */ function start(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code)) {
            effects.enter(type);
            return prefix(code);
        }
        return ok(code);
    }
    /** @type {State} */ function prefix(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) && size++ < limit) {
            effects.consume(code);
            return prefix;
        }
        effects.exit(type);
        return ok(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factorySpace": ()=>factorySpace
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function factorySpace(effects, ok, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start;
    /** @type {State} */ function start(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code)) {
            effects.enter(type);
            return prefix(code);
        }
        return ok(code);
    }
    /** @type {State} */ function prefix(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) && size++ < limit) {
            effects.consume(code);
            return prefix;
        }
        effects.exit(type);
        return ok(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-resolve-all@1.1.0/node_modules/micromark-util-resolve-all/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ /**
 * Call all `resolveAll`s.
 *
 * @param {Array<{resolveAll?: Resolver | undefined}>} constructs
 *   List of constructs, optionally with `resolveAll`s.
 * @param {Array<Event>} events
 *   List of events.
 * @param {TokenizeContext} context
 *   Context used by `tokenize`.
 * @returns {Array<Event>}
 *   Changed events.
 */ __turbopack_esm__({
    "resolveAll": ()=>resolveAll
});
function resolveAll(constructs, events, context) {
    /** @type {Array<Resolver>} */ const called = [];
    let index = -1;
    while(++index < constructs.length){
        const resolve = constructs[index].resolveAll;
        if (resolve && !called.includes(resolve)) {
            events = resolve(events, context);
            called.push(resolve);
        }
    }
    return events;
}

})()),
"[project]/node_modules/.pnpm/micromark-util-resolve-all@2.0.0/node_modules/micromark-util-resolve-all/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ /**
 * Call all `resolveAll`s.
 *
 * @param {Array<{resolveAll?: Resolver | undefined}>} constructs
 *   List of constructs, optionally with `resolveAll`s.
 * @param {Array<Event>} events
 *   List of events.
 * @param {TokenizeContext} context
 *   Context used by `tokenize`.
 * @returns {Array<Event>}
 *   Changed events.
 */ __turbopack_esm__({
    "resolveAll": ()=>resolveAll
});
function resolveAll(constructs, events, context) {
    /** @type {Array<Resolver>} */ const called = [];
    let index = -1;
    while(++index < constructs.length){
        const resolve = constructs[index].resolveAll;
        if (resolve && !called.includes(resolve)) {
            events = resolve(events, context);
            called.push(resolve);
        }
    }
    return events;
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-whitespace@1.1.0/node_modules/micromark-factory-whitespace/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */ __turbopack_esm__({
    "factoryWhitespace": ()=>factoryWhitespace
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-space@1.1.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function factoryWhitespace(effects, ok) {
    /** @type {boolean} */ let seen;
    return start;
    /** @type {State} */ function start(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            seen = true;
            return start;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code)) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factorySpace"](effects, start, seen ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineSuffix)(code);
        }
        return ok(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-whitespace@2.0.0/node_modules/micromark-factory-whitespace/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */ __turbopack_esm__({
    "factoryWhitespace": ()=>factoryWhitespace
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function factoryWhitespace(effects, ok) {
    /** @type {boolean} */ let seen;
    return start;
    /** @type {State} */ function start(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            seen = true;
            return start;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code)) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factorySpace"](effects, start, seen ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineSuffix)(code);
        }
        return ok(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-title@1.1.0/node_modules/micromark-factory-title/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factoryTitle": ()=>factoryTitle
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-space@1.1.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/constants.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
function factoryTitle(effects, ok, nok, type, markerType, stringType) {
    /** @type {NonNullable<Code>} */ let marker;
    return start;
    /**
   * Start of title.
   *
   * ```markdown
   * > | "a"
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].quotationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].apostrophe || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis) {
            effects.enter(type);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            marker = code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis : code;
            return begin;
        }
        return nok(code);
    }
    /**
   * After opening marker.
   *
   * This is also used at the closing marker.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */ function begin(code) {
        if (code === marker) {
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok;
        }
        effects.enter(stringType);
        return atBreak(code);
    }
    /**
   * At something, before something else.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (code === marker) {
            effects.exit(stringType);
            return begin(marker);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            return nok(code);
        }
        // Note: blank lines can’t exist in content.
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            // To do: use `space_or_tab_eol_with_options`, connect.
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factorySpace"](effects, atBreak, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix);
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return inside(code);
    }
    /**
   *
   *
   * @type {State}
   */ function inside(code) {
        if (code === marker || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            return atBreak(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? escape : inside;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | "a\*b"
   *      ^
   * ```
   *
   * @type {State}
   */ function escape(code) {
        if (code === marker || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return inside;
        }
        return inside(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-title@2.0.0/node_modules/micromark-factory-title/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factoryTitle": ()=>factoryTitle
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function factoryTitle(effects, ok, nok, type, markerType, stringType) {
    /** @type {NonNullable<Code>} */ let marker;
    return start;
    /**
   * Start of title.
   *
   * ```markdown
   * > | "a"
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].quotationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].apostrophe || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis) {
            effects.enter(type);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            marker = code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis : code;
            return begin;
        }
        return nok(code);
    }
    /**
   * After opening marker.
   *
   * This is also used at the closing marker.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */ function begin(code) {
        if (code === marker) {
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok;
        }
        effects.enter(stringType);
        return atBreak(code);
    }
    /**
   * At something, before something else.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (code === marker) {
            effects.exit(stringType);
            return begin(marker);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            return nok(code);
        }
        // Note: blank lines can’t exist in content.
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            // To do: use `space_or_tab_eol_with_options`, connect.
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factorySpace"](effects, atBreak, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].linePrefix);
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return inside(code);
    }
    /**
   *
   *
   * @type {State}
   */ function inside(code) {
        if (code === marker || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            return atBreak(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? escape : inside;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | "a\*b"
   *      ^
   * ```
   *
   * @type {State}
   */ function escape(code) {
        if (code === marker || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return inside;
        }
        return inside(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-label@1.1.0/node_modules/micromark-factory-label/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factoryLabel": ()=>factoryLabel
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/constants.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
function factoryLabel(effects, ok, nok, type, markerType, stringType) {
    const self = this;
    let size = 0;
    /** @type {boolean} */ let seen;
    return start;
    /**
   * Start of label.
   *
   * ```markdown
   * > | [a]
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket, 'expected `[`');
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak;
    }
    /**
   * In label, at something, before something else.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (size > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].linkReferenceSizeMax || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket && !seen || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].caret && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {
            return nok(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.exit(stringType);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok;
        }
        // To do: indent? Link chunks and EOLs together?
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return atBreak;
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return labelInside(code);
    }
    /**
   * In label, in text.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */ function labelInside(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code) || size++ > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].linkReferenceSizeMax) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            return atBreak(code);
        }
        effects.consume(code);
        if (!seen) seen = !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? labelEscape : labelInside;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | [a\*a]
   *        ^
   * ```
   *
   * @type {State}
   */ function labelEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.consume(code);
            size++;
            return labelInside;
        }
        return labelInside(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-label@2.0.0/node_modules/micromark-factory-label/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factoryLabel": ()=>factoryLabel
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function factoryLabel(effects, ok, nok, type, markerType, stringType) {
    const self = this;
    let size = 0;
    /** @type {boolean} */ let seen;
    return start;
    /**
   * Start of label.
   *
   * ```markdown
   * > | [a]
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket, 'expected `[`');
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak;
    }
    /**
   * In label, at something, before something else.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */ function atBreak(code) {
        if (size > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].linkReferenceSizeMax || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket && !seen || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].caret && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {
            return nok(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.exit(stringType);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok;
        }
        // To do: indent? Link chunks and EOLs together?
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return atBreak;
        }
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return labelInside(code);
    }
    /**
   * In label, in text.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */ function labelInside(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code) || size++ > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].linkReferenceSizeMax) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            return atBreak(code);
        }
        effects.consume(code);
        if (!seen) seen = !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? labelEscape : labelInside;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | [a\*a]
   *        ^
   * ```
   *
   * @type {State}
   */ function labelEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftSquareBracket || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightSquareBracket) {
            effects.consume(code);
            size++;
            return labelInside;
        }
        return labelInside(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-destination@1.1.0/node_modules/micromark-factory-destination/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factoryDestination": ()=>factoryDestination
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/constants.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start;
    /**
   * Start of destination.
   *
   * ```markdown
   * > | <aa>
   *     ^
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan) {
            effects.enter(type);
            effects.enter(literalType);
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            return enclosedBefore;
        }
        // ASCII control, space, closing paren.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiControl"](code)) {
            return nok(code);
        }
        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return raw(code);
    }
    /**
   * After `<`, at an enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */ function enclosedBefore(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            effects.exit(literalType);
            effects.exit(type);
            return ok;
        }
        effects.enter(stringType);
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return enclosed(code);
    }
    /**
   * In enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */ function enclosed(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            effects.exit(stringType);
            return enclosedBefore(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            return nok(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? enclosedEscape : enclosed;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | <a\*a>
   *        ^
   * ```
   *
   * @type {State}
   */ function enclosedEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return enclosed;
        }
        return enclosed(code);
    }
    /**
   * In raw destination.
   *
   * ```markdown
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */ function raw(code) {
        if (!balance && (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code))) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok(code);
        }
        if (balance < limit && code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis) {
            effects.consume(code);
            balance++;
            return raw;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis) {
            effects.consume(code);
            balance--;
            return raw;
        }
        // ASCII control (but *not* `\0`) and space and `(`.
        // Note: in `markdown-rs`, `\0` exists in codes, in `micromark-js` it
        // doesn’t.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiControl"](code)) {
            return nok(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? rawEscape : raw;
    }
    /**
   * After `\`, at special character.
   *
   * ```markdown
   * > | a\*a
   *       ^
   * ```
   *
   * @type {State}
   */ function rawEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return raw;
        }
        return raw(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-destination@2.0.0/node_modules/micromark-factory-destination/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factoryDestination": ()=>factoryDestination
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start;
    /**
   * Start of destination.
   *
   * ```markdown
   * > | <aa>
   *     ^
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan) {
            effects.enter(type);
            effects.enter(literalType);
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            return enclosedBefore;
        }
        // ASCII control, space, closing paren.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiControl"](code)) {
            return nok(code);
        }
        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return raw(code);
    }
    /**
   * After `<`, at an enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */ function enclosedBefore(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            effects.exit(literalType);
            effects.exit(type);
            return ok;
        }
        effects.enter(stringType);
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString, {
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].contentTypeString
        });
        return enclosed(code);
    }
    /**
   * In enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */ function enclosed(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            effects.exit(stringType);
            return enclosedBefore(code);
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            return nok(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? enclosedEscape : enclosed;
    }
    /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | <a\*a>
   *        ^
   * ```
   *
   * @type {State}
   */ function enclosedEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return enclosed;
        }
        return enclosed(code);
    }
    /**
   * In raw destination.
   *
   * ```markdown
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */ function raw(code) {
        if (!balance && (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code))) {
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].chunkString);
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok(code);
        }
        if (balance < limit && code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis) {
            effects.consume(code);
            balance++;
            return raw;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis) {
            effects.consume(code);
            balance--;
            return raw;
        }
        // ASCII control (but *not* `\0`) and space and `(`.
        // Note: in `markdown-rs`, `\0` exists in codes, in `micromark-js` it
        // doesn’t.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiControl"](code)) {
            return nok(code);
        }
        effects.consume(code);
        return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash ? rawEscape : raw;
    }
    /**
   * After `\`, at special character.
   *
   * ```markdown
   * > | a\*a
   *       ^
   * ```
   *
   * @type {State}
   */ function rawEscape(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightParenthesis || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].backslash) {
            effects.consume(code);
            return raw;
        }
        return raw(code);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-html-tag-name@1.2.0/node_modules/micromark-util-html-tag-name/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * List of lowercase HTML “block” tag names.
 *
 * The list, when parsing HTML (flow), results in more relaxed rules (condition
 * 6).
 * Because they are known blocks, the HTML-like syntax doesn’t have to be
 * strictly parsed.
 * For tag names not in this list, a more strict algorithm (condition 7) is used
 * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
 *
 * This is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 *
 * > 👉 **Note**: `search` was added in `CommonMark@0.31`.
 */ __turbopack_esm__({
    "htmlBlockNames": ()=>htmlBlockNames,
    "htmlRawNames": ()=>htmlRawNames
});
const htmlBlockNames = [
    'address',
    'article',
    'aside',
    'base',
    'basefont',
    'blockquote',
    'body',
    'caption',
    'center',
    'col',
    'colgroup',
    'dd',
    'details',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'frame',
    'frameset',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hr',
    'html',
    'iframe',
    'legend',
    'li',
    'link',
    'main',
    'menu',
    'menuitem',
    'nav',
    'noframes',
    'ol',
    'optgroup',
    'option',
    'p',
    'param',
    'search',
    'section',
    'summary',
    'table',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'title',
    'tr',
    'track',
    'ul'
];
const htmlRawNames = [
    'pre',
    'script',
    'style',
    'textarea'
];

})()),
"[project]/node_modules/.pnpm/micromark-util-html-tag-name@2.0.0/node_modules/micromark-util-html-tag-name/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * List of lowercase HTML “block” tag names.
 *
 * The list, when parsing HTML (flow), results in more relaxed rules (condition
 * 6).
 * Because they are known blocks, the HTML-like syntax doesn’t have to be
 * strictly parsed.
 * For tag names not in this list, a more strict algorithm (condition 7) is used
 * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
 *
 * This is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 *
 * > 👉 **Note**: `search` was added in `CommonMark@0.31`.
 */ __turbopack_esm__({
    "htmlBlockNames": ()=>htmlBlockNames,
    "htmlRawNames": ()=>htmlRawNames
});
const htmlBlockNames = [
    'address',
    'article',
    'aside',
    'base',
    'basefont',
    'blockquote',
    'body',
    'caption',
    'center',
    'col',
    'colgroup',
    'dd',
    'details',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'frame',
    'frameset',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hr',
    'html',
    'iframe',
    'legend',
    'li',
    'link',
    'main',
    'menu',
    'menuitem',
    'nav',
    'noframes',
    'ol',
    'optgroup',
    'option',
    'p',
    'param',
    'search',
    'section',
    'summary',
    'table',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'title',
    'tr',
    'track',
    'ul'
];
const htmlRawNames = [
    'pre',
    'script',
    'style',
    'textarea'
];

})()),
"[project]/node_modules/.pnpm/micromark-util-classify-character@1.1.0/node_modules/micromark-util-classify-character/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Code} Code
 */ __turbopack_esm__({
    "classifyCharacter": ()=>classifyCharacter
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/constants.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function classifyCharacter(code) {
    if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].characterGroupWhitespace;
    }
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodePunctuation"](code)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].characterGroupPunctuation;
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-classify-character@2.0.0/node_modules/micromark-util-classify-character/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Code} Code
 */ __turbopack_esm__({
    "classifyCharacter": ()=>classifyCharacter
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function classifyCharacter(code) {
    if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].characterGroupWhitespace;
    }
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodePunctuation"](code)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].characterGroupPunctuation;
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-combine-extensions@1.1.0/node_modules/micromark-util-combine-extensions/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').Handles} Handles
 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
 * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
 */ __turbopack_esm__({
    "combineExtensions": ()=>combineExtensions,
    "combineHtmlExtensions": ()=>combineHtmlExtensions
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-chunked@1.1.0/node_modules/micromark-util-chunked/dev/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
    /** @type {NormalizedExtension} */ const all = {};
    let index = -1;
    while(++index < extensions.length){
        syntaxExtension(all, extensions[index]);
    }
    return all;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {NormalizedExtension} all
 *   Extension to merge into.
 * @param {Extension} extension
 *   Extension to merge.
 * @returns {void}
 */ function syntaxExtension(all, extension) {
    /** @type {keyof Extension} */ let hook;
    for(hook in extension){
        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
        /** @type {Record<string, unknown>} */ const left = maybe || (all[hook] = {});
        /** @type {Record<string, unknown> | undefined} */ const right = extension[hook];
        /** @type {string} */ let code;
        if (right) {
            for(code in right){
                if (!hasOwnProperty.call(left, code)) left[code] = [];
                const value = right[code];
                constructs(// @ts-expect-error Looks like a list.
                left[code], Array.isArray(value) ? value : value ? [
                    value
                ] : []);
            }
        }
    }
}
/**
 * Merge `list` into `existing` (both lists of constructs).
 * Mutates `existing`.
 *
 * @param {Array<unknown>} existing
 * @param {Array<unknown>} list
 * @returns {void}
 */ function constructs(existing, list) {
    let index = -1;
    /** @type {Array<unknown>} */ const before = [];
    while(++index < list.length){
        // @ts-expect-error Looks like an object.
        ;
        (list[index].add === 'after' ? existing : before).push(list[index]);
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["splice"](existing, 0, 0, before);
}
function combineHtmlExtensions(htmlExtensions) {
    /** @type {HtmlExtension} */ const handlers = {};
    let index = -1;
    while(++index < htmlExtensions.length){
        htmlExtension(handlers, htmlExtensions[index]);
    }
    return handlers;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {HtmlExtension} all
 *   Extension to merge into.
 * @param {HtmlExtension} extension
 *   Extension to merge.
 * @returns {void}
 */ function htmlExtension(all, extension) {
    /** @type {keyof HtmlExtension} */ let hook;
    for(hook in extension){
        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
        const left = maybe || (all[hook] = {});
        const right = extension[hook];
        /** @type {keyof Handles} */ let type;
        if (right) {
            for(type in right){
                // @ts-expect-error assume document vs regular handler are managed correctly.
                left[type] = right[type];
            }
        }
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-util-combine-extensions@2.0.0/node_modules/micromark-util-combine-extensions/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').Handles} Handles
 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
 * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
 */ __turbopack_esm__({
    "combineExtensions": ()=>combineExtensions,
    "combineHtmlExtensions": ()=>combineHtmlExtensions
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-chunked@2.0.0/node_modules/micromark-util-chunked/dev/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
    /** @type {NormalizedExtension} */ const all = {};
    let index = -1;
    while(++index < extensions.length){
        syntaxExtension(all, extensions[index]);
    }
    return all;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {NormalizedExtension} all
 *   Extension to merge into.
 * @param {Extension} extension
 *   Extension to merge.
 * @returns {undefined}
 */ function syntaxExtension(all, extension) {
    /** @type {keyof Extension} */ let hook;
    for(hook in extension){
        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
        /** @type {Record<string, unknown>} */ const left = maybe || (all[hook] = {});
        /** @type {Record<string, unknown> | undefined} */ const right = extension[hook];
        /** @type {string} */ let code;
        if (right) {
            for(code in right){
                if (!hasOwnProperty.call(left, code)) left[code] = [];
                const value = right[code];
                constructs(// @ts-expect-error Looks like a list.
                left[code], Array.isArray(value) ? value : value ? [
                    value
                ] : []);
            }
        }
    }
}
/**
 * Merge `list` into `existing` (both lists of constructs).
 * Mutates `existing`.
 *
 * @param {Array<unknown>} existing
 * @param {Array<unknown>} list
 * @returns {undefined}
 */ function constructs(existing, list) {
    let index = -1;
    /** @type {Array<unknown>} */ const before = [];
    while(++index < list.length){
        // @ts-expect-error Looks like an object.
        ;
        (list[index].add === 'after' ? existing : before).push(list[index]);
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$chunked$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$chunked$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["splice"](existing, 0, 0, before);
}
function combineHtmlExtensions(htmlExtensions) {
    /** @type {HtmlExtension} */ const handlers = {};
    let index = -1;
    while(++index < htmlExtensions.length){
        htmlExtension(handlers, htmlExtensions[index]);
    }
    return handlers;
}
/**
 * Merge `extension` into `all`.
 *
 * @param {HtmlExtension} all
 *   Extension to merge into.
 * @param {HtmlExtension} extension
 *   Extension to merge.
 * @returns {undefined}
 */ function htmlExtension(all, extension) {
    /** @type {keyof HtmlExtension} */ let hook;
    for(hook in extension){
        const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
        const left = maybe || (all[hook] = {});
        const right = extension[hook];
        /** @type {keyof Handles} */ let type;
        if (right) {
            for(type in right){
                // @ts-expect-error assume document vs regular handler are managed correctly.
                left[type] = right[type];
            }
        }
    }
}

})()),
"[project]/node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
        return parse(val);
    } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch(type){
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
            return n * y;
        case 'weeks':
        case 'week':
        case 'w':
            return n * w;
        case 'days':
        case 'day':
        case 'd':
            return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
            return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
            return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
            return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
        return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

}.call(this) }),
"[project]/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __turbopack_require__("[project]/node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js [rsc] (ecmascript)");
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
                return;
            }
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== 'string') {
                // Anything else let's inspect with %O
                args.unshift('%O');
            }
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === '%%') {
                    return '%';
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === 'function') {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, 'enabled', {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) {
                    return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
        }
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
        const len = split.length;
        for(i = 0; i < len; i++){
            if (!split[i]) {
                continue;
            }
            namespaces = split[i].replace(/\*/g, '.*?');
            if (namespaces[0] === '-') {
                createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
            } else {
                createDebug.names.push(new RegExp('^' + namespaces + '$'));
            }
        }
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace)=>'-' + namespace)
        ].join(',');
        createDebug.enable('');
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        if (name[name.length - 1] === '*') {
            return true;
        }
        let i;
        let len;
        for(i = 0, len = createDebug.skips.length; i < len; i++){
            if (createDebug.skips[i].test(name)) {
                return false;
            }
        }
        for(i = 0, len = createDebug.names.length; i < len; i++){
            if (createDebug.names[i].test(name)) {
                return true;
            }
        }
        return false;
    }
    /**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/ function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) {
            return val.stack || val.message;
        }
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;

}.call(this) }),
"[project]/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33'
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
        return true;
    }
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
    }
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
    if (!this.useColors) {
        return;
    }
    const c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === '%%') {
            return;
        }
        index++;
        if (match === '%c') {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) {
            exports.storage.setItem('debug', namespaces);
        } else {
            exports.storage.removeItem('debug');
        }
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem('debug');
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
    }
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = __turbopack_require__("[project]/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js [rsc] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
    }
};

}.call(this) }),
"[project]/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/**
 * Module dependencies.
 */ const tty = __turbopack_external_require__('tty');
const util = __turbopack_external_require__('util');
/**
 * This is the Node.js implementation of `debug()`.
 */ exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(()=>{}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
/**
 * Colors.
 */ exports.colors = [
    6,
    2,
    3,
    4,
    5,
    1
];
try {
    // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    // eslint-disable-next-line import/no-extraneous-dependencies
    const supportsColor = __turbopack_require__("[project]/node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js [rsc] (ecmascript)");
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
            20,
            21,
            26,
            27,
            32,
            33,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            56,
            57,
            62,
            63,
            68,
            69,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            92,
            93,
            98,
            99,
            112,
            113,
            128,
            129,
            134,
            135,
            148,
            149,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            178,
            179,
            184,
            185,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            214,
            215,
            220,
            221
        ];
    }
} catch (error) {
// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */ exports.inspectOpts = Object.keys(process.env).filter((key)=>{
    return /^debug_/i.test(key);
}).reduce((obj, key)=>{
    // Camel-case
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k)=>{
        return k.toUpperCase();
    });
    // Coerce string value into JS value
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
    } else if (val === 'null') {
        val = null;
    } else {
        val = Number(val);
    }
    obj[prop] = val;
    return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */ function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    const { namespace: name, useColors } = this;
    if (useColors) {
        const c = this.color;
        const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
        const prefix = `  ${colorCode};1m${name} \u001B[0m`;
        args[0] = prefix + args[0].split('\n').join('\n' + prefix);
        args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
    } else {
        args[0] = getDate() + name + ' ' + args[0];
    }
}
function getDate() {
    if (exports.inspectOpts.hideDate) {
        return '';
    }
    return new Date().toISOString() + ' ';
}
/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */ function log(...args) {
    return process.stderr.write(util.format(...args) + '\n');
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    if (namespaces) {
        process.env.DEBUG = namespaces;
    } else {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG;
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */ function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for(let i = 0; i < keys.length; i++){
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
}
module.exports = __turbopack_require__("[project]/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js [rsc] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */ formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split('\n').map((str)=>str.trim()).join(' ');
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */ formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
};

}.call(this) }),
"[project]/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */ if (typeof process === 'undefined' || process.type === 'renderer' || ("TURBOPACK compile-time value", false) === true || process.__nwjs) {
    module.exports = __turbopack_require__("[project]/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js [rsc] (ecmascript)");
} else {
    module.exports = __turbopack_require__("[project]/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js [rsc] (ecmascript)");
}

}.call(this) }),
"[project]/node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
module.exports = (flag, argv = process.argv)=>{
    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf('--');
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};

}.call(this) }),
"[project]/node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
const os = __turbopack_external_require__('os');
const tty = __turbopack_external_require__('tty');
const hasFlag = __turbopack_require__("[project]/node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js [rsc] (ecmascript)");
const { env } = process;
let forceColor;
if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false') || hasFlag('color=never')) {
    forceColor = 0;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
    forceColor = 1;
}
if ('FORCE_COLOR' in env) {
    if (env.FORCE_COLOR === 'true') {
        forceColor = 1;
    } else if (env.FORCE_COLOR === 'false') {
        forceColor = 0;
    } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    }
}
function translateLevel(level) {
    if (level === 0) {
        return false;
    }
    return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
    };
}
function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
        return 0;
    }
    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
        return 3;
    }
    if (hasFlag('color=256')) {
        return 2;
    }
    if (haveStream && !streamIsTTY && forceColor === undefined) {
        return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === 'dumb') {
        return min;
    }
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    if ('CI' in env) {
        if ([
            'TRAVIS',
            'CIRCLECI',
            'APPVEYOR',
            'GITLAB_CI',
            'GITHUB_ACTIONS',
            'BUILDKITE'
        ].some((sign)=>sign in env) || env.CI_NAME === 'codeship') {
            return 1;
        }
        return min;
    }
    if ('TEAMCITY_VERSION' in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === 'truecolor') {
        return 3;
    }
    if ('TERM_PROGRAM' in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
        switch(env.TERM_PROGRAM){
            case 'iTerm.app':
                return version >= 3 ? 3 : 2;
            case 'Apple_Terminal':
                return 2;
        }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
    }
    if ('COLORTERM' in env) {
        return 1;
    }
    return min;
}
function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
}
module.exports = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};

}.call(this) }),
"[project]/node_modules/.pnpm/mdast-util-to-string@3.2.0/node_modules/mdast-util-to-string/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast').Root|import('mdast').Content} Node
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [includeImageAlt=true]
 *   Whether to use `alt` for `image`s.
 * @property {boolean | null | undefined} [includeHtml=true]
 *   Whether to use `value` of HTML.
 */ /** @type {Options} */ __turbopack_esm__({
    "toString": ()=>toString
});
const emptyOptions = {};
function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === 'boolean' ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
}
/**
 * One node or several nodes.
 *
 * @param {unknown} value
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized node.
 */ function one(value, includeImageAlt, includeHtml) {
    if (node(value)) {
        if ('value' in value) {
            return value.type === 'html' && !includeHtml ? '' : value.value;
        }
        if (includeImageAlt && 'alt' in value && value.alt) {
            return value.alt;
        }
        if ('children' in value) {
            return all(value.children, includeImageAlt, includeHtml);
        }
    }
    if (Array.isArray(value)) {
        return all(value, includeImageAlt, includeHtml);
    }
    return '';
}
/**
 * Serialize a list of nodes.
 *
 * @param {Array<unknown>} values
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized nodes.
 */ function all(values, includeImageAlt, includeHtml) {
    /** @type {Array<string>} */ const result = [];
    let index = -1;
    while(++index < values.length){
        result[index] = one(values[index], includeImageAlt, includeHtml);
    }
    return result.join('');
}
/**
 * Check if `value` looks like a node.
 *
 * @param {unknown} value
 *   Thing.
 * @returns {value is Node}
 *   Whether `value` is a node.
 */ function node(value) {
    return Boolean(value && typeof value === 'object');
}

})()),
"[project]/node_modules/.pnpm/mdast-util-to-string@3.2.0/node_modules/mdast-util-to-string/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Options} Options
 */ __turbopack_esm__({
    "toString": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$string$40$3$2e$2$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toString"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$string$40$3$2e$2$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-string@3.2.0/node_modules/mdast-util-to-string/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast').Nodes} Nodes
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [includeImageAlt=true]
 *   Whether to use `alt` for `image`s (default: `true`).
 * @property {boolean | null | undefined} [includeHtml=true]
 *   Whether to use `value` of HTML (default: `true`).
 */ /** @type {Options} */ __turbopack_esm__({
    "toString": ()=>toString
});
const emptyOptions = {};
function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === 'boolean' ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
}
/**
 * One node or several nodes.
 *
 * @param {unknown} value
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized node.
 */ function one(value, includeImageAlt, includeHtml) {
    if (node(value)) {
        if ('value' in value) {
            return value.type === 'html' && !includeHtml ? '' : value.value;
        }
        if (includeImageAlt && 'alt' in value && value.alt) {
            return value.alt;
        }
        if ('children' in value) {
            return all(value.children, includeImageAlt, includeHtml);
        }
    }
    if (Array.isArray(value)) {
        return all(value, includeImageAlt, includeHtml);
    }
    return '';
}
/**
 * Serialize a list of nodes.
 *
 * @param {Array<unknown>} values
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized nodes.
 */ function all(values, includeImageAlt, includeHtml) {
    /** @type {Array<string>} */ const result = [];
    let index = -1;
    while(++index < values.length){
        result[index] = one(values[index], includeImageAlt, includeHtml);
    }
    return result.join('');
}
/**
 * Check if `value` looks like a node.
 *
 * @param {unknown} value
 *   Thing.
 * @returns {value is Nodes}
 *   Whether `value` is a node.
 */ function node(value) {
    return Boolean(value && typeof value === 'object');
}

})()),
"[project]/node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Options} Options
 */ __turbopack_esm__({
    "toString": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$string$40$4$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toString"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$string$40$4$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/remark-parse@10.0.2/node_modules/remark-parse/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-from-markdown').Options} Options
 */ __turbopack_esm__({
    "default": ()=>remarkParse
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$from$2d$markdown$40$1$2e$3$2e$1$2f$node_modules$2f$mdast$2d$util$2d$from$2d$markdown$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-from-markdown@1.3.1/node_modules/mdast-util-from-markdown/dev/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function remarkParse(options) {
    /** @type {import('unified').ParserFunction<Root>} */ const parser = (doc)=>{
        // Assume options.
        const settings = this.data('settings');
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$from$2d$markdown$40$1$2e$3$2e$1$2f$node_modules$2f$mdast$2d$util$2d$from$2d$markdown$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["fromMarkdown"](doc, Object.assign({}, settings, options, {
            // Note: these options are not in the readme.
            // The goal is for them to be set by plugins on `data` instead of being
            // passed by users.
            extensions: this.data('micromarkExtensions') || [],
            mdastExtensions: this.data('fromMarkdownExtensions') || []
        }));
    };
    Object.assign(this, {
        Parser: parser
    });
}

})()),
"[project]/node_modules/.pnpm/remark-parse@10.0.2/node_modules/remark-parse/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "default": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$parse$40$10$2e$0$2e$2$2f$node_modules$2f$remark$2d$parse$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$parse$40$10$2e$0$2e$2$2f$node_modules$2f$remark$2d$parse$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/remark-parse@10.0.2/node_modules/remark-parse/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions
 * @typedef {import('unified').Parser<Root>} Parser
 * @typedef {import('unified').Processor<Root>} Processor
 */ /**
 * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options
 */ __turbopack_esm__({
    "default": ()=>remarkParse
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$from$2d$markdown$40$2$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$from$2d$markdown$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-from-markdown@2.0.0/node_modules/mdast-util-from-markdown/dev/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function remarkParse(options) {
    /** @type {Processor} */ // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.
    const self = this;
    self.parser = parser;
    /**
   * @type {Parser}
   */ function parser(doc) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$from$2d$markdown$40$2$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$from$2d$markdown$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["fromMarkdown"](doc, {
            ...self.data('settings'),
            ...options,
            // Note: these options are not in the readme.
            // The goal is for them to be set by plugins on `data` instead of being
            // passed by users.
            extensions: self.data('micromarkExtensions') || [],
            mdastExtensions: self.data('fromMarkdownExtensions') || []
        });
    }
}

})()),
"[project]/node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "default": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$parse$40$11$2e$0$2e$0$2f$node_modules$2f$remark$2d$parse$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$parse$40$11$2e$0$2e$0$2f$node_modules$2f$remark$2d$parse$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/mdast-util-mdxjs-esm@1.3.1/node_modules/mdast-util-mdxjs-esm/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 *
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 *
 * @typedef {import('estree-jsx').Program} Program
 *
 * @typedef {import('../index.js').MdxjsEsm} MdxjsEsm
 */ // To do: next major: expose functions.
/**
 * Extension for `mdast-util-from-markdown` to enable MDX ESM.
 *
 * When using the syntax extension with `addResult`, nodes will have a
 * `data.estree` field set to an ESTree `Program` node.
 *
 * @type {FromMarkdownExtension}
 */ __turbopack_esm__({
    "mdxjsEsmFromMarkdown": ()=>mdxjsEsmFromMarkdown,
    "mdxjsEsmToMarkdown": ()=>mdxjsEsmToMarkdown
});
const mdxjsEsmFromMarkdown = {
    enter: {
        mdxjsEsm: enterMdxjsEsm
    },
    exit: {
        mdxjsEsm: exitMdxjsEsm,
        mdxjsEsmData: exitMdxjsEsmData
    }
};
const mdxjsEsmToMarkdown = {
    handlers: {
        mdxjsEsm: handleMdxjsEsm
    }
};
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxjsEsm(token) {
    this.enter({
        type: 'mdxjsEsm',
        value: ''
    }, token);
    this.buffer() // Capture EOLs
    ;
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxjsEsm(token) {
    const value = this.resume();
    const node = this.exit(token);
    /** @type {Program | undefined} */ // @ts-expect-error: custom.
    const estree = token.estree;
    node.value = value;
    if (estree) {
        node.data = {
            estree
        };
    }
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxjsEsmData(token) {
    this.config.enter.data.call(this, token);
    this.config.exit.data.call(this, token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {MdxjsEsm} node
 */ function handleMdxjsEsm(node) {
    return node.value || '';
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdxjs-esm@1.3.1/node_modules/mdast-util-mdxjs-esm/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxjsEsmFromMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$1$2e$3$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmFromMarkdown"],
    "mdxjsEsmToMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$1$2e$3$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmToMarkdown"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$1$2e$3$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdxjs-esm@1.3.1/node_modules/mdast-util-mdxjs-esm/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/mdast-util-mdxjs-esm@2.0.1/node_modules/mdast-util-mdxjs-esm/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 *
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 *
 * @typedef {import('../index.js').MdxjsEsm} MdxjsEsm
 */ // To do: next major: expose functions.
__turbopack_esm__({
    "mdxjsEsmFromMarkdown": ()=>mdxjsEsmFromMarkdown,
    "mdxjsEsmToMarkdown": ()=>mdxjsEsmToMarkdown
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function mdxjsEsmFromMarkdown() {
    return {
        enter: {
            mdxjsEsm: enterMdxjsEsm
        },
        exit: {
            mdxjsEsm: exitMdxjsEsm,
            mdxjsEsmData: exitMdxjsEsmData
        }
    };
}
function mdxjsEsmToMarkdown() {
    return {
        handlers: {
            mdxjsEsm: handleMdxjsEsm
        }
    };
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxjsEsm(token) {
    this.enter({
        type: 'mdxjsEsm',
        value: ''
    }, token);
    this.buffer() // Capture EOLs
    ;
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxjsEsm(token) {
    const value = this.resume();
    const node = this.stack[this.stack.length - 1];
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](node.type === 'mdxjsEsm');
    this.exit(token);
    const estree = token.estree;
    node.value = value;
    if (estree) {
        node.data = {
            estree
        };
    }
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxjsEsmData(token) {
    this.config.enter.data.call(this, token);
    this.config.exit.data.call(this, token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {MdxjsEsm} node
 */ function handleMdxjsEsm(node) {
    return node.value || '';
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdxjs-esm@2.0.1/node_modules/mdast-util-mdxjs-esm/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxjsEsmFromMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmFromMarkdown"],
    "mdxjsEsmToMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmToMarkdown"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdxjs-esm@2.0.1/node_modules/mdast-util-mdxjs-esm/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/format-basic.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * The smallest way to encode a character.
 *
 * @param {number} code
 * @returns {string}
 */ __turbopack_esm__({
    "formatBasic": ()=>formatBasic
});
function formatBasic(code) {
    return '&#x' + code.toString(16).toUpperCase() + ';';
}

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/constant/dangerous.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * List of legacy (that don’t need a trailing `;`) named references which could,
 * depending on what follows them, turn into a different meaning
 *
 * @type {Array<string>}
 */ __turbopack_esm__({
    "dangerous": ()=>dangerous
});
const dangerous = [
    'cent',
    'copy',
    'divide',
    'gt',
    'lt',
    'not',
    'para',
    'times'
];

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/to-named.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "toNamed": ()=>toNamed
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$2d$legacy$40$3$2e$0$2e$0$2f$node_modules$2f$character$2d$entities$2d$legacy$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$2d$html4$40$2$2e$1$2e$0$2f$node_modules$2f$character$2d$entities$2d$html4$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/character-entities-html4@2.1.0/node_modules/character-entities-html4/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$constant$2f$dangerous$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/constant/dangerous.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
const own = {}.hasOwnProperty;
/**
 * `characterEntitiesHtml4` but inverted.
 *
 * @type {Record<string, string>}
 */ const characters = {};
/** @type {string} */ let key;
for(key in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$2d$html4$40$2$2e$1$2e$0$2f$node_modules$2f$character$2d$entities$2d$html4$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterEntitiesHtml4"]){
    if (own.call(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$2d$html4$40$2$2e$1$2e$0$2f$node_modules$2f$character$2d$entities$2d$html4$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterEntitiesHtml4"], key)) {
        characters[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$2d$html4$40$2$2e$1$2e$0$2f$node_modules$2f$character$2d$entities$2d$html4$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterEntitiesHtml4"][key]] = key;
    }
}
function toNamed(code, next, omit, attribute) {
    const character = String.fromCharCode(code);
    if (own.call(characters, character)) {
        const name = characters[character];
        const value = '&' + name;
        if (omit && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$2d$legacy$40$3$2e$0$2e$0$2f$node_modules$2f$character$2d$entities$2d$legacy$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterEntitiesLegacy"].includes(name) && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$constant$2f$dangerous$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["dangerous"].includes(name) && (!attribute || next && next !== 61 /* `=` */  && /[^\da-z]/i.test(String.fromCharCode(next)))) {
            return value;
        }
        return value + ';';
    }
    return '';
}

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/to-decimal.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Configurable ways to encode characters as decimal references.
 *
 * @param {number} code
 * @param {number} next
 * @param {boolean|undefined} omit
 * @returns {string}
 */ __turbopack_esm__({
    "toDecimal": ()=>toDecimal
});
function toDecimal(code, next, omit) {
    const value = '&#' + String(code);
    return omit && next && !/\d/.test(String.fromCharCode(next)) ? value : value + ';';
}

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/to-hexadecimal.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Configurable ways to encode characters as hexadecimal references.
 *
 * @param {number} code
 * @param {number} next
 * @param {boolean|undefined} omit
 * @returns {string}
 */ __turbopack_esm__({
    "toHexadecimal": ()=>toHexadecimal
});
function toHexadecimal(code, next, omit) {
    const value = '&#x' + code.toString(16).toUpperCase();
    return omit && next && !/[\dA-Fa-f]/.test(String.fromCharCode(next)) ? value : value + ';';
}

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/format-smart.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef FormatSmartOptions
 * @property {boolean} [useNamedReferences=false]
 *   Prefer named character references (`&amp;`) where possible.
 * @property {boolean} [useShortestReferences=false]
 *   Prefer the shortest possible reference, if that results in less bytes.
 *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.
 * @property {boolean} [omitOptionalSemicolons=false]
 *   Whether to omit semicolons when possible.
 *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.
 *   Omitting semicolons is possible for certain named and numeric references in some cases.
 * @property {boolean} [attribute=false]
 *   Create character references which don’t fail in attributes.
 *   **Note**: `attribute` only applies when operating dangerously with
 *   `omitOptionalSemicolons: true`.
 */ __turbopack_esm__({
    "formatSmart": ()=>formatSmart
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$hexadecimal$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/to-hexadecimal.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$decimal$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/to-decimal.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$named$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/to-named.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function formatSmart(code, next, options) {
    let numeric = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$hexadecimal$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toHexadecimal"](code, next, options.omitOptionalSemicolons);
    /** @type {string|undefined} */ let named;
    if (options.useNamedReferences || options.useShortestReferences) {
        named = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$named$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toNamed"](code, next, options.omitOptionalSemicolons, options.attribute);
    }
    // Use the shortest numeric reference when requested.
    // A simple algorithm would use decimal for all code points under 100, as
    // those are shorter than hexadecimal:
    //
    // * `&#99;` vs `&#x63;` (decimal shorter)
    // * `&#100;` vs `&#x64;` (equal)
    //
    // However, because we take `next` into consideration when `omit` is used,
    // And it would be possible that decimals are shorter on bigger values as
    // well if `next` is hexadecimal but not decimal, we instead compare both.
    if ((options.useShortestReferences || !named) && options.useShortestReferences) {
        const decimal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$to$2d$decimal$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toDecimal"](code, next, options.omitOptionalSemicolons);
        if (decimal.length < numeric.length) {
            numeric = decimal;
        }
    }
    return named && (!options.useShortestReferences || named.length < numeric.length) ? named : numeric;
}

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/core.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef CoreOptions
 * @property {Array<string>} [subset=[]]
 *   Whether to only escape the given subset of characters.
 * @property {boolean} [escapeOnly=false]
 *   Whether to only escape possibly dangerous characters.
 *   Those characters are `"`, `&`, `'`, `<`, `>`, and `` ` ``.
 *
 * @typedef FormatOptions
 * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format
 *   Format strategy.
 *
 * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions
 */ /**
 * Encode certain characters in `value`.
 *
 * @param {string} value
 * @param {CoreWithFormatOptions} options
 * @returns {string}
 */ __turbopack_esm__({
    "core": ()=>core
});
function core(value, options) {
    value = value.replace(options.subset ? charactersToExpression(options.subset) : /["&'<>`]/g, basic);
    if (options.subset || options.escapeOnly) {
        return value;
    }
    return value// Surrogate pairs.
    .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, surrogate)// BMP control characters (C0 except for LF, CR, SP; DEL; and some more
    // non-ASCII ones).
    .replace(// eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
    /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g, basic);
    /**
   * @param {string} pair
   * @param {number} index
   * @param {string} all
   */ function surrogate(pair, index, all) {
        return options.format((pair.charCodeAt(0) - 0xd800) * 0x400 + pair.charCodeAt(1) - 0xdc00 + 0x10000, all.charCodeAt(index + 2), options);
    }
    /**
   * @param {string} character
   * @param {number} index
   * @param {string} all
   */ function basic(character, index, all) {
        return options.format(character.charCodeAt(0), all.charCodeAt(index + 1), options);
    }
}
/**
 * @param {Array<string>} subset
 * @returns {RegExp}
 */ function charactersToExpression(subset) {
    /** @type {Array<string>} */ const groups = [];
    let index = -1;
    while(++index < subset.length){
        groups.push(subset[index].replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'));
    }
    return new RegExp('(?:' + groups.join('|') + ')', 'g');
}

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options
 * @typedef {import('./core.js').CoreOptions} LightOptions
 */ __turbopack_esm__({
    "stringifyEntities": ()=>stringifyEntities,
    "stringifyEntitiesLight": ()=>stringifyEntitiesLight
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$core$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/core.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$format$2d$smart$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/format-smart.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$format$2d$basic$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/util/format-basic.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function stringifyEntities(value, options) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$core$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["core"](value, Object.assign({
        format: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$format$2d$smart$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["formatSmart"]
    }, options));
}
function stringifyEntitiesLight(value, options) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$core$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["core"](value, Object.assign({
        format: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$util$2f$format$2d$basic$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["formatBasic"]
    }, options));
}

})()),
"[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').LightOptions} LightOptions
 * @typedef {import('./lib/index.js').Options} Options
 */ __turbopack_esm__({
    "stringifyEntities": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyEntities"],
    "stringifyEntitiesLight": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyEntitiesLight"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/character-entities-html4@2.1.0/node_modules/character-entities-html4/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Map of named character references from HTML 4.
 *
 * @type {Record<string, string>}
 */ __turbopack_esm__({
    "characterEntitiesHtml4": ()=>characterEntitiesHtml4
});
const characterEntitiesHtml4 = {
    nbsp: ' ',
    iexcl: '¡',
    cent: '¢',
    pound: '£',
    curren: '¤',
    yen: '¥',
    brvbar: '¦',
    sect: '§',
    uml: '¨',
    copy: '©',
    ordf: 'ª',
    laquo: '«',
    not: '¬',
    shy: '­',
    reg: '®',
    macr: '¯',
    deg: '°',
    plusmn: '±',
    sup2: '²',
    sup3: '³',
    acute: '´',
    micro: 'µ',
    para: '¶',
    middot: '·',
    cedil: '¸',
    sup1: '¹',
    ordm: 'º',
    raquo: '»',
    frac14: '¼',
    frac12: '½',
    frac34: '¾',
    iquest: '¿',
    Agrave: 'À',
    Aacute: 'Á',
    Acirc: 'Â',
    Atilde: 'Ã',
    Auml: 'Ä',
    Aring: 'Å',
    AElig: 'Æ',
    Ccedil: 'Ç',
    Egrave: 'È',
    Eacute: 'É',
    Ecirc: 'Ê',
    Euml: 'Ë',
    Igrave: 'Ì',
    Iacute: 'Í',
    Icirc: 'Î',
    Iuml: 'Ï',
    ETH: 'Ð',
    Ntilde: 'Ñ',
    Ograve: 'Ò',
    Oacute: 'Ó',
    Ocirc: 'Ô',
    Otilde: 'Õ',
    Ouml: 'Ö',
    times: '×',
    Oslash: 'Ø',
    Ugrave: 'Ù',
    Uacute: 'Ú',
    Ucirc: 'Û',
    Uuml: 'Ü',
    Yacute: 'Ý',
    THORN: 'Þ',
    szlig: 'ß',
    agrave: 'à',
    aacute: 'á',
    acirc: 'â',
    atilde: 'ã',
    auml: 'ä',
    aring: 'å',
    aelig: 'æ',
    ccedil: 'ç',
    egrave: 'è',
    eacute: 'é',
    ecirc: 'ê',
    euml: 'ë',
    igrave: 'ì',
    iacute: 'í',
    icirc: 'î',
    iuml: 'ï',
    eth: 'ð',
    ntilde: 'ñ',
    ograve: 'ò',
    oacute: 'ó',
    ocirc: 'ô',
    otilde: 'õ',
    ouml: 'ö',
    divide: '÷',
    oslash: 'ø',
    ugrave: 'ù',
    uacute: 'ú',
    ucirc: 'û',
    uuml: 'ü',
    yacute: 'ý',
    thorn: 'þ',
    yuml: 'ÿ',
    fnof: 'ƒ',
    Alpha: 'Α',
    Beta: 'Β',
    Gamma: 'Γ',
    Delta: 'Δ',
    Epsilon: 'Ε',
    Zeta: 'Ζ',
    Eta: 'Η',
    Theta: 'Θ',
    Iota: 'Ι',
    Kappa: 'Κ',
    Lambda: 'Λ',
    Mu: 'Μ',
    Nu: 'Ν',
    Xi: 'Ξ',
    Omicron: 'Ο',
    Pi: 'Π',
    Rho: 'Ρ',
    Sigma: 'Σ',
    Tau: 'Τ',
    Upsilon: 'Υ',
    Phi: 'Φ',
    Chi: 'Χ',
    Psi: 'Ψ',
    Omega: 'Ω',
    alpha: 'α',
    beta: 'β',
    gamma: 'γ',
    delta: 'δ',
    epsilon: 'ε',
    zeta: 'ζ',
    eta: 'η',
    theta: 'θ',
    iota: 'ι',
    kappa: 'κ',
    lambda: 'λ',
    mu: 'μ',
    nu: 'ν',
    xi: 'ξ',
    omicron: 'ο',
    pi: 'π',
    rho: 'ρ',
    sigmaf: 'ς',
    sigma: 'σ',
    tau: 'τ',
    upsilon: 'υ',
    phi: 'φ',
    chi: 'χ',
    psi: 'ψ',
    omega: 'ω',
    thetasym: 'ϑ',
    upsih: 'ϒ',
    piv: 'ϖ',
    bull: '•',
    hellip: '…',
    prime: '′',
    Prime: '″',
    oline: '‾',
    frasl: '⁄',
    weierp: '℘',
    image: 'ℑ',
    real: 'ℜ',
    trade: '™',
    alefsym: 'ℵ',
    larr: '←',
    uarr: '↑',
    rarr: '→',
    darr: '↓',
    harr: '↔',
    crarr: '↵',
    lArr: '⇐',
    uArr: '⇑',
    rArr: '⇒',
    dArr: '⇓',
    hArr: '⇔',
    forall: '∀',
    part: '∂',
    exist: '∃',
    empty: '∅',
    nabla: '∇',
    isin: '∈',
    notin: '∉',
    ni: '∋',
    prod: '∏',
    sum: '∑',
    minus: '−',
    lowast: '∗',
    radic: '√',
    prop: '∝',
    infin: '∞',
    ang: '∠',
    and: '∧',
    or: '∨',
    cap: '∩',
    cup: '∪',
    int: '∫',
    there4: '∴',
    sim: '∼',
    cong: '≅',
    asymp: '≈',
    ne: '≠',
    equiv: '≡',
    le: '≤',
    ge: '≥',
    sub: '⊂',
    sup: '⊃',
    nsub: '⊄',
    sube: '⊆',
    supe: '⊇',
    oplus: '⊕',
    otimes: '⊗',
    perp: '⊥',
    sdot: '⋅',
    lceil: '⌈',
    rceil: '⌉',
    lfloor: '⌊',
    rfloor: '⌋',
    lang: '〈',
    rang: '〉',
    loz: '◊',
    spades: '♠',
    clubs: '♣',
    hearts: '♥',
    diams: '♦',
    quot: '"',
    amp: '&',
    lt: '<',
    gt: '>',
    OElig: 'Œ',
    oelig: 'œ',
    Scaron: 'Š',
    scaron: 'š',
    Yuml: 'Ÿ',
    circ: 'ˆ',
    tilde: '˜',
    ensp: ' ',
    emsp: ' ',
    thinsp: ' ',
    zwnj: '‌',
    zwj: '‍',
    lrm: '‎',
    rlm: '‏',
    ndash: '–',
    mdash: '—',
    lsquo: '‘',
    rsquo: '’',
    sbquo: '‚',
    ldquo: '“',
    rdquo: '”',
    bdquo: '„',
    dagger: '†',
    Dagger: '‡',
    permil: '‰',
    lsaquo: '‹',
    rsaquo: '›',
    euro: '€'
};

})()),
"[project]/node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * List of legacy HTML named character references that don’t need a trailing semicolon.
 *
 * @type {Array<string>}
 */ __turbopack_esm__({
    "characterEntitiesLegacy": ()=>characterEntitiesLegacy
});
const characterEntitiesLegacy = [
    'AElig',
    'AMP',
    'Aacute',
    'Acirc',
    'Agrave',
    'Aring',
    'Atilde',
    'Auml',
    'COPY',
    'Ccedil',
    'ETH',
    'Eacute',
    'Ecirc',
    'Egrave',
    'Euml',
    'GT',
    'Iacute',
    'Icirc',
    'Igrave',
    'Iuml',
    'LT',
    'Ntilde',
    'Oacute',
    'Ocirc',
    'Ograve',
    'Oslash',
    'Otilde',
    'Ouml',
    'QUOT',
    'REG',
    'THORN',
    'Uacute',
    'Ucirc',
    'Ugrave',
    'Uuml',
    'Yacute',
    'aacute',
    'acirc',
    'acute',
    'aelig',
    'agrave',
    'amp',
    'aring',
    'atilde',
    'auml',
    'brvbar',
    'ccedil',
    'cedil',
    'cent',
    'copy',
    'curren',
    'deg',
    'divide',
    'eacute',
    'ecirc',
    'egrave',
    'eth',
    'euml',
    'frac12',
    'frac14',
    'frac34',
    'gt',
    'iacute',
    'icirc',
    'iexcl',
    'igrave',
    'iquest',
    'iuml',
    'laquo',
    'lt',
    'macr',
    'micro',
    'middot',
    'nbsp',
    'not',
    'ntilde',
    'oacute',
    'ocirc',
    'ograve',
    'ordf',
    'ordm',
    'oslash',
    'otilde',
    'ouml',
    'para',
    'plusmn',
    'pound',
    'quot',
    'raquo',
    'reg',
    'sect',
    'shy',
    'sup1',
    'sup2',
    'sup3',
    'szlig',
    'thorn',
    'times',
    'uacute',
    'ucirc',
    'ugrave',
    'uml',
    'uuml',
    'yacute',
    'yen',
    'yuml'
];

})()),
"[project]/node_modules/.pnpm/is-decimal@2.0.1/node_modules/is-decimal/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Check if the given character code, or the character code at the first
 * character, is decimal.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is a decimal
 */ __turbopack_esm__({
    "isDecimal": ()=>isDecimal
});
function isDecimal(character) {
    const code = typeof character === 'string' ? character.charCodeAt(0) : character;
    return code >= 48 && code <= 57 /* 0-9 */ ;
}

})()),
"[project]/node_modules/.pnpm/is-alphabetical@2.0.1/node_modules/is-alphabetical/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Check if the given character code, or the character code at the first
 * character, is alphabetical.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is alphabetical.
 */ __turbopack_esm__({
    "isAlphabetical": ()=>isAlphabetical
});
function isAlphabetical(character) {
    const code = typeof character === 'string' ? character.charCodeAt(0) : character;
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}

})()),
"[project]/node_modules/.pnpm/is-alphanumerical@2.0.1/node_modules/is-alphanumerical/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "isAlphanumerical": ()=>isAlphanumerical
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$alphabetical$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$alphabetical$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-alphabetical@2.0.1/node_modules/is-alphabetical/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$decimal$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$decimal$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-decimal@2.0.1/node_modules/is-decimal/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function isAlphanumerical(character) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$alphabetical$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$alphabetical$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isAlphabetical"](character) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$decimal$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$decimal$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isDecimal"](character);
}

})()),
"[project]/node_modules/.pnpm/is-hexadecimal@2.0.1/node_modules/is-hexadecimal/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Check if the given character code, or the character code at the first
 * character, is hexadecimal.
 *
 * @param {string|number} character
 * @returns {boolean} Whether `character` is hexadecimal
 */ __turbopack_esm__({
    "isHexadecimal": ()=>isHexadecimal
});
function isHexadecimal(character) {
    const code = typeof character === 'string' ? character.charCodeAt(0) : character;
    return code >= 97 /* a */  && code <= 102 || code >= 65 /* A */  && code <= 70 || code >= 48 /* A */  && code <= 57;
}

})()),
"[project]/node_modules/.pnpm/character-reference-invalid@2.0.1/node_modules/character-reference-invalid/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Map of invalid numeric character references to their replacements, according to HTML.
 *
 * @type {Record<number, string>}
 */ __turbopack_esm__({
    "characterReferenceInvalid": ()=>characterReferenceInvalid
});
const characterReferenceInvalid = {
    0: '�',
    128: '€',
    130: '‚',
    131: 'ƒ',
    132: '„',
    133: '…',
    134: '†',
    135: '‡',
    136: 'ˆ',
    137: '‰',
    138: 'Š',
    139: '‹',
    140: 'Œ',
    142: 'Ž',
    145: '‘',
    146: '’',
    147: '“',
    148: '”',
    149: '•',
    150: '–',
    151: '—',
    152: '˜',
    153: '™',
    154: 'š',
    155: '›',
    156: 'œ',
    158: 'ž',
    159: 'Ÿ'
};

})()),
"[project]/node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */ __turbopack_esm__({
    "parseEntities": ()=>parseEntities
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$2d$legacy$40$3$2e$0$2e$0$2f$node_modules$2f$character$2d$entities$2d$legacy$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$reference$2d$invalid$40$2$2e$0$2e$1$2f$node_modules$2f$character$2d$reference$2d$invalid$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/character-reference-invalid@2.0.1/node_modules/character-reference-invalid/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$decimal$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$decimal$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-decimal@2.0.1/node_modules/is-decimal/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$hexadecimal$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$hexadecimal$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-hexadecimal@2.0.1/node_modules/is-hexadecimal/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$alphanumerical$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$alphanumerical$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/is-alphanumerical@2.0.1/node_modules/is-alphanumerical/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$decode$2d$named$2d$character$2d$reference$40$1$2e$0$2e$2$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
const fromCharCode = String.fromCharCode;
// Warning messages.
const messages = [
    '',
    /* 1: Non terminated (named) */ 'Named character references must be terminated by a semicolon',
    /* 2: Non terminated (numeric) */ 'Numeric character references must be terminated by a semicolon',
    /* 3: Empty (named) */ 'Named character references cannot be empty',
    /* 4: Empty (numeric) */ 'Numeric character references cannot be empty',
    /* 5: Unknown (named) */ 'Named character references must be known',
    /* 6: Disallowed (numeric) */ 'Numeric character references cannot be disallowed',
    /* 7: Prohibited (numeric) */ 'Numeric character references cannot be outside the permissible Unicode range'
];
function parseEntities(value, options = {}) {
    const additional = typeof options.additional === 'string' ? options.additional.charCodeAt(0) : options.additional;
    /** @type {Array<string>} */ const result = [];
    let index = 0;
    let lines = -1;
    let queue = '';
    /** @type {Point|undefined} */ let point;
    /** @type {Array<number>|undefined} */ let indent;
    if (options.position) {
        if ('start' in options.position || 'indent' in options.position) {
            // @ts-expect-error: points don’t have indent.
            indent = options.position.indent;
            // @ts-expect-error: points don’t have indent.
            point = options.position.start;
        } else {
            point = options.position;
        }
    }
    let line = (point ? point.line : 0) || 1;
    let column = (point ? point.column : 0) || 1;
    // Cache the current point.
    let previous = now();
    /** @type {number|undefined} */ let character;
    // Ensure the algorithm walks over the first character (inclusive).
    index--;
    while(++index <= value.length){
        // If the previous character was a newline.
        if (character === 10 /* `\n` */ ) {
            column = (indent ? indent[lines] : 0) || 1;
        }
        character = value.charCodeAt(index);
        if (character === 38 /* `&` */ ) {
            const following = value.charCodeAt(index + 1);
            // The behavior depends on the identity of the next character.
            if (following === 9 /* `\t` */  || following === 10 /* `\n` */  || following === 12 /* `\f` */  || following === 32 /* ` ` */  || following === 38 /* `&` */  || following === 60 /* `<` */  || Number.isNaN(following) || additional && following === additional) {
                // Not a character reference.
                // No characters are consumed, and nothing is returned.
                // This is not an error, either.
                queue += fromCharCode(character);
                column++;
                continue;
            }
            const start = index + 1;
            let begin = start;
            let end = start;
            /** @type {string} */ let type;
            if (following === 35 /* `#` */ ) {
                // Numerical reference.
                end = ++begin;
                // The behavior further depends on the next character.
                const following = value.charCodeAt(end);
                if (following === 88 /* `X` */  || following === 120 /* `x` */ ) {
                    // ASCII hexadecimal digits.
                    type = 'hexadecimal';
                    end = ++begin;
                } else {
                    // ASCII decimal digits.
                    type = 'decimal';
                }
            } else {
                // Named reference.
                type = 'named';
            }
            let characterReferenceCharacters = '';
            let characterReference = '';
            let characters = '';
            // Each type of character reference accepts different characters.
            // This test is used to detect whether a reference has ended (as the semicolon
            // is not strictly needed).
            const test = type === 'named' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$alphanumerical$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$alphanumerical$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isAlphanumerical"] : type === 'decimal' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$decimal$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$decimal$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isDecimal"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$hexadecimal$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$hexadecimal$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isHexadecimal"];
            end--;
            while(++end <= value.length){
                const following = value.charCodeAt(end);
                if (!test(following)) {
                    break;
                }
                characters += fromCharCode(following);
                // Check if we can match a legacy named reference.
                // If so, we cache that as the last viable named reference.
                // This ensures we do not need to walk backwards later.
                if (type === 'named' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$entities$2d$legacy$40$3$2e$0$2e$0$2f$node_modules$2f$character$2d$entities$2d$legacy$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterEntitiesLegacy"].includes(characters)) {
                    characterReferenceCharacters = characters;
                    // @ts-expect-error: always able to decode.
                    characterReference = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$decode$2d$named$2d$character$2d$reference$40$1$2e$0$2e$2$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["decodeNamedCharacterReference"](characters);
                }
            }
            let terminated = value.charCodeAt(end) === 59 /* `;` */ ;
            if (terminated) {
                end++;
                const namedReference = type === 'named' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$decode$2d$named$2d$character$2d$reference$40$1$2e$0$2e$2$2f$node_modules$2f$decode$2d$named$2d$character$2d$reference$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["decodeNamedCharacterReference"](characters) : false;
                if (namedReference) {
                    characterReferenceCharacters = characters;
                    characterReference = namedReference;
                }
            }
            let diff = 1 + end - start;
            let reference = '';
            if (!terminated && options.nonTerminated === false) {
            // Empty.
            } else if (!characters) {
                // An empty (possible) reference is valid, unless it’s numeric (thus an
                // ampersand followed by an octothorp).
                if (type !== 'named') {
                    warning(4 /* Empty (numeric) */ , diff);
                }
            } else if (type === 'named') {
                // An ampersand followed by anything unknown, and not terminated, is
                // invalid.
                if (terminated && !characterReference) {
                    warning(5 /* Unknown (named) */ , 1);
                } else {
                    // If there’s something after an named reference which is not known,
                    // cap the reference.
                    if (characterReferenceCharacters !== characters) {
                        end = begin + characterReferenceCharacters.length;
                        diff = 1 + end - begin;
                        terminated = false;
                    }
                    // If the reference is not terminated, warn.
                    if (!terminated) {
                        const reason = characterReferenceCharacters ? 1 /* Non terminated (named) */  : 3 /* Empty (named) */ ;
                        if (options.attribute) {
                            const following = value.charCodeAt(end);
                            if (following === 61 /* `=` */ ) {
                                warning(reason, diff);
                                characterReference = '';
                            } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$is$2d$alphanumerical$40$2$2e$0$2e$1$2f$node_modules$2f$is$2d$alphanumerical$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["isAlphanumerical"](following)) {
                                characterReference = '';
                            } else {
                                warning(reason, diff);
                            }
                        } else {
                            warning(reason, diff);
                        }
                    }
                }
                reference = characterReference;
            } else {
                if (!terminated) {
                    // All nonterminated numeric references are not rendered, and emit a
                    // warning.
                    warning(2 /* Non terminated (numeric) */ , diff);
                }
                // When terminated and numerical, parse as either hexadecimal or
                // decimal.
                let referenceCode = Number.parseInt(characters, type === 'hexadecimal' ? 16 : 10);
                // Emit a warning when the parsed number is prohibited, and replace with
                // replacement character.
                if (prohibited(referenceCode)) {
                    warning(7 /* Prohibited (numeric) */ , diff);
                    reference = fromCharCode(65533 /* `�` */ );
                } else if (referenceCode in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$reference$2d$invalid$40$2$2e$0$2e$1$2f$node_modules$2f$character$2d$reference$2d$invalid$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterReferenceInvalid"]) {
                    // Emit a warning when the parsed number is disallowed, and replace by
                    // an alternative.
                    warning(6 /* Disallowed (numeric) */ , diff);
                    reference = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$character$2d$reference$2d$invalid$40$2$2e$0$2e$1$2f$node_modules$2f$character$2d$reference$2d$invalid$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["characterReferenceInvalid"][referenceCode];
                } else {
                    // Parse the number.
                    let output = '';
                    // Emit a warning when the parsed number should not be used.
                    if (disallowed(referenceCode)) {
                        warning(6 /* Disallowed (numeric) */ , diff);
                    }
                    // Serialize the number.
                    if (referenceCode > 0xffff) {
                        referenceCode -= 0x10000;
                        output += fromCharCode(referenceCode >>> (10 & 0x3ff) | 0xd800);
                        referenceCode = 0xdc00 | referenceCode & 0x3ff;
                    }
                    reference = output + fromCharCode(referenceCode);
                }
            }
            // Found it!
            // First eat the queued characters as normal text, then eat a reference.
            if (reference) {
                flush();
                previous = now();
                index = end - 1;
                column += end - start + 1;
                result.push(reference);
                const next = now();
                next.offset++;
                if (options.reference) {
                    options.reference.call(options.referenceContext, reference, {
                        start: previous,
                        end: next
                    }, value.slice(start - 1, end));
                }
                previous = next;
            } else {
                // If we could not find a reference, queue the checked characters (as
                // normal characters), and move the pointer to their end.
                // This is possible because we can be certain neither newlines nor
                // ampersands are included.
                characters = value.slice(start - 1, end);
                queue += characters;
                column += characters.length;
                index = end - 1;
            }
        } else {
            // Handle anything other than an ampersand, including newlines and EOF.
            if (character === 10 /* `\n` */ ) {
                line++;
                lines++;
                column = 0;
            }
            if (Number.isNaN(character)) {
                flush();
            } else {
                queue += fromCharCode(character);
                column++;
            }
        }
    }
    // Return the reduced nodes.
    return result.join('');
    // Get current position.
    function now() {
        return {
            line,
            column,
            offset: index + ((point ? point.offset : 0) || 0)
        };
    }
    /**
   * Handle the warning.
   *
   * @param {1|2|3|4|5|6|7} code
   * @param {number} offset
   */ function warning(code, offset) {
        /** @type {ReturnType<now>} */ let position;
        if (options.warning) {
            position = now();
            position.column += offset;
            position.offset += offset;
            options.warning.call(options.warningContext, messages[code], position, code);
        }
    }
    /**
   * Flush `queue` (normal text).
   * Macro invoked before each reference and at the end of `value`.
   * Does nothing when `queue` is empty.
   */ function flush() {
        if (queue) {
            result.push(queue);
            if (options.text) {
                options.text.call(options.textContext, queue, {
                    start: previous,
                    end: now()
                });
            }
            queue = '';
        }
    }
}
/**
 * Check if `character` is outside the permissible unicode range.
 *
 * @param {number} code
 * @returns {boolean}
 */ function prohibited(code) {
    return code >= 0xd800 && code <= 0xdfff || code > 0x10ffff;
}
/**
 * Check if `character` is disallowed.
 *
 * @param {number} code
 * @returns {boolean}
 */ function disallowed(code) {
    return code >= 0x0001 && code <= 0x0008 || code === 0x000b || code >= 0x000d && code <= 0x001f || code >= 0x007f && code <= 0x009f || code >= 0xfdd0 && code <= 0xfdef || (code & 0xffff) === 0xffff || (code & 0xffff) === 0xfffe;
}

})()),
"[project]/node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: more types exposed from `index.d.ts`.
// To do: refactor to include type parameters in JS.
__turbopack_esm__({
    "parseEntities": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$parse$2d$entities$40$4$2e$0$2e$1$2f$node_modules$2f$parse$2d$entities$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["parseEntities"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$parse$2d$entities$40$4$2e$0$2e$1$2f$node_modules$2f$parse$2d$entities$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/ccount@2.0.1/node_modules/ccount/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Count how often a character (or substring) is used in a string.
 *
 * @param {string} value
 *   Value to search in.
 * @param {string} character
 *   Character (or substring) to look for.
 * @return {number}
 *   Number of times `character` occurred in `value`.
 */ __turbopack_esm__({
    "ccount": ()=>ccount
});
function ccount(value, character) {
    const source = String(value);
    if (typeof character !== 'string') {
        throw new TypeError('Expected character');
    }
    let count = 0;
    let index = source.indexOf(character);
    while(index !== -1){
        count++;
        index = source.indexOf(character, index + character.length);
    }
    return count;
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx-jsx@3.0.0/node_modules/mdast-util-mdx-jsx/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-from-markdown').OnEnterError} OnEnterError
 * @typedef {import('mdast-util-from-markdown').OnExitError} OnExitError
 * @typedef {import('mdast-util-from-markdown').Token} Token
 *
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').State} State
 * @typedef {import('mdast-util-to-markdown').Tracker} Tracker
 *
 * @typedef {import('../index.js').MdxJsxAttribute} MdxJsxAttribute
 * @typedef {import('../index.js').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression
 * @typedef {import('../index.js').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute
 * @typedef {import('../index.js').MdxJsxFlowElement} MdxJsxFlowElement
 * @typedef {import('../index.js').MdxJsxTextElement} MdxJsxTextElement
 */ /**
 * @typedef Tag
 *   Single tag.
 * @property {string | undefined} name
 *   Name of tag, or `undefined` for fragment.
 *
 *   > 👉 **Note**: `null` is used in the AST for fragments, as it serializes in
 *   > JSON.
 * @property {Array<MdxJsxAttribute | MdxJsxExpressionAttribute>} attributes
 *   Attributes.
 * @property {boolean} close
 *   Whether the tag is closing (`</x>`).
 * @property {boolean} selfClosing
 *   Whether the tag is self-closing (`<x/>`).
 * @property {Token['start']} start
 *   Start point.
 * @property {Token['start']} end
 *   End point.
 *
 * @typedef ToMarkdownOptions
 *   Configuration.
 * @property {'"' | "'" | null | undefined} [quote='"']
 *   Preferred quote to use around attribute values (default: `'"'`).
 * @property {boolean | null | undefined} [quoteSmart=false]
 *   Use the other quote if that results in less bytes (default: `false`).
 * @property {boolean | null | undefined} [tightSelfClosing=false]
 *   Do not use an extra space when closing self-closing elements: `<img/>`
 *   instead of `<img />` (default: `false`).
 * @property {number | null | undefined} [printWidth=Infinity]
 *   Try and wrap syntax at this width (default: `Infinity`).
 *
 *   When set to a finite number (say, `80`), the formatter will print
 *   attributes on separate lines when a tag doesn’t fit on one line.
 *   The normal behavior is to print attributes with spaces between them
 *   instead of line endings.
 */ __turbopack_esm__({
    "mdxJsxFromMarkdown": ()=>mdxJsxFromMarkdown,
    "mdxJsxToMarkdown": ()=>mdxJsxToMarkdown
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$ccount$40$2$2e$0$2e$1$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/ccount@2.0.1/node_modules/ccount/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$parse$2d$entities$40$4$2e$0$2e$1$2f$node_modules$2f$parse$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
const indent = '  ';
function mdxJsxFromMarkdown() {
    return {
        canContainEols: [
            'mdxJsxTextElement'
        ],
        enter: {
            mdxJsxFlowTag: enterMdxJsxTag,
            mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,
            mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,
            mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,
            mdxJsxFlowTagAttributeValueLiteral: buffer,
            mdxJsxFlowTagAttributeValueExpression: buffer,
            mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,
            mdxJsxTextTag: enterMdxJsxTag,
            mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,
            mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,
            mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,
            mdxJsxTextTagAttributeValueLiteral: buffer,
            mdxJsxTextTagAttributeValueExpression: buffer,
            mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker
        },
        exit: {
            mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,
            mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,
            mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,
            mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,
            mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,
            mdxJsxFlowTagExpressionAttributeValue: data,
            mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,
            mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,
            mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,
            mdxJsxFlowTagAttributeValueLiteralValue: data,
            mdxJsxFlowTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,
            mdxJsxFlowTagAttributeValueExpressionValue: data,
            mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,
            mdxJsxFlowTag: exitMdxJsxTag,
            mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,
            mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,
            mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,
            mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,
            mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,
            mdxJsxTextTagExpressionAttributeValue: data,
            mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,
            mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,
            mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,
            mdxJsxTextTagAttributeValueLiteralValue: data,
            mdxJsxTextTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,
            mdxJsxTextTagAttributeValueExpressionValue: data,
            mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,
            mdxJsxTextTag: exitMdxJsxTag
        }
    };
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function buffer() {
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function data(token) {
        this.config.enter.data.call(this, token);
        this.config.exit.data.call(this, token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTag(token) {
        /** @type {Tag} */ const tag = {
            name: undefined,
            attributes: [],
            close: false,
            selfClosing: false,
            start: token.start,
            end: token.end
        };
        if (!this.data.mdxJsxTagStack) this.data.mdxJsxTagStack = [];
        this.data.mdxJsxTag = tag;
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagClosingMarker(token) {
        const stack = this.data.mdxJsxTagStack;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](stack, 'expected `mdxJsxTagStack`');
        if (stack.length === 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected closing slash `/` in tag, expected an open tag first', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-closing-slash');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagAnyAttribute(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        if (tag.close) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected attribute in closing tag, expected the end of the tag', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-attribute');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagSelfClosingMarker(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        if (tag.close) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected self-closing slash `/` in closing tag, expected the end of the tag', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-self-closing-slash');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagClosingMarker() {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        tag.close = true;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNamePrimary(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        tag.name = this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNameMember(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        tag.name += '.' + this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNameLocal(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        tag.name += ':' + this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagAttribute(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        enterMdxJsxTagAnyAttribute.call(this, token);
        tag.attributes.push({
            type: 'mdxJsxAttribute',
            name: '',
            value: null
        });
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagExpressionAttribute(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        enterMdxJsxTagAnyAttribute.call(this, token);
        tag.attributes.push({
            type: 'mdxJsxExpressionAttribute',
            value: ''
        });
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagExpressionAttribute(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        const tail = tag.attributes[tag.attributes.length - 1];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tail.type === 'mdxJsxExpressionAttribute');
        const estree = token.estree;
        tail.value = this.resume();
        if (estree) {
            tail.data = {
                estree
            };
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeNamePrimary(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        const node = tag.attributes[tag.attributes.length - 1];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](node.type === 'mdxJsxAttribute');
        node.name = this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeNameLocal(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        const node = tag.attributes[tag.attributes.length - 1];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](node.type === 'mdxJsxAttribute');
        node.name += ':' + this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeValueLiteral() {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        tag.attributes[tag.attributes.length - 1].value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$parse$2d$entities$40$4$2e$0$2e$1$2f$node_modules$2f$parse$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["parseEntities"](this.resume(), {
            nonTerminated: false
        });
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeValueExpression(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        const tail = tag.attributes[tag.attributes.length - 1];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tail.type === 'mdxJsxAttribute');
        /** @type {MdxJsxAttributeValueExpression} */ const node = {
            type: 'mdxJsxAttributeValueExpression',
            value: this.resume()
        };
        const estree = token.estree;
        if (estree) {
            node.data = {
                estree
            };
        }
        tail.value = node;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagSelfClosingMarker() {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        tag.selfClosing = true;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTag(token) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        const stack = this.data.mdxJsxTagStack;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](stack, 'expected `mdxJsxTagStack`');
        const tail = stack[stack.length - 1];
        if (tag.close && tail.name !== tag.name) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected closing tag `' + serializeAbbreviatedTag(tag) + '`, expected corresponding closing tag for `' + serializeAbbreviatedTag(tail) + '` (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"](tail) + ')', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:end-tag-mismatch');
        }
        // End of a tag, so drop the buffer.
        this.resume();
        if (tag.close) {
            stack.pop();
        } else {
            this.enter({
                type: token.type === 'mdxJsxTextTag' ? 'mdxJsxTextElement' : 'mdxJsxFlowElement',
                name: tag.name || null,
                attributes: tag.attributes,
                children: []
            }, token, onErrorRightIsTag);
        }
        if (tag.selfClosing || tag.close) {
            this.exit(token, onErrorLeftIsTag);
        } else {
            stack.push(tag);
        }
    }
    /**
   * @this {CompileContext}
   * @type {OnEnterError}
   */ function onErrorRightIsTag(closing, open) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        const place = closing ? ' before the end of `' + closing.type + '`' : '';
        const position = closing ? {
            start: closing.start,
            end: closing.end
        } : undefined;
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Expected a closing tag for `' + serializeAbbreviatedTag(tag) + '` (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"]({
            start: open.start,
            end: open.end
        }) + ')' + place, position, 'mdast-util-mdx-jsx:end-tag-mismatch');
    }
    /**
   * @this {CompileContext}
   * @type {OnExitError}
   */ function onErrorLeftIsTag(a, b) {
        const tag = this.data.mdxJsxTag;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](tag, 'expected `mdxJsxTag`');
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Expected the closing tag `' + serializeAbbreviatedTag(tag) + '` either after the end of `' + b.type + '` (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"](b.end) + ') or another opening tag after the start of `' + b.type + '` (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$4$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"](b.start) + ')', {
            start: a.start,
            end: a.end
        }, 'mdast-util-mdx-jsx:end-tag-mismatch');
    }
    /**
   * Serialize a tag, excluding attributes.
   * `self-closing` is not supported, because we don’t need it yet.
   *
   * @param {Tag} tag
   * @returns {string}
   */ function serializeAbbreviatedTag(tag) {
        return '<' + (tag.close ? '/' : '') + (tag.name || '') + '>';
    }
}
function mdxJsxToMarkdown(options) {
    const options_ = options || {};
    const quote = options_.quote || '"';
    const quoteSmart = options_.quoteSmart || false;
    const tightSelfClosing = options_.tightSelfClosing || false;
    const printWidth = options_.printWidth || Number.POSITIVE_INFINITY;
    const alternative = quote === '"' ? "'" : '"';
    if (quote !== '"' && quote !== "'") {
        throw new Error('Cannot serialize attribute values with `' + quote + '` for `options.quote`, expected `"`, or `\'`');
    }
    mdxElement.peek = peekElement;
    return {
        handlers: {
            mdxJsxFlowElement: mdxElement,
            mdxJsxTextElement: mdxElement
        },
        unsafe: [
            {
                character: '<',
                inConstruct: [
                    'phrasing'
                ]
            },
            {
                atBreak: true,
                character: '<'
            }
        ],
        // Always generate fenced code (never indented code).
        fences: true,
        // Always generate links with resources (never autolinks).
        resourceLink: true
    };
    /**
   * @type {ToMarkdownHandle}
   * @param {MdxJsxFlowElement | MdxJsxTextElement} node
   */ // eslint-disable-next-line complexity
    function mdxElement(node, _, state, info) {
        const flow = node.type === 'mdxJsxFlowElement';
        const selfClosing = node.name ? !node.children || node.children.length === 0 : false;
        const depth = inferDepth(state);
        const currentIndent = createIndent(depth);
        const trackerOneLine = state.createTracker(info);
        const trackerMultiLine = state.createTracker(info);
        /** @type {Array<string>} */ const serializedAttributes = [];
        const prefix = (flow ? currentIndent : '') + '<' + (node.name || '');
        const exit = state.enter(node.type);
        trackerOneLine.move(prefix);
        trackerMultiLine.move(prefix);
        // None.
        if (node.attributes && node.attributes.length > 0) {
            if (!node.name) {
                throw new Error('Cannot serialize fragment w/ attributes');
            }
            let index = -1;
            while(++index < node.attributes.length){
                const attribute = node.attributes[index];
                /** @type {string} */ let result;
                if (attribute.type === 'mdxJsxExpressionAttribute') {
                    result = '{' + (attribute.value || '') + '}';
                } else {
                    if (!attribute.name) {
                        throw new Error('Cannot serialize attribute w/o name');
                    }
                    const value = attribute.value;
                    const left = attribute.name;
                    /** @type {string} */ let right = '';
                    if (value === null || value === undefined) {
                    // Empty.
                    } else if (typeof value === 'object') {
                        right = '{' + (value.value || '') + '}';
                    } else {
                        // If the alternative is less common than `quote`, switch.
                        const appliedQuote = quoteSmart && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$ccount$40$2$2e$0$2e$1$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ccount"](value, quote) > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$ccount$40$2$2e$0$2e$1$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ccount"](value, alternative) ? alternative : quote;
                        right = appliedQuote + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyEntitiesLight"](value, {
                            subset: [
                                appliedQuote
                            ]
                        }) + appliedQuote;
                    }
                    result = left + (right ? '=' : '') + right;
                }
                serializedAttributes.push(result);
            }
        }
        let attributesOnTheirOwnLine = false;
        const attributesOnOneLine = serializedAttributes.join(' ');
        if (// Block:
        flow && // Including a line ending (expressions).
        (/\r?\n|\r/.test(attributesOnOneLine) || // Current position (including `<tag`).
        trackerOneLine.current().now.column + // -1 because columns, +1 for ` ` before attributes.
        // Attributes joined by spaces.
        attributesOnOneLine.length + // ` />`.
        (selfClosing ? tightSelfClosing ? 2 : 3 : 1) > printWidth)) {
            attributesOnTheirOwnLine = true;
        }
        let tracker = trackerOneLine;
        let value = prefix;
        if (attributesOnTheirOwnLine) {
            tracker = trackerMultiLine;
            let index = -1;
            while(++index < serializedAttributes.length){
                // Only indent first line of of attributes, we can’t indent attribute
                // values.
                serializedAttributes[index] = currentIndent + indent + serializedAttributes[index];
            }
            value += tracker.move('\n' + serializedAttributes.join('\n') + '\n' + currentIndent);
        } else if (attributesOnOneLine) {
            value += tracker.move(' ' + attributesOnOneLine);
        }
        if (selfClosing) {
            value += tracker.move((tightSelfClosing || attributesOnTheirOwnLine ? '' : ' ') + '/');
        }
        value += tracker.move('>');
        if (node.children && node.children.length > 0) {
            if (node.type === 'mdxJsxTextElement') {
                value += tracker.move(// @ts-expect-error: `containerPhrasing` is typed correctly, but TS
                // generates *hardcoded* types, which means that our dynamically added
                // directives are not present.
                // At some point, TS should fix that, and `from-markdown` should be fine.
                state.containerPhrasing(node, {
                    ...tracker.current(),
                    before: '>',
                    after: '<'
                }));
            } else {
                tracker.shift(2);
                value += tracker.move('\n');
                value += tracker.move(containerFlow(node, state, tracker.current()));
                value += tracker.move('\n');
            }
        }
        if (!selfClosing) {
            value += tracker.move((flow ? currentIndent : '') + '</' + (node.name || '') + '>');
        }
        exit();
        return value;
    }
}
// Modified copy of:
// <https://github.com/syntax-tree/mdast-util-to-markdown/blob/a381cbc/lib/util/container-flow.js>.
//
// To do: add `indent` support to `mdast-util-to-markdown`.
// As indents are only used for JSX, it’s fine for now, but perhaps better
// there.
/**
 * @param {MdxJsxFlowElement} parent
 *   Parent of flow nodes.
 * @param {State} state
 *   Info passed around about the current state.
 * @param {ReturnType<Tracker['current']>} info
 *   Info on where we are in the document we are generating.
 * @returns {string}
 *   Serialized children, joined by (blank) lines.
 */ function containerFlow(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children;
    const tracker = state.createTracker(info);
    const currentIndent = createIndent(inferDepth(state));
    /** @type {Array<string>} */ const results = [];
    let index = -1;
    indexStack.push(-1);
    while(++index < children.length){
        const child = children[index];
        indexStack[indexStack.length - 1] = index;
        const childInfo = {
            before: '\n',
            after: '\n',
            ...tracker.current()
        };
        const result = state.handle(child, parent, state, childInfo);
        const serializedChild = child.type === 'mdxJsxFlowElement' ? result : state.indentLines(result, function(line, _, blank) {
            return (blank ? '' : currentIndent) + line;
        });
        results.push(tracker.move(serializedChild));
        if (child.type !== 'list') {
            state.bulletLastUsed = undefined;
        }
        if (index < children.length - 1) {
            results.push(tracker.move('\n\n'));
        }
    }
    indexStack.pop();
    return results.join('');
}
/**
 *
 * @param {State} state
 * @returns {number}
 */ function inferDepth(state) {
    let depth = 0;
    for (const x of state.stack){
        if (x === 'mdxJsxFlowElement') {
            depth++;
        }
    }
    return depth;
}
/**
 * @param {number} depth
 * @returns {string}
 */ function createIndent(depth) {
    return indent.repeat(depth);
}
/**
 * @type {ToMarkdownHandle}
 */ function peekElement() {
    return '<';
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx-jsx@3.0.0/node_modules/mdast-util-mdx-jsx/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxJsxFromMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxFromMarkdown"],
    "mdxJsxToMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxToMarkdown"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx-jsx@3.0.0/node_modules/mdast-util-mdx-jsx/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx-jsx@2.1.4/node_modules/mdast-util-mdx-jsx/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').Program} Program
 *
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 * @typedef {import('mdast-util-from-markdown').Token} Token
 * @typedef {import('mdast-util-from-markdown').OnEnterError} OnEnterError
 * @typedef {import('mdast-util-from-markdown').OnExitError} OnExitError
 *
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').State} State
 * @typedef {import('mdast-util-to-markdown').Tracker} Tracker
 *
 * @typedef {import('../index.js').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression
 * @typedef {import('../index.js').MdxJsxAttribute} MdxJsxAttribute
 * @typedef {import('../index.js').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute
 * @typedef {import('../index.js').MdxJsxFlowElement} MdxJsxFlowElement
 * @typedef {import('../index.js').MdxJsxTextElement} MdxJsxTextElement
 */ /**
 * @typedef Tag
 *   Single tag.
 * @property {string | undefined} name
 *   Name of tag, or `undefined` for fragment.
 *
 *   > 👉 **Note**: `null` is used in the AST for fragments, as it serializes in
 *   > JSON.
 * @property {Array<MdxJsxAttribute | MdxJsxExpressionAttribute>} attributes
 *   Attributes.
 * @property {boolean} close
 *   Whether the tag is closing (`</x>`).
 * @property {boolean} selfClosing
 *   Whether the tag is self-closing (`<x/>`).
 * @property {Token['start']} start
 *   Start point.
 * @property {Token['start']} end
 *   End point.
 *
 * @typedef ToMarkdownOptions
 *   Configuration.
 * @property {'"' | "'" | null | undefined} [quote='"']
 *   Preferred quote to use around attribute values.
 * @property {boolean | null | undefined} [quoteSmart=false]
 *   Use the other quote if that results in less bytes.
 * @property {boolean | null | undefined} [tightSelfClosing=false]
 *   Do not use an extra space when closing self-closing elements: `<img/>`
 *   instead of `<img />`.
 * @property {number | null | undefined} [printWidth=Infinity]
 *   Try and wrap syntax at this width.
 *
 *   When set to a finite number (say, `80`), the formatter will print
 *   attributes on separate lines when a tag doesn’t fit on one line.
 *   The normal behavior is to print attributes with spaces between them
 *   instead of line endings.
 */ __turbopack_esm__({
    "mdxJsxFromMarkdown": ()=>mdxJsxFromMarkdown,
    "mdxJsxToMarkdown": ()=>mdxJsxToMarkdown
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$ccount$40$2$2e$0$2e$1$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/ccount@2.0.1/node_modules/ccount/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$parse$2d$entities$40$4$2e$0$2e$1$2f$node_modules$2f$parse$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/stringify-entities@4.0.3/node_modules/stringify-entities/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$markdown$40$1$2e$5$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$container$2d$phrasing$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$markdown$40$1$2e$5$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$indent$2d$lines$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$markdown$40$1$2e$5$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$track$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/track.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
// To do: next major: use `state`, use utilities from state, rename `safeOptions` to `info`.
const indent = '  ';
function mdxJsxFromMarkdown() {
    return {
        canContainEols: [
            'mdxJsxTextElement'
        ],
        enter: {
            mdxJsxFlowTag: enterMdxJsxTag,
            mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,
            mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,
            mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,
            mdxJsxFlowTagAttributeValueLiteral: buffer,
            mdxJsxFlowTagAttributeValueExpression: buffer,
            mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,
            mdxJsxTextTag: enterMdxJsxTag,
            mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,
            mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,
            mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,
            mdxJsxTextTagAttributeValueLiteral: buffer,
            mdxJsxTextTagAttributeValueExpression: buffer,
            mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker
        },
        exit: {
            mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,
            mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,
            mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,
            mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,
            mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,
            mdxJsxFlowTagExpressionAttributeValue: data,
            mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,
            mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,
            mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,
            mdxJsxFlowTagAttributeValueLiteralValue: data,
            mdxJsxFlowTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,
            mdxJsxFlowTagAttributeValueExpressionValue: data,
            mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,
            mdxJsxFlowTag: exitMdxJsxTag,
            mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,
            mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,
            mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,
            mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,
            mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,
            mdxJsxTextTagExpressionAttributeValue: data,
            mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,
            mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,
            mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,
            mdxJsxTextTagAttributeValueLiteralValue: data,
            mdxJsxTextTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,
            mdxJsxTextTagAttributeValueExpressionValue: data,
            mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,
            mdxJsxTextTag: exitMdxJsxTag
        }
    };
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function buffer() {
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function data(token) {
        this.config.enter.data.call(this, token);
        this.config.exit.data.call(this, token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTag(token) {
        /** @type {Tag} */ const tag = {
            name: undefined,
            attributes: [],
            close: false,
            selfClosing: false,
            start: token.start,
            end: token.end
        };
        if (!this.getData('mdxJsxTagStack')) this.setData('mdxJsxTagStack', []);
        this.setData('mdxJsxTag', tag);
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagClosingMarker(token) {
        const stack = this.getData('mdxJsxTagStack');
        if (stack.length === 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected closing slash `/` in tag, expected an open tag first', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-closing-slash');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagAnyAttribute(token) {
        const tag = this.getData('mdxJsxTag');
        if (tag.close) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected attribute in closing tag, expected the end of the tag', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-attribute');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagSelfClosingMarker(token) {
        const tag = this.getData('mdxJsxTag');
        if (tag.close) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected self-closing slash `/` in closing tag, expected the end of the tag', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:unexpected-self-closing-slash');
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagClosingMarker() {
        const tag = this.getData('mdxJsxTag');
        tag.close = true;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNamePrimary(token) {
        const tag = this.getData('mdxJsxTag');
        tag.name = this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNameMember(token) {
        const tag = this.getData('mdxJsxTag');
        tag.name += '.' + this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagNameLocal(token) {
        const tag = this.getData('mdxJsxTag');
        tag.name += ':' + this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagAttribute(token) {
        const tag = this.getData('mdxJsxTag');
        enterMdxJsxTagAnyAttribute.call(this, token);
        tag.attributes.push({
            type: 'mdxJsxAttribute',
            name: '',
            value: null
        });
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function enterMdxJsxTagExpressionAttribute(token) {
        const tag = this.getData('mdxJsxTag');
        enterMdxJsxTagAnyAttribute.call(this, token);
        tag.attributes.push({
            type: 'mdxJsxExpressionAttribute',
            value: ''
        });
        this.buffer();
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagExpressionAttribute(token) {
        const tag = this.getData('mdxJsxTag');
        const tail = tag.attributes[tag.attributes.length - 1];
        /** @type {Program | undefined} */ // @ts-expect-error: custom.
        const estree = token.estree;
        tail.value = this.resume();
        if (estree) {
            tail.data = {
                estree
            };
        }
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeNamePrimary(token) {
        const tag = this.getData('mdxJsxTag');
        const node = tag.attributes[tag.attributes.length - 1];
        node.name = this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeNameLocal(token) {
        const tag = this.getData('mdxJsxTag');
        const node = tag.attributes[tag.attributes.length - 1];
        node.name += ':' + this.sliceSerialize(token);
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeValueLiteral() {
        const tag = this.getData('mdxJsxTag');
        tag.attributes[tag.attributes.length - 1].value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$parse$2d$entities$40$4$2e$0$2e$1$2f$node_modules$2f$parse$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["parseEntities"](this.resume(), {
            nonTerminated: false
        });
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagAttributeValueExpression(token) {
        const tag = this.getData('mdxJsxTag');
        const tail = tag.attributes[tag.attributes.length - 1];
        /** @type {MdxJsxAttributeValueExpression} */ const node = {
            type: 'mdxJsxAttributeValueExpression',
            value: this.resume()
        };
        /** @type {Program | undefined} */ // @ts-expect-error: custom.
        const estree = token.estree;
        if (estree) {
            node.data = {
                estree
            };
        }
        tail.value = node;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTagSelfClosingMarker() {
        const tag = this.getData('mdxJsxTag');
        tag.selfClosing = true;
    }
    /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */ function exitMdxJsxTag(token) {
        const tag = this.getData('mdxJsxTag');
        const stack = this.getData('mdxJsxTagStack');
        const tail = stack[stack.length - 1];
        if (tag.close && tail.name !== tag.name) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected closing tag `' + serializeAbbreviatedTag(tag) + '`, expected corresponding closing tag for `' + serializeAbbreviatedTag(tail) + '` (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"](tail) + ')', {
                start: token.start,
                end: token.end
            }, 'mdast-util-mdx-jsx:end-tag-mismatch');
        }
        // End of a tag, so drop the buffer.
        this.resume();
        if (tag.close) {
            stack.pop();
        } else {
            this.enter({
                type: token.type === 'mdxJsxTextTag' ? 'mdxJsxTextElement' : 'mdxJsxFlowElement',
                name: tag.name || null,
                attributes: tag.attributes,
                children: []
            }, token, onErrorRightIsTag);
        }
        if (tag.selfClosing || tag.close) {
            this.exit(token, onErrorLeftIsTag);
        } else {
            stack.push(tag);
        }
    }
    /**
   * @this {CompileContext}
   * @type {OnEnterError}
   */ function onErrorRightIsTag(closing, open) {
        const tag = this.getData('mdxJsxTag');
        const place = closing ? ' before the end of `' + closing.type + '`' : '';
        const position = closing ? {
            start: closing.start,
            end: closing.end
        } : undefined;
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Expected a closing tag for `' + serializeAbbreviatedTag(tag) + '` (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"]({
            start: open.start,
            end: open.end
        }) + ')' + place, position, 'mdast-util-mdx-jsx:end-tag-mismatch');
    }
    /**
   * @this {CompileContext}
   * @type {OnExitError}
   */ function onErrorLeftIsTag(a, b) {
        const tag = this.getData('mdxJsxTag');
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Expected the closing tag `' + serializeAbbreviatedTag(tag) + '` either after the end of `' + b.type + '` (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"](b.end) + ') or another opening tag after the start of `' + b.type + '` (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$stringify$2d$position$40$3$2e$0$2e$3$2f$node_modules$2f$unist$2d$util$2d$stringify$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyPosition"](b.start) + ')', {
            start: a.start,
            end: a.end
        }, 'mdast-util-mdx-jsx:end-tag-mismatch');
    }
    /**
   * Serialize a tag, excluding attributes.
   * `self-closing` is not supported, because we don’t need it yet.
   *
   * @param {Tag} tag
   * @returns {string}
   */ function serializeAbbreviatedTag(tag) {
        return '<' + (tag.close ? '/' : '') + (tag.name || '') + '>';
    }
}
function mdxJsxToMarkdown(options) {
    const options_ = options || {};
    const quote = options_.quote || '"';
    const quoteSmart = options_.quoteSmart || false;
    const tightSelfClosing = options_.tightSelfClosing || false;
    const printWidth = options_.printWidth || Number.POSITIVE_INFINITY;
    const alternative = quote === '"' ? "'" : '"';
    if (quote !== '"' && quote !== "'") {
        throw new Error('Cannot serialize attribute values with `' + quote + '` for `options.quote`, expected `"`, or `\'`');
    }
    mdxElement.peek = peekElement;
    return {
        handlers: {
            mdxJsxFlowElement: mdxElement,
            mdxJsxTextElement: mdxElement
        },
        unsafe: [
            {
                character: '<',
                inConstruct: [
                    'phrasing'
                ]
            },
            {
                atBreak: true,
                character: '<'
            }
        ],
        // Always generate fenced code (never indented code).
        fences: true,
        // Always generate links with resources (never autolinks).
        resourceLink: true
    };
    /**
   * @type {ToMarkdownHandle}
   * @param {MdxJsxFlowElement | MdxJsxTextElement} node
   */ // eslint-disable-next-line complexity
    function mdxElement(node, _, context, safeOptions) {
        const flow = node.type === 'mdxJsxFlowElement';
        const selfClosing = node.name ? !node.children || node.children.length === 0 : false;
        const depth = inferDepth(context);
        const currentIndent = createIndent(depth);
        const trackerOneLine = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$markdown$40$1$2e$5$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$track$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["track"](safeOptions);
        const trackerMultiLine = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$markdown$40$1$2e$5$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$track$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["track"](safeOptions);
        /** @type {Array<string>} */ const serializedAttributes = [];
        const prefix = (flow ? currentIndent : '') + '<' + (node.name || '');
        const exit = context.enter(node.type);
        trackerOneLine.move(prefix);
        trackerMultiLine.move(prefix);
        // None.
        if (node.attributes && node.attributes.length > 0) {
            if (!node.name) {
                throw new Error('Cannot serialize fragment w/ attributes');
            }
            let index = -1;
            while(++index < node.attributes.length){
                const attribute = node.attributes[index];
                /** @type {string} */ let result;
                if (attribute.type === 'mdxJsxExpressionAttribute') {
                    result = '{' + (attribute.value || '') + '}';
                } else {
                    if (!attribute.name) {
                        throw new Error('Cannot serialize attribute w/o name');
                    }
                    const value = attribute.value;
                    const left = attribute.name;
                    /** @type {string} */ let right = '';
                    if (value === undefined || value === null) {
                    // Empty.
                    } else if (typeof value === 'object') {
                        right = '{' + (value.value || '') + '}';
                    } else {
                        // If the alternative is less common than `quote`, switch.
                        const appliedQuote = quoteSmart && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$ccount$40$2$2e$0$2e$1$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ccount"](value, quote) > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$ccount$40$2$2e$0$2e$1$2f$node_modules$2f$ccount$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ccount"](value, alternative) ? alternative : quote;
                        right = appliedQuote + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$stringify$2d$entities$40$4$2e$0$2e$3$2f$node_modules$2f$stringify$2d$entities$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringifyEntitiesLight"](value, {
                            subset: [
                                appliedQuote
                            ]
                        }) + appliedQuote;
                    }
                    result = left + (right ? '=' : '') + right;
                }
                serializedAttributes.push(result);
            }
        }
        let attributesOnTheirOwnLine = false;
        const attributesOnOneLine = serializedAttributes.join(' ');
        if (// Block:
        flow && // Including a line ending (expressions).
        (/\r?\n|\r/.test(attributesOnOneLine) || // Current position (including `<tag`).
        trackerOneLine.current().now.column + // -1 because columns, +1 for ` ` before attributes.
        // Attributes joined by spaces.
        attributesOnOneLine.length + // ` />`.
        (selfClosing ? tightSelfClosing ? 2 : 3 : 1) > printWidth)) {
            attributesOnTheirOwnLine = true;
        }
        let tracker = trackerOneLine;
        let value = prefix;
        if (attributesOnTheirOwnLine) {
            tracker = trackerMultiLine;
            let index = -1;
            while(++index < serializedAttributes.length){
                // Only indent first line of of attributes, we can’t indent attribute
                // values.
                serializedAttributes[index] = currentIndent + indent + serializedAttributes[index];
            }
            value += tracker.move('\n' + serializedAttributes.join('\n') + '\n' + currentIndent);
        } else if (attributesOnOneLine) {
            value += tracker.move(' ' + attributesOnOneLine);
        }
        if (selfClosing) {
            value += tracker.move((tightSelfClosing || attributesOnTheirOwnLine ? '' : ' ') + '/');
        }
        value += tracker.move('>');
        if (node.children && node.children.length > 0) {
            if (node.type === 'mdxJsxTextElement') {
                value += tracker.move(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$markdown$40$1$2e$5$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$container$2d$phrasing$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["containerPhrasing"](node, context, {
                    ...tracker.current(),
                    before: '>',
                    after: '<'
                }));
            } else {
                tracker.shift(2);
                value += tracker.move('\n');
                value += tracker.move(containerFlow(node, context, tracker.current()));
                value += tracker.move('\n');
            }
        }
        if (!selfClosing) {
            value += tracker.move((flow ? currentIndent : '') + '</' + (node.name || '') + '>');
        }
        exit();
        return value;
    }
}
// Modified copy of:
// <https://github.com/syntax-tree/mdast-util-to-markdown/blob/a381cbc/lib/util/container-flow.js>.
//
// To do: add `indent` support to `mdast-util-to-markdown`.
// As indents are only used for JSX, it’s fine for now, but perhaps better
// there.
/**
 * @param {MdxJsxFlowElement} parent
 *   Parent of flow nodes.
 * @param {State} state
 *   Info passed around about the current state.
 * @param {ReturnType<Tracker['current']>} info
 *   Info on where we are in the document we are generating.
 * @returns {string}
 *   Serialized children, joined by (blank) lines.
 */ function containerFlow(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children;
    const tracker = state.createTracker(info);
    const currentIndent = createIndent(inferDepth(state));
    /** @type {Array<string>} */ const results = [];
    let index = -1;
    indexStack.push(-1);
    while(++index < children.length){
        const child = children[index];
        indexStack[indexStack.length - 1] = index;
        const childInfo = {
            before: '\n',
            after: '\n',
            ...tracker.current()
        };
        const result = state.handle(child, parent, state, childInfo);
        const serializedChild = child.type === 'mdxJsxFlowElement' ? result : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$to$2d$markdown$40$1$2e$5$2e$0$2f$node_modules$2f$mdast$2d$util$2d$to$2d$markdown$2f$lib$2f$util$2f$indent$2d$lines$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["indentLines"](result, function(line, _, blank) {
            return (blank ? '' : currentIndent) + line;
        });
        results.push(tracker.move(serializedChild));
        if (child.type !== 'list') {
            state.bulletLastUsed = undefined;
        }
        if (index < children.length - 1) {
            results.push(tracker.move('\n\n'));
        }
    }
    indexStack.pop();
    return results.join('');
}
/**
 *
 * @param {State} context
 * @returns {number}
 */ function inferDepth(context) {
    let depth = 0;
    for (const x of context.stack){
        if (x === 'mdxJsxFlowElement') {
            depth++;
        }
    }
    return depth;
}
/**
 * @param {number} depth
 * @returns {string}
 */ function createIndent(depth) {
    return indent.repeat(depth);
}
/**
 * @type {ToMarkdownHandle}
 */ function peekElement() {
    return '<';
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx-jsx@2.1.4/node_modules/mdast-util-mdx-jsx/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxJsxFromMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$2$2e$1$2e$4$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxFromMarkdown"],
    "mdxJsxToMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$2$2e$1$2e$4$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxToMarkdown"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$2$2e$1$2e$4$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx-jsx@2.1.4/node_modules/mdast-util-mdx-jsx/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/track.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('../types.js').CreateTracker} CreateTracker
 * @typedef {import('../types.js').TrackCurrent} TrackCurrent
 * @typedef {import('../types.js').TrackMove} TrackMove
 * @typedef {import('../types.js').TrackShift} TrackShift
 */ /**
 * Track positional info in the output.
 *
 * @type {CreateTracker}
 */ __turbopack_esm__({
    "track": ()=>track
});
function track(config) {
    // Defaults are used to prevent crashes when older utilities somehow activate
    // this code.
    /* c8 ignore next 5 */ const options = config || {};
    const now = options.now || {};
    let lineShift = options.lineShift || 0;
    let line = now.line || 1;
    let column = now.column || 1;
    return {
        move,
        current,
        shift
    };
    /**
   * Get the current tracked info.
   *
   * @type {TrackCurrent}
   */ function current() {
        return {
            now: {
                line,
                column
            },
            lineShift
        };
    }
    /**
   * Define an increased line shift (the typical indent for lines).
   *
   * @type {TrackShift}
   */ function shift(value) {
        lineShift += value;
    }
    /**
   * Move past some generated markdown.
   *
   * @type {TrackMove}
   */ function move(input) {
        // eslint-disable-next-line unicorn/prefer-default-parameters
        const value = input || '';
        const chunks = value.split(/\r?\n|\r/g);
        const tail = chunks[chunks.length - 1];
        line += chunks.length - 1;
        column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
        return value;
    }
}

})()),
"[project]/node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('../types.js').IndentLines} IndentLines
 */ __turbopack_esm__({
    "indentLines": ()=>indentLines
});
const eol = /\r?\n|\r/g;
function indentLines(value, map) {
    /** @type {Array<string>} */ const result = [];
    let start = 0;
    let line = 0;
    /** @type {RegExpExecArray | null} */ let match;
    while(match = eol.exec(value)){
        one(value.slice(start, match.index));
        result.push(match[0]);
        start = match.index + match[0].length;
        line++;
    }
    one(value.slice(start));
    return result.join('');
    /**
   * @param {string} value
   */ function one(value) {
        result.push(map(value, line, !value));
    }
}

})()),
"[project]/node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('../types.js').Handle} Handle
 * @typedef {import('../types.js').Info} Info
 * @typedef {import('../types.js').Parent} Parent
 * @typedef {import('../types.js').PhrasingContent} PhrasingContent
 * @typedef {import('../types.js').State} State
 */ /**
 * Serialize the children of a parent that contains phrasing children.
 *
 * These children will be joined flush together.
 *
 * @param {Parent & {children: Array<PhrasingContent>}} parent
 *   Parent of flow nodes.
 * @param {State} state
 *   Info passed around about the current state.
 * @param {Info} info
 *   Info on where we are in the document we are generating.
 * @returns {string}
 *   Serialized children, joined together.
 */ __turbopack_esm__({
    "containerPhrasing": ()=>containerPhrasing
});
function containerPhrasing(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    /** @type {Array<string>} */ const results = [];
    let index = -1;
    let before = info.before;
    indexStack.push(-1);
    let tracker = state.createTracker(info);
    while(++index < children.length){
        const child = children[index];
        /** @type {string} */ let after;
        indexStack[indexStack.length - 1] = index;
        if (index + 1 < children.length) {
            /** @type {Handle} */ // @ts-expect-error: hush, it’s actually a `zwitch`.
            let handle = state.handle.handlers[children[index + 1].type];
            /** @type {Handle} */ // @ts-expect-error: hush, it’s actually a `zwitch`.
            if (handle && handle.peek) handle = handle.peek;
            after = handle ? handle(children[index + 1], parent, state, {
                before: '',
                after: '',
                ...tracker.current()
            }).charAt(0) : '';
        } else {
            after = info.after;
        }
        // In some cases, html (text) can be found in phrasing right after an eol.
        // When we’d serialize that, in most cases that would be seen as html
        // (flow).
        // As we can’t escape or so to prevent it from happening, we take a somewhat
        // reasonable approach: replace that eol with a space.
        // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>
        if (results.length > 0 && (before === '\r' || before === '\n') && child.type === 'html') {
            results[results.length - 1] = results[results.length - 1].replace(/(\r?\n|\r)$/, ' ');
            before = ' ';
            // To do: does this work to reset tracker?
            tracker = state.createTracker(info);
            tracker.move(results.join(''));
        }
        results.push(tracker.move(state.handle(child, parent, state, {
            ...tracker.current(),
            before,
            after
        })));
        before = results[results.length - 1].slice(-1);
    }
    indexStack.pop();
    return results.join('');
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx-expression@1.3.2/node_modules/mdast-util-mdx-expression/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').Program} Program
 *
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 *
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 *
 * @typedef {import('../index.js').MdxFlowExpression} MdxFlowExpression
 * @typedef {import('../index.js').MdxTextExpression} MdxTextExpression
 */ /**
 * Extension for `mdast-util-from-markdown` to enable MDX expressions.
 *
 * When using the syntax extension with `addResult`, nodes will have a
 * `data.estree` field set to an ESTree `Program` node.
 *
 * @type {FromMarkdownExtension}
 */ __turbopack_esm__({
    "mdxExpressionFromMarkdown": ()=>mdxExpressionFromMarkdown,
    "mdxExpressionToMarkdown": ()=>mdxExpressionToMarkdown
});
const mdxExpressionFromMarkdown = {
    enter: {
        mdxFlowExpression: enterMdxFlowExpression,
        mdxTextExpression: enterMdxTextExpression
    },
    exit: {
        mdxFlowExpression: exitMdxExpression,
        mdxFlowExpressionChunk: exitMdxExpressionData,
        mdxTextExpression: exitMdxExpression,
        mdxTextExpressionChunk: exitMdxExpressionData
    }
};
const mdxExpressionToMarkdown = {
    handlers: {
        mdxFlowExpression: handleMdxExpression,
        mdxTextExpression: handleMdxExpression
    },
    unsafe: [
        {
            character: '{',
            inConstruct: [
                'phrasing'
            ]
        },
        {
            atBreak: true,
            character: '{'
        }
    ]
};
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxFlowExpression(token) {
    this.enter({
        type: 'mdxFlowExpression',
        value: ''
    }, token);
    this.buffer();
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxTextExpression(token) {
    this.enter({
        type: 'mdxTextExpression',
        value: ''
    }, token);
    this.buffer();
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxExpression(token) {
    const value = this.resume();
    /** @type {Program | undefined} */ // @ts-expect-error: estree.
    const estree = token.estree;
    const node = this.exit(token);
    node.value = value;
    if (estree) {
        node.data = {
            estree
        };
    }
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxExpressionData(token) {
    this.config.enter.data.call(this, token);
    this.config.exit.data.call(this, token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {MdxFlowExpression | MdxTextExpression} node
 */ function handleMdxExpression(node) {
    const value = node.value || '';
    return '{' + value + '}';
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx-expression@1.3.2/node_modules/mdast-util-mdx-expression/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxExpressionFromMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$1$2e$3$2e$2$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpressionFromMarkdown"],
    "mdxExpressionToMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$1$2e$3$2e$2$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpressionToMarkdown"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$1$2e$3$2e$2$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx-expression@1.3.2/node_modules/mdast-util-mdx-expression/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
 *
 * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 *
 * @typedef {import('../index.js').MdxFlowExpression} MdxFlowExpression
 * @typedef {import('../index.js').MdxTextExpression} MdxTextExpression
 */ __turbopack_esm__({
    "mdxExpressionFromMarkdown": ()=>mdxExpressionFromMarkdown,
    "mdxExpressionToMarkdown": ()=>mdxExpressionToMarkdown
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function mdxExpressionFromMarkdown() {
    return {
        enter: {
            mdxFlowExpression: enterMdxFlowExpression,
            mdxTextExpression: enterMdxTextExpression
        },
        exit: {
            mdxFlowExpression: exitMdxExpression,
            mdxFlowExpressionChunk: exitMdxExpressionData,
            mdxTextExpression: exitMdxExpression,
            mdxTextExpressionChunk: exitMdxExpressionData
        }
    };
}
function mdxExpressionToMarkdown() {
    return {
        handlers: {
            mdxFlowExpression: handleMdxExpression,
            mdxTextExpression: handleMdxExpression
        },
        unsafe: [
            {
                character: '{',
                inConstruct: [
                    'phrasing'
                ]
            },
            {
                atBreak: true,
                character: '{'
            }
        ]
    };
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxFlowExpression(token) {
    this.enter({
        type: 'mdxFlowExpression',
        value: ''
    }, token);
    this.buffer();
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function enterMdxTextExpression(token) {
    this.enter({
        type: 'mdxTextExpression',
        value: ''
    }, token);
    this.buffer();
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxExpression(token) {
    const value = this.resume();
    const estree = token.estree;
    const node = this.stack[this.stack.length - 1];
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression');
    this.exit(token);
    node.value = value;
    if (estree) {
        node.data = {
            estree
        };
    }
}
/**
 * @this {CompileContext}
 * @type {FromMarkdownHandle}
 */ function exitMdxExpressionData(token) {
    this.config.enter.data.call(this, token);
    this.config.exit.data.call(this, token);
}
/**
 * @type {ToMarkdownHandle}
 * @param {MdxFlowExpression | MdxTextExpression} node
 */ function handleMdxExpression(node) {
    const value = node.value || '';
    return '{' + value + '}';
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxExpressionFromMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$2$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpressionFromMarkdown"],
    "mdxExpressionToMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$2$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpressionToMarkdown"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$2$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx@2.0.1/node_modules/mdast-util-mdx/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 *
 * @typedef {import('mdast-util-mdx-expression').MdxFlowExpression} MdxFlowExpression
 * @typedef {import('mdast-util-mdx-expression').MdxTextExpression} MdxTextExpression
 * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsm} MdxjsEsm
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttribute} MdxJsxAttribute
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElement} MdxJsxFlowElement
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElement} MdxJsxTextElement
 * @typedef {import('mdast-util-mdx-jsx').ToMarkdownOptions} ToMarkdownOptions
 */ __turbopack_esm__({
    "mdxFromMarkdown": ()=>mdxFromMarkdown,
    "mdxToMarkdown": ()=>mdxToMarkdown
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$1$2e$3$2e$2$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx-expression@1.3.2/node_modules/mdast-util-mdx-expression/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$2$2e$1$2e$4$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx-jsx@2.1.4/node_modules/mdast-util-mdx-jsx/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$1$2e$3$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdxjs-esm@1.3.1/node_modules/mdast-util-mdxjs-esm/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function mdxFromMarkdown() {
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$1$2e$3$2e$2$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpressionFromMarkdown"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$2$2e$1$2e$4$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxFromMarkdown"](),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$1$2e$3$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmFromMarkdown"]
    ];
}
function mdxToMarkdown(options) {
    return {
        extensions: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$1$2e$3$2e$2$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpressionToMarkdown"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$2$2e$1$2e$4$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxToMarkdown"](options),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$1$2e$3$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmToMarkdown"]
        ]
    };
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx@3.0.0/node_modules/mdast-util-mdx/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-mdx-jsx').ToMarkdownOptions} ToMarkdownOptions
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 */ __turbopack_esm__({
    "mdxFromMarkdown": ()=>mdxFromMarkdown,
    "mdxToMarkdown": ()=>mdxToMarkdown
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$2$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx-expression@2.0.0/node_modules/mdast-util-mdx-expression/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx-jsx@3.0.0/node_modules/mdast-util-mdx-jsx/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdxjs-esm@2.0.1/node_modules/mdast-util-mdxjs-esm/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function mdxFromMarkdown() {
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$2$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpressionFromMarkdown"](),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxFromMarkdown"](),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmFromMarkdown"]()
    ];
}
function mdxToMarkdown(options) {
    return {
        extensions: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$expression$40$2$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$expression$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpressionToMarkdown"](),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxToMarkdown"](options),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdxjs$2d$esm$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdxjs$2d$esm$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsmToMarkdown"]()
        ]
    };
}

})()),
"[project]/node_modules/.pnpm/mdast-util-mdx@3.0.0/node_modules/mdast-util-mdx/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxFromMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxFromMarkdown"],
    "mdxToMarkdown": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxToMarkdown"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx@3.0.0/node_modules/mdast-util-mdx/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/estree-util-visit@1.2.1/node_modules/estree-util-visit/lib/color.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @param {string} d
 * @returns {string}
 */ __turbopack_esm__({
    "color": ()=>color
});
function color(d) {
    return '\u001B[33m' + d + '\u001B[39m';
}

})()),
"[project]/node_modules/.pnpm/estree-util-visit@1.2.1/node_modules/estree-util-visit/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').Node} Node
 */ /**
 * @typedef {CONTINUE | SKIP | EXIT} Action
 *   Union of the action types.
 *
 * @typedef {number} Index
 *   Move to the sibling at `index` next (after node itself is completely
 *   traversed), when moving in an array.
 *
 *   Useful if mutating the tree, such as removing the node the visitor is
 *   currently on, or any of its previous siblings.
 *   Results less than 0 or greater than or equal to `children.length` stop
 *   traversing the parent.
 *
 * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple
 *   List with one or two values, the first an action, the second an index.
 */ /**
 * @callback Visitor
 *   Handle a node.
 *
 *   Visitors are free to transform `node`.
 *   They can also transform the parent of node (the last of `ancestors`).
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node`, the `Visitor` should
 *   return a new `Index` to specify the sibling to traverse after `node` is
 *   traversed.
 *   Adding or removing next siblings of `node` is handled as expected without
 *   needing to return a new `Index`.
 * @param {Node} node
 *   Found node.
 * @param {string | null} key
 *   Field at which `node` lives in its parent (or where a list of nodes lives).
 * @param {number | null} index
 *   Index where `node` lives if `parent[key]` is an array.
 * @param {Array<Node>} ancestors
 *   Ancestors of `node`.
 * @returns {Action | Index | ActionTuple | null | undefined | void}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */ /**
 * @typedef Visitors
 *   Handle nodes when entering (preorder) and leaving (postorder).
 * @property {Visitor | null | undefined} [enter]
 *   Handle nodes when entering (preorder).
 * @property {Visitor | null | undefined} [leave]
 *   Handle nodes when leaving (postorder).
 */ __turbopack_esm__({
    "CONTINUE": ()=>CONTINUE,
    "EXIT": ()=>EXIT,
    "SKIP": ()=>SKIP,
    "visit": ()=>visit
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$color$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-visit@1.2.1/node_modules/estree-util-visit/lib/color.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const own = {}.hasOwnProperty;
const CONTINUE = Symbol('continue');
const EXIT = Symbol('exit');
const SKIP = Symbol('skip');
function visit(tree, visitor) {
    /** @type {Visitor | undefined} */ let enter;
    /** @type {Visitor | undefined} */ let leave;
    if (typeof visitor === 'function') {
        enter = visitor;
    } else if (visitor && typeof visitor === 'object') {
        if (visitor.enter) enter = visitor.enter;
        if (visitor.leave) leave = visitor.leave;
    }
    build(tree, null, null, [])();
    /**
   * @param {Node} node
   * @param {string | null} key
   * @param {number | null} index
   * @param {Array<Node>} parents
   */ function build(node, key, index, parents) {
        if (nodelike(node)) {
            visit.displayName = 'node (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$color$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["color"](node.type) + ')';
        }
        return visit;
        /**
     * @returns {ActionTuple}
     */ function visit() {
            /** @type {ActionTuple} */ const result = enter ? toResult(enter(node, key, index, parents)) : [];
            if (result[0] === EXIT) {
                return result;
            }
            if (result[0] !== SKIP) {
                /** @type {keyof node} */ let cKey;
                for(cKey in node){
                    if (own.call(node, cKey) && node[cKey] && typeof node[cKey] === 'object' && // @ts-expect-error: custom esast extension.
                    cKey !== 'data' && // @ts-expect-error: custom esast extension.
                    cKey !== 'position') {
                        const grandparents = parents.concat(node);
                        /** @type {unknown} */ const value = node[cKey];
                        if (Array.isArray(value)) {
                            const nodes = value;
                            let cIndex = 0;
                            while(cIndex > -1 && cIndex < nodes.length){
                                const subvalue = nodes[cIndex];
                                if (nodelike(subvalue)) {
                                    const subresult = build(subvalue, cKey, cIndex, grandparents)();
                                    if (subresult[0] === EXIT) return subresult;
                                    cIndex = typeof subresult[1] === 'number' ? subresult[1] : cIndex + 1;
                                } else {
                                    cIndex++;
                                }
                            }
                        } else if (nodelike(value)) {
                            const subresult = build(value, cKey, null, grandparents)();
                            if (subresult[0] === EXIT) return subresult;
                        }
                    }
                }
            }
            return leave ? toResult(leave(node, key, index, parents)) : result;
        }
    }
}
/**
 * Turn a return value into a clean result.
 *
 * @param {Action | Index | ActionTuple | null | undefined | void} value
 *   Valid return values from visitors.
 * @returns {ActionTuple}
 *   Clean result.
 */ function toResult(value) {
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === 'number') {
        return [
            CONTINUE,
            value
        ];
    }
    return [
        value
    ];
}
/**
 * Check if something looks like a node.
 *
 * @param {unknown} value
 *   Anything.
 * @returns {value is Node}
 *   Whether `value` looks like a node.
 */ function nodelike(value) {
    return Boolean(value && typeof value === 'object' && 'type' in value && typeof value.type === 'string' && value.type.length > 0);
}

})()),
"[project]/node_modules/.pnpm/estree-util-visit@1.2.1/node_modules/estree-util-visit/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Action} Action
 * @typedef {import('./lib/index.js').ActionTuple} ActionTuple
 * @typedef {import('./lib/index.js').Index} Index
 * @typedef {import('./lib/index.js').Visitor} Visitor
 * @typedef {import('./lib/index.js').Visitors} Visitors
 */ __turbopack_esm__({
    "CONTINUE": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CONTINUE"],
    "EXIT": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["EXIT"],
    "SKIP": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SKIP"],
    "visit": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visit"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-visit@1.2.1/node_modules/estree-util-visit/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/estree-util-visit@2.0.0/node_modules/estree-util-visit/lib/color.node.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @param {string} d
 * @returns {string}
 */ __turbopack_esm__({
    "color": ()=>color
});
function color(d) {
    return '\u001B[33m' + d + '\u001B[39m';
}

})()),
"[project]/node_modules/.pnpm/estree-util-visit@2.0.0/node_modules/estree-util-visit/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').Node} Node
 */ /**
 * @typedef {CONTINUE | EXIT | SKIP} Action
 *   Union of the action types.
 *
 * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple
 *   List with one or two values, the first an action, the second an index.
 *
 * @typedef {number} Index
 *   Move to the sibling at `index` next (after node itself is completely
 *   traversed), when moving in an array.
 *
 *   Useful if mutating the tree, such as removing the node the visitor is
 *   currently on, or any of its previous siblings.
 *   Results less than 0 or greater than or equal to `children.length` stop
 *   traversing the parent.
 */ /**
 * @callback Visitor
 *   Handle a node.
 *
 *   Visitors are free to transform `node`.
 *   They can also transform the parent of node (the last of `ancestors`).
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node`, the `Visitor` should
 *   return a new `Index` to specify the sibling to traverse after `node` is
 *   traversed.
 *   Adding or removing next siblings of `node` is handled as expected without
 *   needing to return a new `Index`.
 * @param {Node} node
 *   Found node.
 * @param {string | undefined} key
 *   Field at which `node` lives in its parent (or where a list of nodes lives).
 * @param {number | undefined} index
 *   Index where `node` lives if `parent[key]` is an array.
 * @param {Array<Node>} ancestors
 *   Ancestors of `node`.
 * @returns {Action | ActionTuple | Index | null | undefined | void}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */ /**
 * @typedef Visitors
 *   Handle nodes when entering (preorder) and leaving (postorder).
 * @property {Visitor | null | undefined} [enter]
 *   Handle nodes when entering (preorder) (optional).
 * @property {Visitor | null | undefined} [leave]
 *   Handle nodes when leaving (postorder) (optional).
 */ __turbopack_esm__({
    "CONTINUE": ()=>CONTINUE,
    "EXIT": ()=>EXIT,
    "SKIP": ()=>SKIP,
    "visit": ()=>visit
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$color$2e$node$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-visit@2.0.0/node_modules/estree-util-visit/lib/color.node.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const own = {}.hasOwnProperty;
const CONTINUE = Symbol('continue');
const EXIT = Symbol('exit');
const SKIP = Symbol('skip');
function visit(tree, visitor) {
    /** @type {Visitor | undefined} */ let enter;
    /** @type {Visitor | undefined} */ let leave;
    if (typeof visitor === 'function') {
        enter = visitor;
    } else if (visitor && typeof visitor === 'object') {
        if (visitor.enter) enter = visitor.enter;
        if (visitor.leave) leave = visitor.leave;
    }
    build(tree, undefined, undefined, [])();
    /**
   * @param {Node} node
   * @param {string | undefined} key
   * @param {number | undefined} index
   * @param {Array<Node>} parents
   */ function build(node, key, index, parents) {
        if (nodelike(node)) {
            visit.displayName = 'node (' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$color$2e$node$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["color"](node.type) + ')';
        }
        return visit;
        /**
     * @returns {ActionTuple}
     */ function visit() {
            /** @type {ActionTuple} */ const result = enter ? toResult(enter(node, key, index, parents)) : [];
            if (result[0] === EXIT) {
                return result;
            }
            if (result[0] !== SKIP) {
                /** @type {keyof node} */ let cKey;
                for(cKey in node){
                    if (own.call(node, cKey) && node[cKey] && typeof node[cKey] === 'object' && // @ts-expect-error: custom esast extension.
                    cKey !== 'data' && // @ts-expect-error: custom esast extension.
                    cKey !== 'position') {
                        const grandparents = parents.concat(node);
                        /** @type {unknown} */ const value = node[cKey];
                        if (Array.isArray(value)) {
                            const nodes = value;
                            let cIndex = 0;
                            while(cIndex > -1 && cIndex < nodes.length){
                                const subvalue = nodes[cIndex];
                                if (nodelike(subvalue)) {
                                    const subresult = build(subvalue, cKey, cIndex, grandparents)();
                                    if (subresult[0] === EXIT) return subresult;
                                    cIndex = typeof subresult[1] === 'number' ? subresult[1] : cIndex + 1;
                                } else {
                                    cIndex++;
                                }
                            }
                        } else if (nodelike(value)) {
                            const subresult = build(value, cKey, undefined, grandparents)();
                            if (subresult[0] === EXIT) return subresult;
                        }
                    }
                }
            }
            return leave ? toResult(leave(node, key, index, parents)) : result;
        }
    }
}
/**
 * Turn a return value into a clean result.
 *
 * @param {Action | ActionTuple | Index | null | undefined | void} value
 *   Valid return values from visitors.
 * @returns {ActionTuple}
 *   Clean result.
 */ function toResult(value) {
    if (Array.isArray(value)) {
        return value;
    }
    if (typeof value === 'number') {
        return [
            CONTINUE,
            value
        ];
    }
    return [
        value
    ];
}
/**
 * Check if something looks like a node.
 *
 * @param {unknown} value
 *   Anything.
 * @returns {value is Node}
 *   Whether `value` looks like a node.
 */ function nodelike(value) {
    return Boolean(value && typeof value === 'object' && 'type' in value && typeof value.type === 'string' && value.type.length > 0);
}

})()),
"[project]/node_modules/.pnpm/estree-util-visit@2.0.0/node_modules/estree-util-visit/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/index.js').Action} Action
 * @typedef {import('./lib/index.js').ActionTuple} ActionTuple
 * @typedef {import('./lib/index.js').Index} Index
 * @typedef {import('./lib/index.js').Visitor} Visitor
 * @typedef {import('./lib/index.js').Visitors} Visitors
 */ __turbopack_esm__({
    "CONTINUE": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["CONTINUE"],
    "EXIT": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["EXIT"],
    "SKIP": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["SKIP"],
    "visit": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visit"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-visit@2.0.0/node_modules/estree-util-visit/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/micromark-util-events-to-acorn@1.2.3/node_modules/micromark-util-events-to-acorn/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('acorn').Comment} Comment
 * @typedef {import('acorn').Node} AcornNode
 * @typedef {import('acorn').Options} AcornOptions
 * @typedef {import('acorn').Token} Token
 * @typedef {import('estree').Node} EstreeNode
 * @typedef {import('estree').Program} Program
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Point} MicromarkPoint
 * @typedef {import('unist').Point} UnistPoint
 */ /**
 * @typedef Acorn
 *   Acorn-like interface.
 * @property {import('acorn').parse} parse
 *   Parse a program.
 * @property {import('acorn').parseExpressionAt} parseExpressionAt
 *   Parse an expression.
 *
 * @typedef AcornLoc
 * @property {number} line
 * @property {number} column
 *
 * @typedef AcornErrorFields
 * @property {number} raisedAt
 * @property {number} pos
 * @property {AcornLoc} loc
 *
 * @typedef {Error & AcornErrorFields} AcornError
 *
 * @typedef Options
 *   Configuration.
 * @property {Acorn} acorn
 *   Typically `acorn`, object with `parse` and `parseExpressionAt` fields.
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for `acorn`.
 * @property {MicromarkPoint | null | undefined} [start]
 *   Place where events start.
 * @property {string | null | undefined} [prefix='']
 *   Text to place before events.
 * @property {string | null | undefined} [suffix='']
 *   Text to place after events.
 * @property {boolean | null | undefined} [expression=false]
 *   Whether this is a program or expression.
 * @property {boolean | null | undefined} [allowEmpty=false]
 *   Whether an empty expression is allowed (programs are always allowed to
 *   be empty).
 *
 * @typedef Result
 *   Result.
 * @property {Program | undefined} estree
 *   Program.
 * @property {AcornError | undefined} error
 *   Error if unparseable
 * @property {boolean} swallow
 *   Whether the error, if there is one, can be swallowed and more JavaScript
 *   could be valid.
 *
 * @typedef {[number, MicromarkPoint]} Stop
 *
 * @typedef Collection
 * @property {string} value
 * @property {Array<Stop>} stops
 */ __turbopack_esm__({
    "eventsToAcorn": ()=>eventsToAcorn
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-visit@1.2.1/node_modules/estree-util-visit/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/values.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
function eventsToAcorn(events, options) {
    const prefix = options.prefix || '';
    const suffix = options.suffix || '';
    const acornOptions = Object.assign({}, options.acornOptions);
    /** @type {Array<Comment>} */ const comments = [];
    /** @type {Array<Token>} */ const tokens = [];
    const onComment = acornOptions.onComment;
    const onToken = acornOptions.onToken;
    let swallow = false;
    /** @type {AcornNode | undefined} */ let estree;
    /** @type {AcornError | undefined} */ let exception;
    /** @type {AcornOptions} */ const acornConfig = Object.assign({}, acornOptions, {
        onComment: comments,
        preserveParens: true
    });
    if (onToken) {
        acornConfig.onToken = tokens;
    }
    const collection = collect(events, [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding,
        // To do: these should be passed by users in parameters.
        'expressionChunk',
        'mdxFlowExpressionChunk',
        'mdxTextExpressionChunk',
        // JSX:
        'mdxJsxTextTagExpressionAttributeValue',
        'mdxJsxTextTagAttributeValueExpressionValue',
        'mdxJsxFlowTagExpressionAttributeValue',
        'mdxJsxFlowTagAttributeValueExpressionValue',
        // ESM:
        'mdxjsEsmData'
    ]);
    const source = collection.value;
    const value = prefix + source + suffix;
    const isEmptyExpression = options.expression && empty(source);
    if (isEmptyExpression && !options.allowEmpty) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected empty expression', parseOffsetToUnistPoint(0), 'micromark-extension-mdx-expression:unexpected-empty-expression');
    }
    try {
        estree = options.expression && !isEmptyExpression ? options.acorn.parseExpressionAt(value, 0, acornConfig) : options.acorn.parse(value, acornConfig);
    } catch (error_) {
        const error = error_;
        const point = parseOffsetToUnistPoint(error.pos);
        error.message = String(error.message).replace(/ \(\d+:\d+\)$/, '');
        // Always defined in our unist points that come from micromark.
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](point.offset !== undefined, 'expected `offset`');
        error.pos = point.offset;
        error.loc = {
            line: point.line,
            column: point.column - 1
        };
        exception = error;
        swallow = error.raisedAt >= prefix.length + source.length || // Broken comments are raised at their start, not their end.
        error.message === 'Unterminated comment';
    }
    if (estree && options.expression && !isEmptyExpression) {
        if (empty(value.slice(estree.end, value.length - suffix.length))) {
            estree = {
                type: 'Program',
                start: 0,
                end: prefix.length + source.length,
                // @ts-expect-error: It’s good.
                body: [
                    {
                        type: 'ExpressionStatement',
                        expression: estree,
                        start: 0,
                        end: prefix.length + source.length
                    }
                ],
                sourceType: 'module',
                comments: []
            };
        } else {
            const point = parseOffsetToUnistPoint(estree.end);
            const error = new Error('Unexpected content after expression');
            // Always defined in our unist points that come from micromark.
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](point.offset !== undefined, 'expected `offset`');
            error.pos = point.offset;
            error.loc = {
                line: point.line,
                column: point.column - 1
            };
            exception = error;
            estree = undefined;
        }
    }
    if (estree) {
        // @ts-expect-error: acorn *does* allow comments
        estree.comments = comments;
        // @ts-expect-error: acorn looks enough like estree.
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$1$2e$2$2e$1$2f$node_modules$2f$estree$2d$util$2d$visit$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visit"](estree, (esnode, field, index, parents)=>{
            let context = parents[parents.length - 1];
            /** @type {string | number | null} */ let prop = field;
            // Remove non-standard `ParenthesizedExpression`.
            // @ts-expect-error: included in acorn.
            if (esnode.type === 'ParenthesizedExpression' && context && prop) {
                /* c8 ignore next 5 */ if (typeof index === 'number') {
                    // @ts-expect-error: indexable.
                    context = context[prop];
                    prop = index;
                }
                // @ts-expect-error: indexable.
                context[prop] = esnode.expression;
            }
            fixPosition(esnode);
        });
        // Comment positions are fixed by `visit` because they’re in the tree.
        if (Array.isArray(onComment)) {
            onComment.push(...comments);
        } else if (typeof onComment === 'function') {
            for (const comment of comments){
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](comment.loc, 'expected `loc` on comment');
                onComment(comment.type === 'Block', comment.value, comment.start, comment.end, comment.loc.start, comment.loc.end);
            }
        }
        for (const token of tokens){
            // Ignore tokens that ends in prefix or start in suffix:
            if (token.end <= prefix.length || token.start - prefix.length >= source.length) {
                continue;
            }
            fixPosition(token);
            if (Array.isArray(onToken)) {
                onToken.push(token);
            } else {
                // `tokens` are not added if `onToken` is not defined, so it must be a
                // function.
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](typeof onToken === 'function', 'expected function');
                onToken(token);
            }
        }
    }
    // @ts-expect-error: It’s a program now.
    return {
        estree,
        error: exception,
        swallow
    };
    /**
   * Update the position of a node.
   *
   * @param {AcornNode | EstreeNode | Token} nodeOrToken
   * @returns {void}
   */ function fixPosition(nodeOrToken) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"]('start' in nodeOrToken, 'expected `start` in node or token from acorn');
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"]('end' in nodeOrToken, 'expected `end` in node or token from acorn');
        const pointStart = parseOffsetToUnistPoint(nodeOrToken.start);
        const pointEnd = parseOffsetToUnistPoint(nodeOrToken.end);
        // Always defined in our unist points that come from micromark.
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](pointStart.offset !== undefined, 'expected `offset`');
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](pointEnd.offset !== undefined, 'expected `offset`');
        nodeOrToken.start = pointStart.offset;
        nodeOrToken.end = pointEnd.offset;
        nodeOrToken.loc = {
            start: {
                line: pointStart.line,
                column: pointStart.column - 1,
                offset: pointStart.offset
            },
            end: {
                line: pointEnd.line,
                column: pointEnd.column - 1,
                offset: pointEnd.offset
            }
        };
        nodeOrToken.range = [
            nodeOrToken.start,
            nodeOrToken.end
        ];
    }
    /**
   * Turn an arbitrary offset into the parsed value, into a point in the source
   * value.
   *
   * @param {number} acornOffset
   * @returns {UnistPoint}
   */ function parseOffsetToUnistPoint(acornOffset) {
        let sourceOffset = acornOffset - prefix.length;
        if (sourceOffset < 0) {
            sourceOffset = 0;
        } else if (sourceOffset > source.length) {
            sourceOffset = source.length;
        }
        let point = relativeToPoint(collection.stops, sourceOffset);
        if (!point) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](options.start, 'empty expressions are need `options.start` being passed');
            point = {
                line: options.start.line,
                column: options.start.column,
                offset: options.start.offset
            };
        }
        return point;
    }
}
/**
 * @param {string} value
 * @returns {boolean}
 */ function empty(value) {
    return /^\s*$/.test(value// Multiline comments.
    .replace(/\/\*[\s\S]*?\*\//g, '')// Line comments.
    // EOF instead of EOL is specifically not allowed, because that would
    // mean the closing brace is on the commented-out line
    .replace(/\/\/[^\r\n]*(\r\n|\n|\r)/g, ''));
}
// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/mdx_collect.rs#L15>.
/**
 * @param {Array<Event>} events
 * @param {Array<string>} names
 * @returns {Collection}
 */ function collect(events, names) {
    /** @type {Collection} */ const result = {
        value: '',
        stops: []
    };
    let index = -1;
    while(++index < events.length){
        const event = events[index];
        // Assume void.
        if (event[0] === 'enter' && names.includes(event[1].type)) {
            const chunks = event[2].sliceStream(event[1]);
            // Drop virtual spaces.
            while(chunks.length > 0 && chunks[0] === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace){
                chunks.shift();
            }
            const value = serializeChunks(chunks);
            result.stops.push([
                result.value.length,
                event[1].start
            ]);
            result.value += value;
            result.stops.push([
                result.value.length,
                event[1].end
            ]);
        }
    }
    return result;
}
// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/location.rs#L91>.
/**
 * Turn a relative offset into an absolute offset.
 *
 * @param {Array<Stop>} stops
 * @param {number} relative
 * @returns {UnistPoint | undefined}
 */ function relativeToPoint(stops, relative) {
    let index = 0;
    while(index < stops.length && stops[index][0] <= relative){
        index += 1;
    }
    // There are no points: that only occurs if there was an empty string.
    if (index === 0) {
        return undefined;
    }
    const [stopRelative, stopAbsolute] = stops[index - 1];
    const rest = relative - stopRelative;
    return {
        line: stopAbsolute.line,
        column: stopAbsolute.column + rest,
        offset: stopAbsolute.offset + rest
    };
}
// Copy from <https://github.com/micromark/micromark/blob/ce3593a/packages/micromark/dev/lib/create-tokenizer.js#L595>
// To do: expose that?
/**
 * Get the string value of a slice of chunks.
 *
 * @param {Array<Chunk>} chunks
 * @returns {string}
 */ function serializeChunks(chunks) {
    let index = -1;
    /** @type {Array<string>} */ const result = [];
    /** @type {boolean | undefined} */ let atTab;
    while(++index < chunks.length){
        const chunk = chunks[index];
        /** @type {string} */ let value;
        if (typeof chunk === 'string') {
            value = chunk;
        } else switch(chunk){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturn:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].cr;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lineFeed:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].lf;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturnLineFeed:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].cr + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].lf;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].ht;
                    break;
                }
            /* c8 ignore next 6 */ case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace:
                {
                    if (atTab) continue;
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$values$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].space;
                    break;
                }
            default:
                {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](typeof chunk === 'number', 'expected number');
                    // Currently only replacement character.
                    // eslint-disable-next-line unicorn/prefer-code-point
                    value = String.fromCharCode(chunk);
                }
        }
        atTab = chunk === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab;
        result.push(value);
    }
    return result.join('');
}

})()),
"[project]/node_modules/.pnpm/micromark-util-events-to-acorn@2.0.2/node_modules/micromark-util-events-to-acorn/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('acorn').Comment} Comment
 * @typedef {import('acorn').Node} AcornNode
 * @typedef {import('acorn').Options} AcornOptions
 * @typedef {import('acorn').Token} Token
 * @typedef {import('estree').Node} EstreeNode
 * @typedef {import('estree').Program} Program
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Point} MicromarkPoint
 * @typedef {import('micromark-util-types').TokenType} TokenType
 * @typedef {import('unist').Point} UnistPoint
 */ /**
 * @typedef Acorn
 *   Acorn-like interface.
 * @property {import('acorn').parse} parse
 *   Parse a program.
 * @property {import('acorn').parseExpressionAt} parseExpressionAt
 *   Parse an expression.
 *
 * @typedef AcornLoc
 * @property {number} line
 * @property {number} column
 *
 * @typedef AcornErrorFields
 * @property {number} raisedAt
 * @property {number} pos
 * @property {AcornLoc} loc
 *
 * @typedef {Error & AcornErrorFields} AcornError
 *
 * @typedef Options
 *   Configuration.
 * @property {Acorn} acorn
 *   Typically `acorn`, object with `parse` and `parseExpressionAt` fields (required).
 * @property {Array<TokenType>} tokenTypes
 *   Names of (void) tokens to consider as data; `'lineEnding'` is always
 *   included (required).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for `acorn` (optional).
 * @property {MicromarkPoint | null | undefined} [start]
 *   Place where events start (optional, required if `allowEmpty`).
 * @property {string | null | undefined} [prefix='']
 *   Text to place before events (default: `''`).
 * @property {string | null | undefined} [suffix='']
 *   Text to place after events (default: `''`).
 * @property {boolean | null | undefined} [expression=false]
 *   Whether this is a program or expression (default: `false`).
 * @property {boolean | null | undefined} [allowEmpty=false]
 *   Whether an empty expression is allowed (programs are always allowed to
 *   be empty) (default: `false`).
 *
 * @typedef Result
 *   Result.
 * @property {Program | undefined} estree
 *   Program.
 * @property {AcornError | undefined} error
 *   Error if unparseable
 * @property {boolean} swallow
 *   Whether the error, if there is one, can be swallowed and more JavaScript
 *   could be valid.
 *
 * @typedef {[number, MicromarkPoint]} Stop
 *
 * @typedef Collection
 * @property {string} value
 * @property {Array<Stop>} stops
 */ __turbopack_esm__({
    "eventsToAcorn": ()=>eventsToAcorn
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-visit@2.0.0/node_modules/estree-util-visit/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
function eventsToAcorn(events, options) {
    const prefix = options.prefix || '';
    const suffix = options.suffix || '';
    const acornOptions = Object.assign({}, options.acornOptions);
    /** @type {Array<Comment>} */ const comments = [];
    /** @type {Array<Token>} */ const tokens = [];
    const onComment = acornOptions.onComment;
    const onToken = acornOptions.onToken;
    let swallow = false;
    /** @type {AcornNode | undefined} */ let estree;
    /** @type {AcornError | undefined} */ let exception;
    /** @type {AcornOptions} */ const acornConfig = Object.assign({}, acornOptions, {
        onComment: comments,
        preserveParens: true
    });
    if (onToken) {
        acornConfig.onToken = tokens;
    }
    const collection = collect(events, options.tokenTypes);
    const source = collection.value;
    const value = prefix + source + suffix;
    const isEmptyExpression = options.expression && empty(source);
    if (isEmptyExpression && !options.allowEmpty) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected empty expression', {
            place: parseOffsetToUnistPoint(0),
            ruleId: 'unexpected-empty-expression',
            source: 'micromark-extension-mdx-expression'
        });
    }
    try {
        estree = options.expression && !isEmptyExpression ? options.acorn.parseExpressionAt(value, 0, acornConfig) : options.acorn.parse(value, acornConfig);
    } catch (error_) {
        const error = error_;
        const point = parseOffsetToUnistPoint(error.pos);
        error.message = String(error.message).replace(/ \(\d+:\d+\)$/, '');
        // Always defined in our unist points that come from micromark.
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](point.offset !== undefined, 'expected `offset`');
        error.pos = point.offset;
        error.loc = {
            line: point.line,
            column: point.column - 1
        };
        exception = error;
        swallow = error.raisedAt >= prefix.length + source.length || // Broken comments are raised at their start, not their end.
        error.message === 'Unterminated comment';
    }
    if (estree && options.expression && !isEmptyExpression) {
        if (empty(value.slice(estree.end, value.length - suffix.length))) {
            estree = {
                type: 'Program',
                start: 0,
                end: prefix.length + source.length,
                // @ts-expect-error: It’s good.
                body: [
                    {
                        type: 'ExpressionStatement',
                        expression: estree,
                        start: 0,
                        end: prefix.length + source.length
                    }
                ],
                sourceType: 'module',
                comments: []
            };
        } else {
            const point = parseOffsetToUnistPoint(estree.end);
            const error = new Error('Unexpected content after expression');
            // Always defined in our unist points that come from micromark.
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](point.offset !== undefined, 'expected `offset`');
            error.pos = point.offset;
            error.loc = {
                line: point.line,
                column: point.column - 1
            };
            exception = error;
            estree = undefined;
        }
    }
    if (estree) {
        // @ts-expect-error: acorn *does* allow comments
        estree.comments = comments;
        // @ts-expect-error: acorn looks enough like estree.
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$visit$40$2$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$visit$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["visit"](estree, function(esnode, field, index, parents) {
            let context = parents[parents.length - 1];
            /** @type {number | string | undefined} */ let prop = field;
            // Remove non-standard `ParenthesizedExpression`.
            // @ts-expect-error: included in acorn.
            if (esnode.type === 'ParenthesizedExpression' && context && prop) {
                /* c8 ignore next 5 */ if (typeof index === 'number') {
                    // @ts-expect-error: indexable.
                    context = context[prop];
                    prop = index;
                }
                // @ts-expect-error: indexable.
                context[prop] = esnode.expression;
            }
            fixPosition(esnode);
        });
        // Comment positions are fixed by `visit` because they’re in the tree.
        if (Array.isArray(onComment)) {
            onComment.push(...comments);
        } else if (typeof onComment === 'function') {
            for (const comment of comments){
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](comment.loc, 'expected `loc` on comment');
                onComment(comment.type === 'Block', comment.value, comment.start, comment.end, comment.loc.start, comment.loc.end);
            }
        }
        for (const token of tokens){
            // Ignore tokens that ends in prefix or start in suffix:
            if (token.end <= prefix.length || token.start - prefix.length >= source.length) {
                continue;
            }
            fixPosition(token);
            if (Array.isArray(onToken)) {
                onToken.push(token);
            } else {
                // `tokens` are not added if `onToken` is not defined, so it must be a
                // function.
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](typeof onToken === 'function', 'expected function');
                onToken(token);
            }
        }
    }
    // @ts-expect-error: It’s a program now.
    return {
        estree,
        error: exception,
        swallow
    };
    /**
   * Update the position of a node.
   *
   * @param {AcornNode | EstreeNode | Token} nodeOrToken
   * @returns {undefined}
   */ function fixPosition(nodeOrToken) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"]('start' in nodeOrToken, 'expected `start` in node or token from acorn');
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"]('end' in nodeOrToken, 'expected `end` in node or token from acorn');
        const pointStart = parseOffsetToUnistPoint(nodeOrToken.start);
        const pointEnd = parseOffsetToUnistPoint(nodeOrToken.end);
        // Always defined in our unist points that come from micromark.
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](pointStart.offset !== undefined, 'expected `offset`');
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](pointEnd.offset !== undefined, 'expected `offset`');
        nodeOrToken.start = pointStart.offset;
        nodeOrToken.end = pointEnd.offset;
        nodeOrToken.loc = {
            start: {
                line: pointStart.line,
                column: pointStart.column - 1,
                offset: pointStart.offset
            },
            end: {
                line: pointEnd.line,
                column: pointEnd.column - 1,
                offset: pointEnd.offset
            }
        };
        nodeOrToken.range = [
            nodeOrToken.start,
            nodeOrToken.end
        ];
    }
    /**
   * Turn an arbitrary offset into the parsed value, into a point in the source
   * value.
   *
   * @param {number} acornOffset
   * @returns {UnistPoint}
   */ function parseOffsetToUnistPoint(acornOffset) {
        let sourceOffset = acornOffset - prefix.length;
        if (sourceOffset < 0) {
            sourceOffset = 0;
        } else if (sourceOffset > source.length) {
            sourceOffset = source.length;
        }
        let point = relativeToPoint(collection.stops, sourceOffset);
        if (!point) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](options.start, 'empty expressions are need `options.start` being passed');
            point = {
                line: options.start.line,
                column: options.start.column,
                offset: options.start.offset
            };
        }
        return point;
    }
}
/**
 * @param {string} value
 * @returns {boolean}
 */ function empty(value) {
    return /^\s*$/.test(value// Multiline comments.
    .replace(/\/\*[\s\S]*?\*\//g, '')// Line comments.
    // EOF instead of EOL is specifically not allowed, because that would
    // mean the closing brace is on the commented-out line
    .replace(/\/\/[^\r\n]*(\r\n|\n|\r)/g, ''));
}
// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/mdx_collect.rs#L15>.
/**
 * @param {Array<Event>} events
 * @param {Array<TokenType>} tokenTypes
 * @returns {Collection}
 */ function collect(events, tokenTypes) {
    /** @type {Collection} */ const result = {
        value: '',
        stops: []
    };
    let index = -1;
    while(++index < events.length){
        const event = events[index];
        // Assume void.
        if (event[0] === 'enter') {
            const type = event[1].type;
            if (type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding || tokenTypes.includes(type)) {
                const chunks = event[2].sliceStream(event[1]);
                // Drop virtual spaces.
                while(chunks.length > 0 && chunks[0] === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace){
                    chunks.shift();
                }
                const value = serializeChunks(chunks);
                result.stops.push([
                    result.value.length,
                    event[1].start
                ]);
                result.value += value;
                result.stops.push([
                    result.value.length,
                    event[1].end
                ]);
            }
        }
    }
    return result;
}
// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/location.rs#L91>.
/**
 * Turn a relative offset into an absolute offset.
 *
 * @param {Array<Stop>} stops
 * @param {number} relative
 * @returns {UnistPoint | undefined}
 */ function relativeToPoint(stops, relative) {
    let index = 0;
    while(index < stops.length && stops[index][0] <= relative){
        index += 1;
    }
    // There are no points: that only occurs if there was an empty string.
    if (index === 0) {
        return undefined;
    }
    const [stopRelative, stopAbsolute] = stops[index - 1];
    const rest = relative - stopRelative;
    return {
        line: stopAbsolute.line,
        column: stopAbsolute.column + rest,
        offset: stopAbsolute.offset + rest
    };
}
// Copy from <https://github.com/micromark/micromark/blob/ce3593a/packages/micromark/dev/lib/create-tokenizer.js#L595>
// To do: expose that?
/**
 * Get the string value of a slice of chunks.
 *
 * @param {Array<Chunk>} chunks
 * @returns {string}
 */ function serializeChunks(chunks) {
    let index = -1;
    /** @type {Array<string>} */ const result = [];
    /** @type {boolean | undefined} */ let atTab;
    while(++index < chunks.length){
        const chunk = chunks[index];
        /** @type {string} */ let value;
        if (typeof chunk === 'string') {
            value = chunk;
        } else switch(chunk){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturn:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].cr;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lineFeed:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].lf;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].carriageReturnLineFeed:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].cr + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].lf;
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab:
                {
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].ht;
                    break;
                }
            /* c8 ignore next 6 */ case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].virtualSpace:
                {
                    if (atTab) continue;
                    value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["values"].space;
                    break;
                }
            default:
                {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](typeof chunk === 'number', 'expected number');
                    // Currently only replacement character.
                    // eslint-disable-next-line unicorn/prefer-code-point
                    value = String.fromCharCode(chunk);
                }
        }
        atTab = chunk === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].horizontalTab;
        result.push(value);
    }
    return result.join('');
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdxjs-esm@1.0.5/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn
 * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef Options
 *   Configuration (required).
 * @property {Acorn} acorn
 *   Acorn parser to use (required).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for acorn (default: `{ecmaVersion: 2020, locations: true,
 *   sourceType: 'module'}`).
 *   all fields except `locations` can be set
 * @property {boolean | null | undefined} [addResult=false]
 *   Whether to add `estree` fields to tokens with results from acorn.
 */ __turbopack_esm__({
    "mdxjsEsm": ()=>mdxjsEsm
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$core$2d$commonmark$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$40$1$2e$2$2e$3$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-events-to-acorn@1.2.3/node_modules/micromark-util-events-to-acorn/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$1$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position-from-estree@1.1.2/node_modules/unist-util-position-from-estree/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
const blankLineBefore = {
    tokenize: tokenizeNextBlank,
    partial: true
};
const allowedAcornTypes = new Set([
    'ExportAllDeclaration',
    'ExportDefaultDeclaration',
    'ExportNamedDeclaration',
    'ImportDeclaration'
]);
function mdxjsEsm(options) {
    const exportImportConstruct = {
        tokenize: tokenizeExportImport,
        concrete: true
    };
    if (!options || !options.acorn || !options.acorn.parse) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    const acorn = options.acorn;
    const acornOptions = Object.assign({
        ecmaVersion: 2020,
        sourceType: 'module'
    }, options.acornOptions);
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseE]: exportImportConstruct,
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseI]: exportImportConstruct
        }
    };
    /**
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeExportImport(effects, ok, nok) {
        const self = this;
        /** @type {Array<string>} */ const definedModuleSpecifiers = self.parser.definedModuleSpecifiers || (self.parser.definedModuleSpecifiers = []);
        const eventStart = this.events.length + 1 // Add the main `mdxjsEsm` token
        ;
        let buffer = '';
        return self.interrupt ? nok : start;
        /**
     * Start of MDX ESM.
     *
     * ```markdown
     * > | import a from 'b'
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseE || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseI, 'expected `e` or `i`');
            // Only at the start of a line, not at whitespace or in a container.
            if (self.now().column > 1) return nok(code);
            effects.enter('mdxjsEsm');
            effects.enter('mdxjsEsmData');
            effects.consume(code);
            // eslint-disable-next-line unicorn/prefer-code-point
            buffer += String.fromCharCode(code);
            return word;
        }
        /**
     * In keyword.
     *
     * ```markdown
     * > | import a from 'b'
     *     ^^^^^^
     * ```
     *
     * @type {State}
     */ function word(code) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiAlpha"](code)) {
                effects.consume(code);
                // @ts-expect-error: definitely a number.
                // eslint-disable-next-line unicorn/prefer-code-point
                buffer += String.fromCharCode(code);
                return word;
            }
            if ((buffer === 'import' || buffer === 'export') && code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space) {
                effects.consume(code);
                return inside;
            }
            return nok(code);
        }
        /**
     * In data.
     *
     * ```markdown
     * > | import a from 'b'
     *           ^
     * ```
     *
     * @type {State}
     */ function inside(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
                effects.exit('mdxjsEsmData');
                return lineStart(code);
            }
            effects.consume(code);
            return inside;
        }
        /**
     * At line ending.
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     *   | export {a}
     * ```
     *
     * @type {State}
     */ function lineStart(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
                return atEnd(code);
            }
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
                return effects.check(blankLineBefore, atEnd, continuationStart)(code);
            }
            effects.enter('mdxjsEsmData');
            return inside(code);
        }
        /**
     * At line ending that continues.
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     *   | export {a}
     * ```
     *
     * @type {State}
     */ function continuationStart(code) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code));
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return lineStart;
        }
        /**
     * At end of line (blank or eof).
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     * ```
     *
     * @type {State}
     */ function atEnd(code) {
            const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$40$1$2e$2$2e$3$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["eventsToAcorn"](self.events.slice(eventStart), {
                acorn,
                acornOptions,
                prefix: definedModuleSpecifiers.length > 0 ? 'var ' + definedModuleSpecifiers.join(',') + '\n' : ''
            });
            if (result.error) {
                // There’s an error, which could be solved with more content, and there
                // is more content.
                if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && result.swallow) {
                    return continuationStart(code);
                }
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Could not parse import/exports with acorn: ' + String(result.error), {
                    line: result.error.loc.line,
                    column: result.error.loc.column + 1,
                    offset: result.error.pos
                }, 'micromark-extension-mdxjs-esm:acorn');
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](result.estree, 'expected `estree` to be defined');
            // Remove the `VariableDeclaration`.
            if (definedModuleSpecifiers.length > 0) {
                const declaration = result.estree.body.shift();
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](declaration);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](declaration.type === 'VariableDeclaration');
            }
            let index = -1;
            while(++index < result.estree.body.length){
                const node = result.estree.body[index];
                if (!allowedAcornTypes.has(node.type)) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + node.type + '` in code: only import/exports are supported', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$1$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"](node), 'micromark-extension-mdxjs-esm:non-esm');
                }
                // Otherwise, when we’re not interrupting (hacky, because `interrupt` is
                // used to parse containers and “sniff” if this is ESM), collect all the
                // local values that are imported.
                if (node.type === 'ImportDeclaration' && !self.interrupt) {
                    let index = -1;
                    while(++index < node.specifiers.length){
                        const specifier = node.specifiers[index];
                        definedModuleSpecifiers.push(specifier.local.name);
                    }
                }
            }
            Object.assign(effects.exit('mdxjsEsm'), options.addResult ? {
                estree: result.estree
            } : undefined);
            return ok(code);
        }
    }
}
/** @type {Tokenizer} */ function tokenizeNextBlank(effects, ok, nok) {
    return start;
    /**
   * @type {State}
   */ function start(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code));
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank);
        effects.consume(code);
        effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank);
        return effects.attempt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$core$2d$commonmark$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["blankLine"], ok, nok);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdxjs-esm@1.0.5/node_modules/micromark-extension-mdxjs-esm/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: more types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxjsEsm": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$2d$esm$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsm"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$2d$esm$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdxjs-esm@1.0.5/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdxjs-esm@3.0.0/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn
 * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef Options
 *   Configuration (required).
 * @property {Acorn} acorn
 *   Acorn parser to use (required).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,
 *   sourceType: 'module'}`); all fields except `locations` can be set.
 * @property {boolean | null | undefined} [addResult=false]
 *   Whether to add `estree` fields to tokens with results from acorn
 *   (default: `false`).
 */ __turbopack_esm__({
    "mdxjsEsm": ()=>mdxjsEsm
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$core$2d$commonmark$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$40$2$2e$0$2e$2$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-events-to-acorn@2.0.2/node_modules/micromark-util-events-to-acorn/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$2$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
const blankLineBefore = {
    tokenize: tokenizeNextBlank,
    partial: true
};
const trouble = 'https://github.com/micromark/micromark-extension-mdxjs-esm';
const allowedAcornTypes = new Set([
    'ExportAllDeclaration',
    'ExportDefaultDeclaration',
    'ExportNamedDeclaration',
    'ImportDeclaration'
]);
function mdxjsEsm(options) {
    const exportImportConstruct = {
        tokenize: tokenizeExportImport,
        concrete: true
    };
    if (!options || !options.acorn || !options.acorn.parse) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    const acorn = options.acorn;
    const acornOptions = Object.assign({
        ecmaVersion: 2024,
        sourceType: 'module'
    }, options.acornOptions, {
        locations: true
    });
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseE]: exportImportConstruct,
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseI]: exportImportConstruct
        }
    };
    /**
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeExportImport(effects, ok, nok) {
        const self = this;
        const definedModuleSpecifiers = self.parser.definedModuleSpecifiers || (self.parser.definedModuleSpecifiers = []);
        const eventStart = this.events.length + 1 // Add the main `mdxjsEsm` token
        ;
        let buffer = '';
        return self.interrupt ? nok : start;
        /**
     * Start of MDX ESM.
     *
     * ```markdown
     * > | import a from 'b'
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseE || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lowercaseI, 'expected `e` or `i`');
            // Only at the start of a line, not at whitespace or in a container.
            if (self.now().column > 1) return nok(code);
            effects.enter('mdxjsEsm');
            effects.enter('mdxjsEsmData');
            effects.consume(code);
            // eslint-disable-next-line unicorn/prefer-code-point
            buffer += String.fromCharCode(code);
            return word;
        }
        /**
     * In keyword.
     *
     * ```markdown
     * > | import a from 'b'
     *     ^^^^^^
     * ```
     *
     * @type {State}
     */ function word(code) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["asciiAlpha"](code)) {
                effects.consume(code);
                // @ts-expect-error: definitely a number.
                // eslint-disable-next-line unicorn/prefer-code-point
                buffer += String.fromCharCode(code);
                return word;
            }
            if ((buffer === 'import' || buffer === 'export') && code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].space) {
                effects.consume(code);
                return inside;
            }
            return nok(code);
        }
        /**
     * In data.
     *
     * ```markdown
     * > | import a from 'b'
     *           ^
     * ```
     *
     * @type {State}
     */ function inside(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
                effects.exit('mdxjsEsmData');
                return lineStart(code);
            }
            effects.consume(code);
            return inside;
        }
        /**
     * At line ending.
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     *   | export {a}
     * ```
     *
     * @type {State}
     */ function lineStart(code) {
            if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
                return atEnd(code);
            }
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
                return effects.check(blankLineBefore, atEnd, continuationStart)(code);
            }
            effects.enter('mdxjsEsmData');
            return inside(code);
        }
        /**
     * At line ending that continues.
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     *   | export {a}
     * ```
     *
     * @type {State}
     */ function continuationStart(code) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code));
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return lineStart;
        }
        /**
     * At end of line (blank or eof).
     *
     * ```markdown
     * > | import a from 'b'
     *                      ^
     * ```
     *
     * @type {State}
     */ function atEnd(code) {
            const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$40$2$2e$0$2e$2$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["eventsToAcorn"](self.events.slice(eventStart), {
                acorn,
                acornOptions,
                tokenTypes: [
                    'mdxjsEsmData'
                ],
                prefix: definedModuleSpecifiers.length > 0 ? 'var ' + definedModuleSpecifiers.join(',') + '\n' : ''
            });
            if (result.error) {
                // There’s an error, which could be solved with more content, and there
                // is more content.
                if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && result.swallow) {
                    return continuationStart(code);
                }
                const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Could not parse import/exports with acorn', {
                    cause: result.error,
                    place: {
                        line: result.error.loc.line,
                        column: result.error.loc.column + 1,
                        offset: result.error.pos
                    },
                    ruleId: 'acorn',
                    source: 'micromark-extension-mdxjs-esm'
                });
                error.url = trouble + '#could-not-parse-importexports-with-acorn';
                throw error;
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](result.estree, 'expected `estree` to be defined');
            // Remove the `VariableDeclaration`.
            if (definedModuleSpecifiers.length > 0) {
                const declaration = result.estree.body.shift();
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](declaration);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](declaration.type === 'VariableDeclaration');
            }
            let index = -1;
            while(++index < result.estree.body.length){
                const node = result.estree.body[index];
                if (!allowedAcornTypes.has(node.type)) {
                    const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + node.type + '` in code: only import/exports are supported', {
                        place: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$2$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"](node),
                        ruleId: 'non-esm',
                        source: 'micromark-extension-mdxjs-esm'
                    });
                    error.url = trouble + '#unexpected-type-in-code-only-importexports-are-supported';
                    throw error;
                }
                // Otherwise, when we’re not interrupting (hacky, because `interrupt` is
                // used to parse containers and “sniff” if this is ESM), collect all the
                // local values that are imported.
                if (node.type === 'ImportDeclaration' && !self.interrupt) {
                    let index = -1;
                    while(++index < node.specifiers.length){
                        const specifier = node.specifiers[index];
                        definedModuleSpecifiers.push(specifier.local.name);
                    }
                }
            }
            Object.assign(effects.exit('mdxjsEsm'), options.addResult ? {
                estree: result.estree
            } : undefined);
            return ok(code);
        }
    }
}
/** @type {Tokenizer} */ function tokenizeNextBlank(effects, ok, nok) {
    return start;
    /**
   * @type {State}
   */ function start(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code));
        effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank);
        effects.consume(code);
        effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEndingBlank);
        return effects.attempt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$core$2d$commonmark$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$core$2d$commonmark$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["blankLine"], ok, nok);
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdxjs-esm@3.0.0/node_modules/micromark-extension-mdxjs-esm/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: more types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxjsEsm": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$2d$esm$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsm"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$2d$esm$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdxjs-esm@3.0.0/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-md@1.0.1/node_modules/micromark-extension-mdx-md/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Extension} Extension
 */ // To do: next major: expose functions.
/**
 * Extension for `micromark` that can be passed in `extensions` to disable
 * some CommonMark syntax (code (indented), autolinks, and HTML (flow and
 * text)) for MDX.
 *
 * @type {Extension}
 */ __turbopack_esm__({
    "mdxMd": ()=>mdxMd
});
const mdxMd = {
    disable: {
        null: [
            'autolink',
            'codeIndented',
            'htmlFlow',
            'htmlText'
        ]
    }
};

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-md@2.0.0/node_modules/micromark-extension-mdx-md/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Extension} Extension
 */ /**
 * Create an extension for `micromark` to disable some CommonMark syntax (code
 * (indented), autolinks, and HTML (flow and text)) for MDX.
 *
 * @returns {Extension}
 *   Extension for `micromark` that can be passed in `extensions` to disable
 *   some CommonMark syntax for MDX.
 */ __turbopack_esm__({
    "mdxMd": ()=>mdxMd
});
function mdxMd() {
    return {
        disable: {
            null: [
                'autolink',
                'codeIndented',
                'htmlFlow',
                'htmlText'
            ]
        }
    };
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-mdx-expression@1.0.9/node_modules/micromark-factory-mdx-expression/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Program} Program
 * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn
 * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').Point} Point
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ /**
 * @typedef MdxSignalOk
 *   Good result.
 * @property {'ok'} type
 *   Type.
 * @property {Program | undefined} estree
 *   Value.
 *
 * @typedef MdxSignalNok
 *   Bad result.
 * @property {'nok'} type
 *   Type.
 * @property {VFileMessage} message
 *   Value.
 *
 * @typedef {MdxSignalOk | MdxSignalNok} MdxSignal
 */ __turbopack_esm__({
    "factoryMdxExpression": ()=>factoryMdxExpression
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$40$1$2e$2$2e$3$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-events-to-acorn@1.2.3/node_modules/micromark-util-events-to-acorn/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$1$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position-from-estree@1.1.2/node_modules/unist-util-position-from-estree/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
function factoryMdxExpression(effects, ok, type, markerType, chunkType, acorn, acornOptions, addResult, spread, allowEmpty, allowLazy) {
    const self = this;
    const eventStart = this.events.length + 3 // Add main and marker token
    ;
    let size = 0;
    /** @type {Point} */ let pointStart;
    /** @type {Error} */ let lastCrash;
    return start;
    /**
   * Start of an MDX expression.
   *
   * ```markdown
   * > | a {Math.PI} c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        pointStart = self.now();
        return before;
    }
    /**
   * Before data.
   *
   * ```markdown
   * > | a {Math.PI} c
   *        ^
   * ```
   *
   * @type {State}
   */ function before(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            throw lastCrash || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected end of file in expression, expected a corresponding closing brace for `{`', self.now(), 'micromark-extension-mdx-expression:unexpected-eof');
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return eolAfter;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace && size === 0) {
            /** @type {MdxSignal} */ const next = acorn ? mdxExpressionParse.call(self, acorn, acornOptions, eventStart, pointStart, allowEmpty || false, spread || false) : {
                type: 'ok',
                estree: undefined
            };
            if (next.type === 'ok') {
                effects.enter(markerType);
                effects.consume(code);
                effects.exit(markerType);
                const token = effects.exit(type);
                if (addResult && next.estree) {
                    Object.assign(token, {
                        estree: next.estree
                    });
                }
                return ok;
            }
            lastCrash = next.message;
            effects.enter(chunkType);
            effects.consume(code);
            return inside;
        }
        effects.enter(chunkType);
        return inside(code);
    }
    /**
   * In data.
   *
   * ```markdown
   * > | a {Math.PI} c
   *        ^
   * ```
   *
   * @type {State}
   */ function inside(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace && size === 0 || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.exit(chunkType);
            return before(code);
        }
        // Don’t count if gnostic.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace && !acorn) {
            size += 1;
        } else if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace) {
            size -= 1;
        }
        effects.consume(code);
        return inside;
    }
    /**
   * After eol.
   *
   * ```markdown
   *   | a {b +
   * > | c} d
   *     ^
   * ```
   *
   * @type {State}
   */ function eolAfter(code) {
        const now = self.now();
        // Lazy continuation in a flow expression (or flow tag) is a syntax error.
        if (now.line !== pointStart.line && !allowLazy && self.parser.lazy[now.line]) {
            // `markdown-rs` uses:
            // ``Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc``.
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected end of file in expression, expected a corresponding closing brace for `{`', self.now(), 'micromark-extension-mdx-expression:unexpected-eof');
        }
        // Idea: investigate if we’d need to use more complex stripping.
        // Take this example:
        //
        // ```markdown
        // >  aaa <b c={`
        // >      d
        // >  `} /> eee
        // ```
        //
        // The block quote takes one space from each line, the paragraph doesn’t.
        // The intent above is *perhaps* for the split to be as `>␠␠|␠␠␠␠|d`,
        // Currently, we *don’t* do anything at all, it’s `>␠|␠␠␠␠␠|d` instead.
        //
        // Note: we used to have some handling here, and `markdown-rs` still does,
        // which should be removed.
        return before(code);
    }
}
/**
 * Mix of `markdown-rs`’s `parse_expression` and `MdxExpressionParse`
 * functionality, to wrap our `eventsToAcorn`.
 *
 * In the future, the plan is to realise the rust way, which allows arbitrary
 * parsers.
 *
 * @this {TokenizeContext}
 * @param {Acorn} acorn
 * @param {AcornOptions | null | undefined} acornOptions
 * @param {number} eventStart
 * @param {Point} pointStart
 * @param {boolean} allowEmpty
 * @param {boolean} spread
 * @returns {MdxSignal}
 */ // eslint-disable-next-line max-params
function mdxExpressionParse(acorn, acornOptions, eventStart, pointStart, allowEmpty, spread) {
    // Gnostic mode: parse w/ acorn.
    const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$40$1$2e$2$2e$3$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["eventsToAcorn"](this.events.slice(eventStart), {
        acorn,
        acornOptions,
        start: pointStart,
        expression: true,
        allowEmpty,
        prefix: spread ? '({' : '',
        suffix: spread ? '})' : ''
    });
    const estree = result.estree;
    // Get the spread value.
    if (spread && estree) {
        // Should always be the case as we wrap in `d={}`
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](estree.type === 'Program', 'expected program');
        const head = estree.body[0];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](head, 'expected body');
        // Can occur in some complex attributes.
        /* c8 ignore next 11 */ if (head.type !== 'ExpressionStatement' || head.expression.type !== 'ObjectExpression') {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + head.type + '` in code: expected an object spread (`{...spread}`)', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$1$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"](head).start, 'micromark-extension-mdx-expression:non-spread');
        } else if (head.expression.properties[1]) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected extra content in spread: only a single spread is supported', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$1$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"](head.expression.properties[1]).start, 'micromark-extension-mdx-expression:spread-extra');
        } else if (head.expression.properties[0] && head.expression.properties[0].type !== 'SpreadElement') {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + head.expression.properties[0].type + '` in code: only spread elements are supported', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$1$2e$1$2e$2$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"](head.expression.properties[0]).start, 'micromark-extension-mdx-expression:non-spread');
        }
    }
    if (result.error) {
        return {
            type: 'nok',
            message: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Could not parse expression with acorn: ' + result.error.message, {
                line: result.error.loc.line,
                column: result.error.loc.column + 1,
                offset: result.error.pos
            }, 'micromark-extension-mdx-expression:acorn')
        };
    }
    return {
        type: 'ok',
        estree
    };
}

})()),
"[project]/node_modules/.pnpm/micromark-factory-mdx-expression@2.0.1/node_modules/micromark-factory-mdx-expression/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Program} Program
 * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn
 * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').Point} Point
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenType} TokenType
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ /**
 * @typedef MdxSignalOk
 *   Good result.
 * @property {'ok'} type
 *   Type.
 * @property {Program | undefined} estree
 *   Value.
 *
 * @typedef MdxSignalNok
 *   Bad result.
 * @property {'nok'} type
 *   Type.
 * @property {VFileMessage} message
 *   Value.
 *
 * @typedef {MdxSignalNok | MdxSignalOk} MdxSignal
 */ __turbopack_esm__({
    "factoryMdxExpression": ()=>factoryMdxExpression
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$40$2$2e$0$2e$2$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-events-to-acorn@2.0.2/node_modules/micromark-util-events-to-acorn/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$2$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
const trouble = 'https://github.com/micromark/micromark-extension-mdx-expression/tree/main/packages/micromark-extension-mdx-expression';
const unexpectedEofHash = '#unexpected-end-of-file-in-expression-expected-a-corresponding-closing-brace-for-';
const unexpectedLazyHash = '#unexpected-lazy-line-in-expression-in-container-expected-line-to-be-prefixed';
const nonSpreadHash = '#unexpected-type-in-code-expected-an-object-spread-spread';
const spreadExtraHash = '#unexpected-extra-content-in-spread-only-a-single-spread-is-supported';
const acornHash = '#could-not-parse-expression-with-acorn';
function factoryMdxExpression(effects, ok, type, markerType, chunkType, acorn, acornOptions, addResult, spread, allowEmpty, allowLazy) {
    const self = this;
    const eventStart = this.events.length + 3 // Add main and marker token
    ;
    let size = 0;
    /** @type {Point} */ let pointStart;
    /** @type {Error} */ let lastCrash;
    return start;
    /**
   * Start of an MDX expression.
   *
   * ```markdown
   * > | a {Math.PI} c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        pointStart = self.now();
        return before;
    }
    /**
   * Before data.
   *
   * ```markdown
   * > | a {Math.PI} c
   *        ^
   * ```
   *
   * @type {State}
   */ function before(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            if (lastCrash) throw lastCrash;
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected end of file in expression, expected a corresponding closing brace for `{`', {
                place: self.now(),
                ruleId: 'unexpected-eof',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + unexpectedEofHash;
            throw error;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return eolAfter;
        }
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace && size === 0) {
            /** @type {MdxSignal} */ const next = acorn ? mdxExpressionParse.call(self, acorn, acornOptions, chunkType, eventStart, pointStart, allowEmpty || false, spread || false) : {
                type: 'ok',
                estree: undefined
            };
            if (next.type === 'ok') {
                effects.enter(markerType);
                effects.consume(code);
                effects.exit(markerType);
                const token = effects.exit(type);
                if (addResult && next.estree) {
                    Object.assign(token, {
                        estree: next.estree
                    });
                }
                return ok;
            }
            lastCrash = next.message;
            effects.enter(chunkType);
            effects.consume(code);
            return inside;
        }
        effects.enter(chunkType);
        return inside(code);
    }
    /**
   * In data.
   *
   * ```markdown
   * > | a {Math.PI} c
   *        ^
   * ```
   *
   * @type {State}
   */ function inside(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace && size === 0 || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.exit(chunkType);
            return before(code);
        }
        // Don’t count if gnostic.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace && !acorn) {
            size += 1;
        } else if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].rightCurlyBrace) {
            size -= 1;
        }
        effects.consume(code);
        return inside;
    }
    /**
   * After eol.
   *
   * ```markdown
   *   | a {b +
   * > | c} d
   *     ^
   * ```
   *
   * @type {State}
   */ function eolAfter(code) {
        const now = self.now();
        // Lazy continuation in a flow expression (or flow tag) is a syntax error.
        if (now.line !== pointStart.line && !allowLazy && self.parser.lazy[now.line]) {
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc', {
                place: self.now(),
                ruleId: 'unexpected-lazy',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + unexpectedLazyHash;
            throw error;
        }
        // Idea: investigate if we’d need to use more complex stripping.
        // Take this example:
        //
        // ```markdown
        // >  aaa <b c={`
        // >      d
        // >  `} /> eee
        // ```
        //
        // The block quote takes one space from each line, the paragraph doesn’t.
        // The intent above is *perhaps* for the split to be as `>␠␠|␠␠␠␠|d`,
        // Currently, we *don’t* do anything at all, it’s `>␠|␠␠␠␠␠|d` instead.
        //
        // Note: we used to have some handling here, and `markdown-rs` still does,
        // which should be removed.
        return before(code);
    }
}
/**
 * Mix of `markdown-rs`’s `parse_expression` and `MdxExpressionParse`
 * functionality, to wrap our `eventsToAcorn`.
 *
 * In the future, the plan is to realise the rust way, which allows arbitrary
 * parsers.
 *
 * @this {TokenizeContext}
 * @param {Acorn} acorn
 * @param {AcornOptions | null | undefined} acornOptions
 * @param {TokenType} chunkType
 * @param {number} eventStart
 * @param {Point} pointStart
 * @param {boolean} allowEmpty
 * @param {boolean} spread
 * @returns {MdxSignal}
 */ // eslint-disable-next-line max-params
function mdxExpressionParse(acorn, acornOptions, chunkType, eventStart, pointStart, allowEmpty, spread) {
    // Gnostic mode: parse w/ acorn.
    const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$40$2$2e$0$2e$2$2f$node_modules$2f$micromark$2d$util$2d$events$2d$to$2d$acorn$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["eventsToAcorn"](this.events.slice(eventStart), {
        acorn,
        tokenTypes: [
            chunkType
        ],
        acornOptions,
        start: pointStart,
        expression: true,
        allowEmpty,
        prefix: spread ? '({' : '',
        suffix: spread ? '})' : ''
    });
    const estree = result.estree;
    // Get the spread value.
    if (spread && estree) {
        // Should always be the case as we wrap in `d={}`
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](estree.type === 'Program', 'expected program');
        const head = estree.body[0];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](head, 'expected body');
        if (head.type !== 'ExpressionStatement' || head.expression.type !== 'ObjectExpression') {
            const place = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$2$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"](head);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](place, 'expected position');
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + head.type + '` in code: expected an object spread (`{...spread}`)', {
                place: place.start,
                ruleId: 'non-spread',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + nonSpreadHash;
            throw error;
        }
        if (head.expression.properties[1]) {
            const place = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$2$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"](head.expression.properties[1]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](place, 'expected position');
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected extra content in spread: only a single spread is supported', {
                place: place.start,
                ruleId: 'spread-extra',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + spreadExtraHash;
            throw error;
        }
        if (head.expression.properties[0] && head.expression.properties[0].type !== 'SpreadElement') {
            const place = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$2d$from$2d$estree$40$2$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2d$from$2d$estree$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["positionFromEstree"](head.expression.properties[0]);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](place, 'expected position');
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected `' + head.expression.properties[0].type + '` in code: only spread elements are supported', {
                place: place.start,
                ruleId: 'non-spread',
                source: 'micromark-extension-mdx-expression'
            });
            error.url = trouble + nonSpreadHash;
            throw error;
        }
    }
    if (result.error) {
        const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Could not parse expression with acorn', {
            cause: result.error,
            place: {
                line: result.error.loc.line,
                column: result.error.loc.column + 1,
                offset: result.error.pos
            },
            ruleId: 'acorn',
            source: 'micromark-extension-mdx-expression'
        });
        error.url = trouble + acornHash;
        return {
            type: 'nok',
            message: error
        };
    }
    return {
        type: 'ok',
        estree
    };
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-expression@1.0.8/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn
 * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef Options
 *   Configuration (optional).
 * @property {Acorn | null | undefined} [acorn]
 *   Acorn parser to use (optional).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for acorn (default: `{ecmaVersion: 2020, locations: true,
 *   sourceType: 'module'}`).
 *
 *   All fields except `locations` can be set.
 * @property {boolean | null | undefined} [addResult=false]
 *   Whether to add `estree` fields to tokens with results from acorn.
 * @property {boolean | null | undefined} [spread=false]
 *   Undocumented option to parse only a spread (used by
 *   `micromark-extension-mdx-jsx` to parse spread attributes).
 * @property {boolean | null | undefined} [allowEmpty=true]
 *   Undocumented option to disallow empty attributes (used by
 *   `micromark-extension-mdx-jsx` to prohobit empty attribute values).
 */ __turbopack_esm__({
    "mdxExpression": ()=>mdxExpression
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$1$2e$0$2e$9$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-mdx-expression@1.0.9/node_modules/micromark-factory-mdx-expression/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-space@1.1.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
function mdxExpression(options) {
    const options_ = options || {};
    const addResult = options_.addResult;
    const acorn = options_.acorn;
    // Hidden: `micromark-extension-mdx-jsx` supports expressions in tags,
    // and one of them is only “spread” elements.
    // It also has expressions that are not allowed to be empty (`<x y={}/>`).
    // Instead of duplicating code there, this are two small hidden feature here
    // to test that behavior.
    const spread = options_.spread;
    let allowEmpty = options_.allowEmpty;
    /** @type {AcornOptions} */ let acornOptions;
    if (allowEmpty === null || allowEmpty === undefined) {
        allowEmpty = true;
    }
    if (acorn) {
        if (!acorn.parseExpressionAt) {
            throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');
        }
        acornOptions = Object.assign({
            ecmaVersion: 2020,
            sourceType: 'module'
        }, options_.acornOptions);
    } else if (options_.acornOptions || options_.addResult) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace]: {
                tokenize: tokenizeFlowExpression,
                concrete: true
            }
        },
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace]: {
                tokenize: tokenizeTextExpression
            }
        }
    };
    /**
   * MDX expression (flow).
   *
   * ```markdown
   * > | {Math.PI}
   *     ^^^^^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeFlowExpression(effects, ok, nok) {
        const self = this;
        return start;
        /**
     * Start of an MDX expression (flow).
     *
     * ```markdown
     * > | {Math.PI}
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            // To do: in `markdown-rs`, constructs need to parse the indent themselves.
            // This should also be introduced in `micromark-js`.
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
            return before(code);
        }
        /**
     * After optional whitespace, before expression.
     *
     * ```markdown
     * > | {Math.PI}
     *     ^
     * ```
     *
     * @type {State}
     */ function before(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$1$2e$0$2e$9$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, after, 'mdxFlowExpression', 'mdxFlowExpressionMarker', 'mdxFlowExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty)(code);
        }
        /**
     * After expression.
     *
     * ```markdown
     * > | {Math.PI}
     *              ^
     * ```
     *
     * @type {State}
     */ function after(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factorySpace"](effects, end, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code) : end(code);
        }
        /**
     * After expression, after optional whitespace.
     *
     * ```markdown
     * > | {Math.PI}␠␊
     *               ^
     * ```
     *
     * @type {State}
     */ function end(code) {
            return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code) ? ok(code) : nok(code);
        }
    }
    /**
   * MDX expression (text).
   *
   * ```markdown
   * > | a {Math.PI} c.
   *       ^^^^^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeTextExpression(effects, ok) {
        const self = this;
        return start;
        /**
     * Start of an MDX expression (text).
     *
     * ```markdown
     * > | a {Math.PI} c.
     *       ^
     * ```
     *
     *
     * @type {State}
     */ function start(code) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$1$2e$0$2e$9$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, ok, 'mdxTextExpression', 'mdxTextExpressionMarker', 'mdxTextExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty, true)(code);
        }
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-expression@1.0.8/node_modules/micromark-extension-mdx-expression/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/syntax.js').Options} Options
 */ __turbopack_esm__({
    "mdxExpression": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$expression$40$1$2e$0$2e$8$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpression"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$expression$40$1$2e$0$2e$8$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-expression@1.0.8/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-expression@3.0.0/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn
 * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef Options
 *   Configuration (optional).
 * @property {Acorn | null | undefined} [acorn]
 *   Acorn parser to use (optional).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,
 *   sourceType: 'module'}`).
 *
 *   All fields except `locations` can be set.
 * @property {boolean | null | undefined} [addResult=false]
 *   Whether to add `estree` fields to tokens with results from acorn (default:
 *   `false`).
 * @property {boolean | null | undefined} [spread=false]
 *   Undocumented option to parse only a spread (used by
 *   `micromark-extension-mdx-jsx` to parse spread attributes) (default:
 *   `false`).
 * @property {boolean | null | undefined} [allowEmpty=true]
 *   Undocumented option to disallow empty attributes (used by
 *   `micromark-extension-mdx-jsx` to prohobit empty attribute values)
 *   (default: `false`).
 */ __turbopack_esm__({
    "mdxExpression": ()=>mdxExpression
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-mdx-expression@2.0.1/node_modules/micromark-factory-mdx-expression/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
function mdxExpression(options) {
    const options_ = options || {};
    const addResult = options_.addResult;
    const acorn = options_.acorn;
    // Hidden: `micromark-extension-mdx-jsx` supports expressions in tags,
    // and one of them is only “spread” elements.
    // It also has expressions that are not allowed to be empty (`<x y={}/>`).
    // Instead of duplicating code there, this are two small hidden feature here
    // to test that behavior.
    const spread = options_.spread;
    let allowEmpty = options_.allowEmpty;
    /** @type {AcornOptions} */ let acornOptions;
    if (allowEmpty === null || allowEmpty === undefined) {
        allowEmpty = true;
    }
    if (acorn) {
        if (!acorn.parseExpressionAt) {
            throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');
        }
        acornOptions = Object.assign({
            ecmaVersion: 2024,
            sourceType: 'module'
        }, options_.acornOptions);
    } else if (options_.acornOptions || options_.addResult) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace]: {
                name: 'mdxFlowExpression',
                tokenize: tokenizeFlowExpression,
                concrete: true
            }
        },
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace]: {
                name: 'mdxTextExpression',
                tokenize: tokenizeTextExpression
            }
        }
    };
    /**
   * MDX expression (flow).
   *
   * ```markdown
   * > | {Math.PI}
   *     ^^^^^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeFlowExpression(effects, ok, nok) {
        const self = this;
        return start;
        /**
     * Start of an MDX expression (flow).
     *
     * ```markdown
     * > | {Math.PI}
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            // To do: in `markdown-rs`, constructs need to parse the indent themselves.
            // This should also be introduced in `micromark-js`.
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
            return before(code);
        }
        /**
     * After optional whitespace, before expression.
     *
     * ```markdown
     * > | {Math.PI}
     *     ^
     * ```
     *
     * @type {State}
     */ function before(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, after, 'mdxFlowExpression', 'mdxFlowExpressionMarker', 'mdxFlowExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty)(code);
        }
        /**
     * After expression.
     *
     * ```markdown
     * > | {Math.PI}
     *              ^
     * ```
     *
     * @type {State}
     */ function after(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factorySpace"](effects, end, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code) : end(code);
        }
        /**
     * After expression, after optional whitespace.
     *
     * ```markdown
     * > | {Math.PI}␠␊
     *               ^
     * ```
     *
     * @type {State}
     */ function end(code) {
            // We want to allow tags directly after expressions.
            //
            // This case is useful:
            //
            // ```mdx
            // <a>{b}</a>
            // ```
            //
            // This case is not (very?) useful:
            //
            // ```mdx
            // {a}<b/>
            // ```
            //
            // …but it would be tougher than needed to disallow.
            //
            // To allow that, here we call the flow construct of
            // `micromark-extension-mdx-jsx`, and there we call this one.
            //
            // It would introduce a cyclical interdependency if we test JSX and
            // expressions here.
            // Because the JSX extension already uses parts of this monorepo, we
            // instead test it there.
            const lessThanValue = self.parser.constructs.flow[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan];
            const constructs = Array.isArray(lessThanValue) ? lessThanValue : /* c8 ignore next 3 -- always a list when normalized. */ lessThanValue ? [
                lessThanValue
            ] : [];
            const jsxTag = constructs.find(function(d) {
                return d.name === 'mdxJsxFlowTag';
            });
            /* c8 ignore next 3 -- this is tested in `micromark-extension-mdx-jsx` */ if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan && jsxTag) {
                return effects.attempt(jsxTag, end, nok)(code);
            }
            return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code) ? ok(code) : nok(code);
        }
    }
    /**
   * MDX expression (text).
   *
   * ```markdown
   * > | a {Math.PI} c.
   *       ^^^^^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeTextExpression(effects, ok) {
        const self = this;
        return start;
        /**
     * Start of an MDX expression (text).
     *
     * ```markdown
     * > | a {Math.PI} c.
     *       ^
     * ```
     *
     *
     * @type {State}
     */ function start(code) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace, 'expected `{`');
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, ok, 'mdxTextExpression', 'mdxTextExpressionMarker', 'mdxTextExpressionChunk', acorn, acornOptions, addResult, spread, allowEmpty, true)(code);
        }
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-expression@3.0.0/node_modules/micromark-extension-mdx-expression/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/syntax.js').Options} Options
 */ __turbopack_esm__({
    "mdxExpression": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$expression$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpression"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$expression$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-expression@3.0.0/node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.11.2/node_modules/acorn-jsx/xhtml.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

module.exports = {
    quot: '\u0022',
    amp: '&',
    apos: '\u0027',
    lt: '<',
    gt: '>',
    nbsp: '\u00A0',
    iexcl: '\u00A1',
    cent: '\u00A2',
    pound: '\u00A3',
    curren: '\u00A4',
    yen: '\u00A5',
    brvbar: '\u00A6',
    sect: '\u00A7',
    uml: '\u00A8',
    copy: '\u00A9',
    ordf: '\u00AA',
    laquo: '\u00AB',
    not: '\u00AC',
    shy: '\u00AD',
    reg: '\u00AE',
    macr: '\u00AF',
    deg: '\u00B0',
    plusmn: '\u00B1',
    sup2: '\u00B2',
    sup3: '\u00B3',
    acute: '\u00B4',
    micro: '\u00B5',
    para: '\u00B6',
    middot: '\u00B7',
    cedil: '\u00B8',
    sup1: '\u00B9',
    ordm: '\u00BA',
    raquo: '\u00BB',
    frac14: '\u00BC',
    frac12: '\u00BD',
    frac34: '\u00BE',
    iquest: '\u00BF',
    Agrave: '\u00C0',
    Aacute: '\u00C1',
    Acirc: '\u00C2',
    Atilde: '\u00C3',
    Auml: '\u00C4',
    Aring: '\u00C5',
    AElig: '\u00C6',
    Ccedil: '\u00C7',
    Egrave: '\u00C8',
    Eacute: '\u00C9',
    Ecirc: '\u00CA',
    Euml: '\u00CB',
    Igrave: '\u00CC',
    Iacute: '\u00CD',
    Icirc: '\u00CE',
    Iuml: '\u00CF',
    ETH: '\u00D0',
    Ntilde: '\u00D1',
    Ograve: '\u00D2',
    Oacute: '\u00D3',
    Ocirc: '\u00D4',
    Otilde: '\u00D5',
    Ouml: '\u00D6',
    times: '\u00D7',
    Oslash: '\u00D8',
    Ugrave: '\u00D9',
    Uacute: '\u00DA',
    Ucirc: '\u00DB',
    Uuml: '\u00DC',
    Yacute: '\u00DD',
    THORN: '\u00DE',
    szlig: '\u00DF',
    agrave: '\u00E0',
    aacute: '\u00E1',
    acirc: '\u00E2',
    atilde: '\u00E3',
    auml: '\u00E4',
    aring: '\u00E5',
    aelig: '\u00E6',
    ccedil: '\u00E7',
    egrave: '\u00E8',
    eacute: '\u00E9',
    ecirc: '\u00EA',
    euml: '\u00EB',
    igrave: '\u00EC',
    iacute: '\u00ED',
    icirc: '\u00EE',
    iuml: '\u00EF',
    eth: '\u00F0',
    ntilde: '\u00F1',
    ograve: '\u00F2',
    oacute: '\u00F3',
    ocirc: '\u00F4',
    otilde: '\u00F5',
    ouml: '\u00F6',
    divide: '\u00F7',
    oslash: '\u00F8',
    ugrave: '\u00F9',
    uacute: '\u00FA',
    ucirc: '\u00FB',
    uuml: '\u00FC',
    yacute: '\u00FD',
    thorn: '\u00FE',
    yuml: '\u00FF',
    OElig: '\u0152',
    oelig: '\u0153',
    Scaron: '\u0160',
    scaron: '\u0161',
    Yuml: '\u0178',
    fnof: '\u0192',
    circ: '\u02C6',
    tilde: '\u02DC',
    Alpha: '\u0391',
    Beta: '\u0392',
    Gamma: '\u0393',
    Delta: '\u0394',
    Epsilon: '\u0395',
    Zeta: '\u0396',
    Eta: '\u0397',
    Theta: '\u0398',
    Iota: '\u0399',
    Kappa: '\u039A',
    Lambda: '\u039B',
    Mu: '\u039C',
    Nu: '\u039D',
    Xi: '\u039E',
    Omicron: '\u039F',
    Pi: '\u03A0',
    Rho: '\u03A1',
    Sigma: '\u03A3',
    Tau: '\u03A4',
    Upsilon: '\u03A5',
    Phi: '\u03A6',
    Chi: '\u03A7',
    Psi: '\u03A8',
    Omega: '\u03A9',
    alpha: '\u03B1',
    beta: '\u03B2',
    gamma: '\u03B3',
    delta: '\u03B4',
    epsilon: '\u03B5',
    zeta: '\u03B6',
    eta: '\u03B7',
    theta: '\u03B8',
    iota: '\u03B9',
    kappa: '\u03BA',
    lambda: '\u03BB',
    mu: '\u03BC',
    nu: '\u03BD',
    xi: '\u03BE',
    omicron: '\u03BF',
    pi: '\u03C0',
    rho: '\u03C1',
    sigmaf: '\u03C2',
    sigma: '\u03C3',
    tau: '\u03C4',
    upsilon: '\u03C5',
    phi: '\u03C6',
    chi: '\u03C7',
    psi: '\u03C8',
    omega: '\u03C9',
    thetasym: '\u03D1',
    upsih: '\u03D2',
    piv: '\u03D6',
    ensp: '\u2002',
    emsp: '\u2003',
    thinsp: '\u2009',
    zwnj: '\u200C',
    zwj: '\u200D',
    lrm: '\u200E',
    rlm: '\u200F',
    ndash: '\u2013',
    mdash: '\u2014',
    lsquo: '\u2018',
    rsquo: '\u2019',
    sbquo: '\u201A',
    ldquo: '\u201C',
    rdquo: '\u201D',
    bdquo: '\u201E',
    dagger: '\u2020',
    Dagger: '\u2021',
    bull: '\u2022',
    hellip: '\u2026',
    permil: '\u2030',
    prime: '\u2032',
    Prime: '\u2033',
    lsaquo: '\u2039',
    rsaquo: '\u203A',
    oline: '\u203E',
    frasl: '\u2044',
    euro: '\u20AC',
    image: '\u2111',
    weierp: '\u2118',
    real: '\u211C',
    trade: '\u2122',
    alefsym: '\u2135',
    larr: '\u2190',
    uarr: '\u2191',
    rarr: '\u2192',
    darr: '\u2193',
    harr: '\u2194',
    crarr: '\u21B5',
    lArr: '\u21D0',
    uArr: '\u21D1',
    rArr: '\u21D2',
    dArr: '\u21D3',
    hArr: '\u21D4',
    forall: '\u2200',
    part: '\u2202',
    exist: '\u2203',
    empty: '\u2205',
    nabla: '\u2207',
    isin: '\u2208',
    notin: '\u2209',
    ni: '\u220B',
    prod: '\u220F',
    sum: '\u2211',
    minus: '\u2212',
    lowast: '\u2217',
    radic: '\u221A',
    prop: '\u221D',
    infin: '\u221E',
    ang: '\u2220',
    and: '\u2227',
    or: '\u2228',
    cap: '\u2229',
    cup: '\u222A',
    'int': '\u222B',
    there4: '\u2234',
    sim: '\u223C',
    cong: '\u2245',
    asymp: '\u2248',
    ne: '\u2260',
    equiv: '\u2261',
    le: '\u2264',
    ge: '\u2265',
    sub: '\u2282',
    sup: '\u2283',
    nsub: '\u2284',
    sube: '\u2286',
    supe: '\u2287',
    oplus: '\u2295',
    otimes: '\u2297',
    perp: '\u22A5',
    sdot: '\u22C5',
    lceil: '\u2308',
    rceil: '\u2309',
    lfloor: '\u230A',
    rfloor: '\u230B',
    lang: '\u2329',
    rang: '\u232A',
    loz: '\u25CA',
    spades: '\u2660',
    clubs: '\u2663',
    hearts: '\u2665',
    diams: '\u2666'
};

}.call(this) }),
"[project]/node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.11.2/node_modules/acorn-jsx/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
const XHTMLEntities = __turbopack_require__("[project]/node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.11.2/node_modules/acorn-jsx/xhtml.js [rsc] (ecmascript)");
const hexNumber = /^[\da-fA-F]+$/;
const decimalNumber = /^\d+$/;
// The map to `acorn-jsx` tokens from `acorn` namespace objects.
const acornJsxMap = new WeakMap();
// Get the original tokens for the given `acorn` namespace object.
function getJsxTokens(acorn) {
    acorn = acorn.Parser.acorn || acorn;
    let acornJsx = acornJsxMap.get(acorn);
    if (!acornJsx) {
        const tt = acorn.tokTypes;
        const TokContext = acorn.TokContext;
        const TokenType = acorn.TokenType;
        const tc_oTag = new TokContext('<tag', false);
        const tc_cTag = new TokContext('</tag', false);
        const tc_expr = new TokContext('<tag>...</tag>', true, true);
        const tokContexts = {
            tc_oTag: tc_oTag,
            tc_cTag: tc_cTag,
            tc_expr: tc_expr
        };
        const tokTypes = {
            jsxName: new TokenType('jsxName'),
            jsxText: new TokenType('jsxText', {
                beforeExpr: true
            }),
            jsxTagStart: new TokenType('jsxTagStart', {
                startsExpr: true
            }),
            jsxTagEnd: new TokenType('jsxTagEnd')
        };
        tokTypes.jsxTagStart.updateContext = function() {
            this.context.push(tc_expr); // treat as beginning of JSX expression
            this.context.push(tc_oTag); // start opening tag context
            this.exprAllowed = false;
        };
        tokTypes.jsxTagEnd.updateContext = function(prevType) {
            let out = this.context.pop();
            if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {
                this.context.pop();
                this.exprAllowed = this.curContext() === tc_expr;
            } else {
                this.exprAllowed = true;
            }
        };
        acornJsx = {
            tokContexts: tokContexts,
            tokTypes: tokTypes
        };
        acornJsxMap.set(acorn, acornJsx);
    }
    return acornJsx;
}
// Transforms JSX element name to string.
function getQualifiedJSXName(object) {
    if (!object) return object;
    if (object.type === 'JSXIdentifier') return object.name;
    if (object.type === 'JSXNamespacedName') return object.namespace.name + ':' + object.name.name;
    if (object.type === 'JSXMemberExpression') return getQualifiedJSXName(object.object) + '.' + getQualifiedJSXName(object.property);
}
module.exports = function(options) {
    options = options || {};
    return function(Parser) {
        return plugin({
            allowNamespaces: options.allowNamespaces !== false,
            allowNamespacedObjects: !!options.allowNamespacedObjects
        }, Parser);
    };
};
// This is `tokTypes` of the peer dep.
// This can be different instances from the actual `tokTypes` this plugin uses.
Object.defineProperty(module.exports, "tokTypes", {
    get: function get_tokTypes() {
        return getJsxTokens(__turbopack_require__("[project]/node_modules/.pnpm/acorn@8.11.2/node_modules/acorn/dist/acorn.js [rsc] (ecmascript)")).tokTypes;
    },
    configurable: true,
    enumerable: true
});
function plugin(options, Parser) {
    const acorn = Parser.acorn || __turbopack_require__("[project]/node_modules/.pnpm/acorn@8.11.2/node_modules/acorn/dist/acorn.js [rsc] (ecmascript)");
    const acornJsx = getJsxTokens(acorn);
    const tt = acorn.tokTypes;
    const tok = acornJsx.tokTypes;
    const tokContexts = acorn.tokContexts;
    const tc_oTag = acornJsx.tokContexts.tc_oTag;
    const tc_cTag = acornJsx.tokContexts.tc_cTag;
    const tc_expr = acornJsx.tokContexts.tc_expr;
    const isNewLine = acorn.isNewLine;
    const isIdentifierStart = acorn.isIdentifierStart;
    const isIdentifierChar = acorn.isIdentifierChar;
    return class extends Parser {
        // Expose actual `tokTypes` and `tokContexts` to other plugins.
        static get acornJsx() {
            return acornJsx;
        }
        // Reads inline JSX contents token.
        jsx_readToken() {
            let out = '', chunkStart = this.pos;
            for(;;){
                if (this.pos >= this.input.length) this.raise(this.start, 'Unterminated JSX contents');
                let ch = this.input.charCodeAt(this.pos);
                switch(ch){
                    case 60:
                    case 123:
                        if (this.pos === this.start) {
                            if (ch === 60 && this.exprAllowed) {
                                ++this.pos;
                                return this.finishToken(tok.jsxTagStart);
                            }
                            return this.getTokenFromCode(ch);
                        }
                        out += this.input.slice(chunkStart, this.pos);
                        return this.finishToken(tok.jsxText, out);
                    case 38:
                        out += this.input.slice(chunkStart, this.pos);
                        out += this.jsx_readEntity();
                        chunkStart = this.pos;
                        break;
                    case 62:
                    case 125:
                        this.raise(this.pos, "Unexpected token `" + this.input[this.pos] + "`. Did you mean `" + (ch === 62 ? "&gt;" : "&rbrace;") + "` or " + "`{\"" + this.input[this.pos] + "\"}" + "`?");
                    default:
                        if (isNewLine(ch)) {
                            out += this.input.slice(chunkStart, this.pos);
                            out += this.jsx_readNewLine(true);
                            chunkStart = this.pos;
                        } else {
                            ++this.pos;
                        }
                }
            }
        }
        jsx_readNewLine(normalizeCRLF) {
            let ch = this.input.charCodeAt(this.pos);
            let out;
            ++this.pos;
            if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
                ++this.pos;
                out = normalizeCRLF ? '\n' : '\r\n';
            } else {
                out = String.fromCharCode(ch);
            }
            if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
            }
            return out;
        }
        jsx_readString(quote) {
            let out = '', chunkStart = ++this.pos;
            for(;;){
                if (this.pos >= this.input.length) this.raise(this.start, 'Unterminated string constant');
                let ch = this.input.charCodeAt(this.pos);
                if (ch === quote) break;
                if (ch === 38) {
                    out += this.input.slice(chunkStart, this.pos);
                    out += this.jsx_readEntity();
                    chunkStart = this.pos;
                } else if (isNewLine(ch)) {
                    out += this.input.slice(chunkStart, this.pos);
                    out += this.jsx_readNewLine(false);
                    chunkStart = this.pos;
                } else {
                    ++this.pos;
                }
            }
            out += this.input.slice(chunkStart, this.pos++);
            return this.finishToken(tt.string, out);
        }
        jsx_readEntity() {
            let str = '', count = 0, entity;
            let ch = this.input[this.pos];
            if (ch !== '&') this.raise(this.pos, 'Entity must start with an ampersand');
            let startPos = ++this.pos;
            while(this.pos < this.input.length && count++ < 10){
                ch = this.input[this.pos++];
                if (ch === ';') {
                    if (str[0] === '#') {
                        if (str[1] === 'x') {
                            str = str.substr(2);
                            if (hexNumber.test(str)) entity = String.fromCharCode(parseInt(str, 16));
                        } else {
                            str = str.substr(1);
                            if (decimalNumber.test(str)) entity = String.fromCharCode(parseInt(str, 10));
                        }
                    } else {
                        entity = XHTMLEntities[str];
                    }
                    break;
                }
                str += ch;
            }
            if (!entity) {
                this.pos = startPos;
                return '&';
            }
            return entity;
        }
        // Read a JSX identifier (valid tag or attribute name).
        //
        // Optimized version since JSX identifiers can't contain
        // escape characters and so can be read as single slice.
        // Also assumes that first character was already checked
        // by isIdentifierStart in readToken.
        jsx_readWord() {
            let ch, start = this.pos;
            do {
                ch = this.input.charCodeAt(++this.pos);
            }while (isIdentifierChar(ch) || ch === 45) // '-'
            return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));
        }
        // Parse next token as JSX identifier
        jsx_parseIdentifier() {
            let node = this.startNode();
            if (this.type === tok.jsxName) node.name = this.value;
            else if (this.type.keyword) node.name = this.type.keyword;
            else this.unexpected();
            this.next();
            return this.finishNode(node, 'JSXIdentifier');
        }
        // Parse namespaced identifier.
        jsx_parseNamespacedName() {
            let startPos = this.start, startLoc = this.startLoc;
            let name = this.jsx_parseIdentifier();
            if (!options.allowNamespaces || !this.eat(tt.colon)) return name;
            var node = this.startNodeAt(startPos, startLoc);
            node.namespace = name;
            node.name = this.jsx_parseIdentifier();
            return this.finishNode(node, 'JSXNamespacedName');
        }
        // Parses element name in any form - namespaced, member
        // or single identifier.
        jsx_parseElementName() {
            if (this.type === tok.jsxTagEnd) return '';
            let startPos = this.start, startLoc = this.startLoc;
            let node = this.jsx_parseNamespacedName();
            if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {
                this.unexpected();
            }
            while(this.eat(tt.dot)){
                let newNode = this.startNodeAt(startPos, startLoc);
                newNode.object = node;
                newNode.property = this.jsx_parseIdentifier();
                node = this.finishNode(newNode, 'JSXMemberExpression');
            }
            return node;
        }
        // Parses any type of JSX attribute value.
        jsx_parseAttributeValue() {
            switch(this.type){
                case tt.braceL:
                    let node = this.jsx_parseExpressionContainer();
                    if (node.expression.type === 'JSXEmptyExpression') this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');
                    return node;
                case tok.jsxTagStart:
                case tt.string:
                    return this.parseExprAtom();
                default:
                    this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');
            }
        }
        // JSXEmptyExpression is unique type since it doesn't actually parse anything,
        // and so it should start at the end of last read token (left brace) and finish
        // at the beginning of the next one (right brace).
        jsx_parseEmptyExpression() {
            let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
            return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);
        }
        // Parses JSX expression enclosed into curly brackets.
        jsx_parseExpressionContainer() {
            let node = this.startNode();
            this.next();
            node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();
            this.expect(tt.braceR);
            return this.finishNode(node, 'JSXExpressionContainer');
        }
        // Parses following JSX attribute name-value pair.
        jsx_parseAttribute() {
            let node = this.startNode();
            if (this.eat(tt.braceL)) {
                this.expect(tt.ellipsis);
                node.argument = this.parseMaybeAssign();
                this.expect(tt.braceR);
                return this.finishNode(node, 'JSXSpreadAttribute');
            }
            node.name = this.jsx_parseNamespacedName();
            node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
            return this.finishNode(node, 'JSXAttribute');
        }
        // Parses JSX opening tag starting after '<'.
        jsx_parseOpeningElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            node.attributes = [];
            let nodeName = this.jsx_parseElementName();
            if (nodeName) node.name = nodeName;
            while(this.type !== tt.slash && this.type !== tok.jsxTagEnd)node.attributes.push(this.jsx_parseAttribute());
            node.selfClosing = this.eat(tt.slash);
            this.expect(tok.jsxTagEnd);
            return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');
        }
        // Parses JSX closing tag starting after '</'.
        jsx_parseClosingElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            let nodeName = this.jsx_parseElementName();
            if (nodeName) node.name = nodeName;
            this.expect(tok.jsxTagEnd);
            return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');
        }
        // Parses entire JSX element, including it's opening tag
        // (starting after '<'), attributes, contents and closing tag.
        jsx_parseElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            let children = [];
            let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
                contents: for(;;){
                    switch(this.type){
                        case tok.jsxTagStart:
                            startPos = this.start;
                            startLoc = this.startLoc;
                            this.next();
                            if (this.eat(tt.slash)) {
                                closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
                                break contents;
                            }
                            children.push(this.jsx_parseElementAt(startPos, startLoc));
                            break;
                        case tok.jsxText:
                            children.push(this.parseExprAtom());
                            break;
                        case tt.braceL:
                            children.push(this.jsx_parseExpressionContainer());
                            break;
                        default:
                            this.unexpected();
                    }
                }
                if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                    this.raise(closingElement.start, 'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');
                }
            }
            let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';
            node['opening' + fragmentOrElement] = openingElement;
            node['closing' + fragmentOrElement] = closingElement;
            node.children = children;
            if (this.type === tt.relational && this.value === "<") {
                this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
            }
            return this.finishNode(node, 'JSX' + fragmentOrElement);
        }
        // Parse JSX text
        jsx_parseText() {
            let node = this.parseLiteral(this.value);
            node.type = "JSXText";
            return node;
        }
        // Parses entire JSX element from current position.
        jsx_parseElement() {
            let startPos = this.start, startLoc = this.startLoc;
            this.next();
            return this.jsx_parseElementAt(startPos, startLoc);
        }
        parseExprAtom(refShortHandDefaultPos) {
            if (this.type === tok.jsxText) return this.jsx_parseText();
            else if (this.type === tok.jsxTagStart) return this.jsx_parseElement();
            else return super.parseExprAtom(refShortHandDefaultPos);
        }
        readToken(code) {
            let context = this.curContext();
            if (context === tc_expr) return this.jsx_readToken();
            if (context === tc_oTag || context === tc_cTag) {
                if (isIdentifierStart(code)) return this.jsx_readWord();
                if (code == 62) {
                    ++this.pos;
                    return this.finishToken(tok.jsxTagEnd);
                }
                if ((code === 34 || code === 39) && context == tc_oTag) return this.jsx_readString(code);
            }
            if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {
                ++this.pos;
                return this.finishToken(tok.jsxTagStart);
            }
            return super.readToken(code);
        }
        updateContext(prevType) {
            if (this.type == tt.braceL) {
                var curContext = this.curContext();
                if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);
                else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);
                else super.updateContext(prevType);
                this.exprAllowed = true;
            } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {
                this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
                this.context.push(tc_cTag); // reconsider as closing tag context
                this.exprAllowed = false;
            } else {
                return super.updateContext(prevType);
            }
        }
    };
}

}.call(this) }),
"[project]/node_modules/.pnpm/micromark-extension-mdxjs@1.0.1/node_modules/micromark-extension-mdxjs/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-extension-mdx-expression').Options} Options
 * @typedef {import('micromark-util-types').Extension} Extension
 */ __turbopack_esm__({
    "mdxjs": ()=>mdxjs
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$acorn$40$8$2e$11$2e$2$2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/acorn@8.11.2/node_modules/acorn/dist/acorn.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$acorn$2d$jsx$40$5$2e$3$2e$2_acorn$40$8$2e$11$2e$2$2f$node_modules$2f$acorn$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.11.2/node_modules/acorn-jsx/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$expression$40$1$2e$0$2e$8$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-expression@1.0.8/node_modules/micromark-extension-mdx-expression/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$md$40$1$2e$0$2e$1$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$md$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-md@1.0.1/node_modules/micromark-extension-mdx-md/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$2d$esm$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdxjs-esm@1.0.5/node_modules/micromark-extension-mdxjs-esm/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$combine$2d$extensions$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-combine-extensions@1.1.0/node_modules/micromark-util-combine-extensions/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
function mdxjs(options) {
    const settings = Object.assign({
        acorn: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$acorn$40$8$2e$11$2e$2$2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["Parser"].extend(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$acorn$2d$jsx$40$5$2e$3$2e$2_acorn$40$8$2e$11$2e$2$2f$node_modules$2f$acorn$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"]()),
        acornOptions: {
            ecmaVersion: 2020,
            sourceType: 'module'
        },
        addResult: true
    }, options);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$combine$2d$extensions$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["combineExtensions"]([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$2d$esm$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsm"](settings),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$expression$40$1$2e$0$2e$8$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpression"](settings),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsx"](settings),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$md$40$1$2e$0$2e$1$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$md$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxMd"]
    ]);
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdxjs@3.0.0/node_modules/micromark-extension-mdxjs/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-extension-mdx-expression').Options} Options
 * @typedef {import('micromark-util-types').Extension} Extension
 */ __turbopack_esm__({
    "mdxjs": ()=>mdxjs
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$acorn$40$8$2e$11$2e$2$2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/acorn@8.11.2/node_modules/acorn/dist/acorn.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$acorn$2d$jsx$40$5$2e$3$2e$2_acorn$40$8$2e$11$2e$2$2f$node_modules$2f$acorn$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.11.2/node_modules/acorn-jsx/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$expression$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-expression@3.0.0/node_modules/micromark-extension-mdx-expression/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$md$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$md$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-md@2.0.0/node_modules/micromark-extension-mdx-md/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$2d$esm$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdxjs-esm@3.0.0/node_modules/micromark-extension-mdxjs-esm/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$combine$2d$extensions$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-combine-extensions@2.0.0/node_modules/micromark-util-combine-extensions/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
function mdxjs(options) {
    const settings = Object.assign({
        acorn: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$acorn$40$8$2e$11$2e$2$2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["Parser"].extend(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$acorn$2d$jsx$40$5$2e$3$2e$2_acorn$40$8$2e$11$2e$2$2f$node_modules$2f$acorn$2d$jsx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"]()),
        acornOptions: {
            ecmaVersion: 2024,
            sourceType: 'module'
        },
        addResult: true
    }, options);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$combine$2d$extensions$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$combine$2d$extensions$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["combineExtensions"]([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$2d$esm$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2d$esm$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsm"](settings),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$expression$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpression"](settings),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsx"](settings),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$md$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$md$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxMd"]()
    ]);
}

})()),
"[project]/node_modules/.pnpm/remark-mdx@2.3.0/node_modules/remark-mdx/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('micromark-extension-mdxjs').Options} MicromarkOptions
 * @typedef {import('mdast-util-mdx').ToMarkdownOptions} ToMarkdownOptions
 * @typedef {import('mdast-util-mdx')} DoNotTouchAsThisIncludesMdxInTree
 */ /**
 * @typedef {MicromarkOptions & ToMarkdownOptions} Options
 *   Configuration.
 */ __turbopack_esm__({
    "default": ()=>remarkMdx
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$40$1$2e$0$2e$1$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdxjs@1.0.1/node_modules/micromark-extension-mdxjs/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx@2.0.1/node_modules/mdast-util-mdx/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function remarkMdx(options) {
    const data = this.data();
    add('micromarkExtensions', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$40$1$2e$0$2e$1$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjs"](options));
    add('fromMarkdownExtensions', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxFromMarkdown"]());
    add('toMarkdownExtensions', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$2$2e$0$2e$1$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxToMarkdown"](options));
    /**
   * @param {string} field
   * @param {unknown} value
   */ function add(field, value) {
        const list = // Other extensions
        /* c8 ignore next 2 */ data[field] ? data[field] : data[field] = [];
        list.push(value);
    }
}

})()),
"[project]/node_modules/.pnpm/remark-mdx@3.0.0/node_modules/remark-mdx/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-mdx').ToMarkdownOptions} ToMarkdownOptions
 * @typedef {import('micromark-extension-mdxjs').Options} MicromarkOptions
 * @typedef {import('unified').Processor} Processor
 */ /**
 * @typedef {MicromarkOptions & ToMarkdownOptions} Options
 *   Configuration.
 */ __turbopack_esm__({
    "default": ()=>remarkMdx
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/mdast-util-mdx@3.0.0/node_modules/mdast-util-mdx/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdxjs@3.0.0/node_modules/micromark-extension-mdxjs/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
/** @type {Readonly<Options>} */ const emptyOptions = {};
function remarkMdx(options) {
    // @ts-expect-error: TS is wrong about `this`.
    // eslint-disable-next-line unicorn/no-this-assignment
    const self = this;
    const settings = options || emptyOptions;
    const data = self.data();
    const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
    const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
    const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
    micromarkExtensions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdxjs$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdxjs$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjs"](settings));
    fromMarkdownExtensions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxFromMarkdown"]());
    toMarkdownExtensions.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$mdast$2d$util$2d$mdx$40$3$2e$0$2e$0$2f$node_modules$2f$mdast$2d$util$2d$mdx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxToMarkdown"](settings));
}

})()),
"[project]/node_modules/.pnpm/remark-mdx@3.0.0/node_modules/remark-mdx/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Augment node types:
/// <reference types="mdast-util-mdx" />
/**
 * @typedef {import('./lib/index.js').Options} Options
 */ __turbopack_esm__({
    "default": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$mdx$40$3$2e$0$2e$0$2f$node_modules$2f$remark$2d$mdx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$remark$2d$mdx$40$3$2e$0$2e$0$2f$node_modules$2f$remark$2d$mdx$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/remark-mdx@3.0.0/node_modules/remark-mdx/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/markdown-extensions@1.1.1/node_modules/markdown-extensions/markdown-extensions.json (json)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname }) => (() => {

__turbopack_export_value__(JSON.parse("[\"md\",\"markdown\",\"mdown\",\"mkdn\",\"mkd\",\"mdwn\",\"mkdown\",\"ron\"]"));
})()),
"[project]/node_modules/.pnpm/markdown-extensions@1.1.1/node_modules/markdown-extensions/index.js [rsc] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
module.exports = __turbopack_require__("[project]/node_modules/.pnpm/markdown-extensions@1.1.1/node_modules/markdown-extensions/markdown-extensions.json (json)");

}.call(this) }),
"[project]/node_modules/.pnpm/markdown-extensions@2.0.0/node_modules/markdown-extensions/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// TODO: Load the JSON file when Node.js supports that.
__turbopack_esm__({
    "default": ()=>__TURBOPACK__default__export__
});
const markdownExtension = [
    'md',
    'markdown',
    'mdown',
    'mkdn',
    'mkd',
    'mdwn',
    'mkdown',
    'ron'
];
const __TURBOPACK__default__export__ = markdownExtension;

})()),
"[project]/node_modules/.pnpm/next-mdx-remote@4.4.1_react-dom@18.2.0_react@18.2.0/node_modules/next-mdx-remote/dist/serialize.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "serialize": ()=>serialize
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$mdx$2d$js$2b$mdx$40$2$2e$3$2e$0$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/@mdx-js+mdx@2.3.0/node_modules/@mdx-js/mdx/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$matter$40$3$2e$0$2e$1$2f$node_modules$2f$vfile$2d$matter$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-matter@3.0.1/node_modules/vfile-matter/index.js [rsc] (ecmascript)");
var __TURBOPACK__external__os__ = __turbopack_external_require__("os", true);
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
var lib$2 = {};
var lib$1 = {};
var jsTokens = {};
// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell
// License: MIT. (See LICENSE.)
Object.defineProperty(jsTokens, "__esModule", {
    value: true
});
// This regex comes from regex.coffee, and is inserted here by generate-index.js
// (run `npm run build`).
jsTokens.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
jsTokens.matchToToken = function(match) {
    var token = {
        type: "invalid",
        value: match[0],
        closed: undefined
    };
    if (match[1]) token.type = "string", token.closed = !!(match[3] || match[4]);
    else if (match[5]) token.type = "comment";
    else if (match[6]) token.type = "comment", token.closed = !!match[7];
    else if (match[8]) token.type = "regex";
    else if (match[9]) token.type = "number";
    else if (match[10]) token.type = "name";
    else if (match[11]) token.type = "punctuator";
    else if (match[12]) token.type = "whitespace";
    return token;
};
var lib = {};
var identifier = {};
Object.defineProperty(identifier, "__esModule", {
    value: true
});
identifier.isIdentifierStart = isIdentifierStart;
identifier.isIdentifierChar = isIdentifierChar;
identifier.isIdentifierName = isIdentifierName;
let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [
    0,
    11,
    2,
    25,
    2,
    18,
    2,
    1,
    2,
    14,
    3,
    13,
    35,
    122,
    70,
    52,
    268,
    28,
    4,
    48,
    48,
    31,
    14,
    29,
    6,
    37,
    11,
    29,
    3,
    35,
    5,
    7,
    2,
    4,
    43,
    157,
    19,
    35,
    5,
    35,
    5,
    39,
    9,
    51,
    13,
    10,
    2,
    14,
    2,
    6,
    2,
    1,
    2,
    10,
    2,
    14,
    2,
    6,
    2,
    1,
    68,
    310,
    10,
    21,
    11,
    7,
    25,
    5,
    2,
    41,
    2,
    8,
    70,
    5,
    3,
    0,
    2,
    43,
    2,
    1,
    4,
    0,
    3,
    22,
    11,
    22,
    10,
    30,
    66,
    18,
    2,
    1,
    11,
    21,
    11,
    25,
    71,
    55,
    7,
    1,
    65,
    0,
    16,
    3,
    2,
    2,
    2,
    28,
    43,
    28,
    4,
    28,
    36,
    7,
    2,
    27,
    28,
    53,
    11,
    21,
    11,
    18,
    14,
    17,
    111,
    72,
    56,
    50,
    14,
    50,
    14,
    35,
    349,
    41,
    7,
    1,
    79,
    28,
    11,
    0,
    9,
    21,
    43,
    17,
    47,
    20,
    28,
    22,
    13,
    52,
    58,
    1,
    3,
    0,
    14,
    44,
    33,
    24,
    27,
    35,
    30,
    0,
    3,
    0,
    9,
    34,
    4,
    0,
    13,
    47,
    15,
    3,
    22,
    0,
    2,
    0,
    36,
    17,
    2,
    24,
    85,
    6,
    2,
    0,
    2,
    3,
    2,
    14,
    2,
    9,
    8,
    46,
    39,
    7,
    3,
    1,
    3,
    21,
    2,
    6,
    2,
    1,
    2,
    4,
    4,
    0,
    19,
    0,
    13,
    4,
    159,
    52,
    19,
    3,
    21,
    2,
    31,
    47,
    21,
    1,
    2,
    0,
    185,
    46,
    42,
    3,
    37,
    47,
    21,
    0,
    60,
    42,
    14,
    0,
    72,
    26,
    38,
    6,
    186,
    43,
    117,
    63,
    32,
    7,
    3,
    0,
    3,
    7,
    2,
    1,
    2,
    23,
    16,
    0,
    2,
    0,
    95,
    7,
    3,
    38,
    17,
    0,
    2,
    0,
    29,
    0,
    11,
    39,
    8,
    0,
    22,
    0,
    12,
    45,
    20,
    0,
    19,
    72,
    264,
    8,
    2,
    36,
    18,
    0,
    50,
    29,
    113,
    6,
    2,
    1,
    2,
    37,
    22,
    0,
    26,
    5,
    2,
    1,
    2,
    31,
    15,
    0,
    328,
    18,
    190,
    0,
    80,
    921,
    103,
    110,
    18,
    195,
    2637,
    96,
    16,
    1070,
    4050,
    582,
    8634,
    568,
    8,
    30,
    18,
    78,
    18,
    29,
    19,
    47,
    17,
    3,
    32,
    20,
    6,
    18,
    689,
    63,
    129,
    74,
    6,
    0,
    67,
    12,
    65,
    1,
    2,
    0,
    29,
    6135,
    9,
    1237,
    43,
    8,
    8936,
    3,
    2,
    6,
    2,
    1,
    2,
    290,
    46,
    2,
    18,
    3,
    9,
    395,
    2309,
    106,
    6,
    12,
    4,
    8,
    8,
    9,
    5991,
    84,
    2,
    70,
    2,
    1,
    3,
    0,
    3,
    1,
    3,
    3,
    2,
    11,
    2,
    0,
    2,
    6,
    2,
    64,
    2,
    3,
    3,
    7,
    2,
    6,
    2,
    27,
    2,
    3,
    2,
    4,
    2,
    0,
    4,
    6,
    2,
    339,
    3,
    24,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    7,
    1845,
    30,
    482,
    44,
    11,
    6,
    17,
    0,
    322,
    29,
    19,
    43,
    1269,
    6,
    2,
    3,
    2,
    1,
    2,
    14,
    2,
    196,
    60,
    67,
    8,
    0,
    1205,
    3,
    2,
    26,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    9,
    2,
    3,
    2,
    0,
    2,
    0,
    7,
    0,
    5,
    0,
    2,
    0,
    2,
    0,
    2,
    2,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    1,
    2,
    0,
    3,
    3,
    2,
    6,
    2,
    3,
    2,
    3,
    2,
    0,
    2,
    9,
    2,
    16,
    6,
    2,
    2,
    4,
    2,
    16,
    4421,
    42719,
    33,
    4152,
    8,
    221,
    3,
    5761,
    15,
    7472,
    3104,
    541,
    1507,
    4938
];
const astralIdentifierCodes = [
    509,
    0,
    227,
    0,
    150,
    4,
    294,
    9,
    1368,
    2,
    2,
    1,
    6,
    3,
    41,
    2,
    5,
    0,
    166,
    1,
    574,
    3,
    9,
    9,
    370,
    1,
    154,
    10,
    50,
    3,
    123,
    2,
    54,
    14,
    32,
    10,
    3,
    1,
    11,
    3,
    46,
    10,
    8,
    0,
    46,
    9,
    7,
    2,
    37,
    13,
    2,
    9,
    6,
    1,
    45,
    0,
    13,
    2,
    49,
    13,
    9,
    3,
    2,
    11,
    83,
    11,
    7,
    0,
    161,
    11,
    6,
    9,
    7,
    3,
    56,
    1,
    2,
    6,
    3,
    1,
    3,
    2,
    10,
    0,
    11,
    1,
    3,
    6,
    4,
    4,
    193,
    17,
    10,
    9,
    5,
    0,
    82,
    19,
    13,
    9,
    214,
    6,
    3,
    8,
    28,
    1,
    83,
    16,
    16,
    9,
    82,
    12,
    9,
    9,
    84,
    14,
    5,
    9,
    243,
    14,
    166,
    9,
    71,
    5,
    2,
    1,
    3,
    3,
    2,
    0,
    2,
    1,
    13,
    9,
    120,
    6,
    3,
    6,
    4,
    0,
    29,
    9,
    41,
    6,
    2,
    3,
    9,
    0,
    10,
    10,
    47,
    15,
    406,
    7,
    2,
    7,
    17,
    9,
    57,
    21,
    2,
    13,
    123,
    5,
    4,
    0,
    2,
    1,
    2,
    6,
    2,
    0,
    9,
    9,
    49,
    4,
    2,
    1,
    2,
    4,
    9,
    9,
    330,
    3,
    19306,
    9,
    87,
    9,
    39,
    4,
    60,
    6,
    26,
    9,
    1014,
    0,
    2,
    54,
    8,
    3,
    82,
    0,
    12,
    1,
    19628,
    1,
    4706,
    45,
    3,
    22,
    543,
    4,
    4,
    5,
    9,
    7,
    3,
    6,
    31,
    3,
    149,
    2,
    1418,
    49,
    513,
    54,
    5,
    49,
    9,
    0,
    15,
    0,
    23,
    4,
    2,
    14,
    1361,
    6,
    2,
    16,
    3,
    6,
    2,
    1,
    2,
    4,
    262,
    6,
    10,
    9,
    357,
    0,
    62,
    13,
    1495,
    6,
    110,
    6,
    6,
    9,
    4759,
    9,
    787719,
    239
];
function isInAstralSet(code, set) {
    let pos = 0x10000;
    for(let i = 0, length = set.length; i < length; i += 2){
        pos += set[i];
        if (pos > code) return false;
        pos += set[i + 1];
        if (pos >= code) return true;
    }
    return false;
}
function isIdentifierStart(code) {
    if (code < 65) return code === 36;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 0xffff) {
        return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes);
}
function isIdentifierChar(code) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 0xffff) {
        return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
function isIdentifierName(name) {
    let isFirst = true;
    for(let i = 0; i < name.length; i++){
        let cp = name.charCodeAt(i);
        if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {
            const trail = name.charCodeAt(++i);
            if ((trail & 0xfc00) === 0xdc00) {
                cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
            }
        }
        if (isFirst) {
            isFirst = false;
            if (!isIdentifierStart(cp)) {
                return false;
            }
        } else if (!isIdentifierChar(cp)) {
            return false;
        }
    }
    return !isFirst;
}
var keyword = {};
Object.defineProperty(keyword, "__esModule", {
    value: true
});
keyword.isReservedWord = isReservedWord;
keyword.isStrictReservedWord = isStrictReservedWord;
keyword.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
keyword.isStrictBindReservedWord = isStrictBindReservedWord;
keyword.isKeyword = isKeyword;
const reservedWords = {
    keyword: [
        "break",
        "case",
        "catch",
        "continue",
        "debugger",
        "default",
        "do",
        "else",
        "finally",
        "for",
        "function",
        "if",
        "return",
        "switch",
        "throw",
        "try",
        "var",
        "const",
        "while",
        "with",
        "new",
        "this",
        "super",
        "class",
        "extends",
        "export",
        "import",
        "null",
        "true",
        "false",
        "in",
        "instanceof",
        "typeof",
        "void",
        "delete"
    ],
    strict: [
        "implements",
        "interface",
        "let",
        "package",
        "private",
        "protected",
        "public",
        "static",
        "yield"
    ],
    strictBind: [
        "eval",
        "arguments"
    ]
};
const keywords = new Set(reservedWords.keyword);
const reservedWordsStrictSet = new Set(reservedWords.strict);
const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
    return keywords.has(word);
}
(function(exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    Object.defineProperty(exports, "isIdentifierName", {
        enumerable: true,
        get: function() {
            return _identifier.isIdentifierName;
        }
    });
    Object.defineProperty(exports, "isIdentifierChar", {
        enumerable: true,
        get: function() {
            return _identifier.isIdentifierChar;
        }
    });
    Object.defineProperty(exports, "isIdentifierStart", {
        enumerable: true,
        get: function() {
            return _identifier.isIdentifierStart;
        }
    });
    Object.defineProperty(exports, "isReservedWord", {
        enumerable: true,
        get: function() {
            return _keyword.isReservedWord;
        }
    });
    Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
        enumerable: true,
        get: function() {
            return _keyword.isStrictBindOnlyReservedWord;
        }
    });
    Object.defineProperty(exports, "isStrictBindReservedWord", {
        enumerable: true,
        get: function() {
            return _keyword.isStrictBindReservedWord;
        }
    });
    Object.defineProperty(exports, "isStrictReservedWord", {
        enumerable: true,
        get: function() {
            return _keyword.isStrictReservedWord;
        }
    });
    Object.defineProperty(exports, "isKeyword", {
        enumerable: true,
        get: function() {
            return _keyword.isKeyword;
        }
    });
    var _identifier = identifier;
    var _keyword = keyword;
})(lib);
var chalk = {
    exports: {}
};
var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
var escapeStringRegexp = function(str) {
    if (typeof str !== 'string') {
        throw new TypeError('Expected a string');
    }
    return str.replace(matchOperatorsRe, '\\$&');
};
var ansiStyles = {
    exports: {}
};
var conversions$2 = {
    exports: {}
};
var colorName = {
    "aliceblue": [
        240,
        248,
        255
    ],
    "antiquewhite": [
        250,
        235,
        215
    ],
    "aqua": [
        0,
        255,
        255
    ],
    "aquamarine": [
        127,
        255,
        212
    ],
    "azure": [
        240,
        255,
        255
    ],
    "beige": [
        245,
        245,
        220
    ],
    "bisque": [
        255,
        228,
        196
    ],
    "black": [
        0,
        0,
        0
    ],
    "blanchedalmond": [
        255,
        235,
        205
    ],
    "blue": [
        0,
        0,
        255
    ],
    "blueviolet": [
        138,
        43,
        226
    ],
    "brown": [
        165,
        42,
        42
    ],
    "burlywood": [
        222,
        184,
        135
    ],
    "cadetblue": [
        95,
        158,
        160
    ],
    "chartreuse": [
        127,
        255,
        0
    ],
    "chocolate": [
        210,
        105,
        30
    ],
    "coral": [
        255,
        127,
        80
    ],
    "cornflowerblue": [
        100,
        149,
        237
    ],
    "cornsilk": [
        255,
        248,
        220
    ],
    "crimson": [
        220,
        20,
        60
    ],
    "cyan": [
        0,
        255,
        255
    ],
    "darkblue": [
        0,
        0,
        139
    ],
    "darkcyan": [
        0,
        139,
        139
    ],
    "darkgoldenrod": [
        184,
        134,
        11
    ],
    "darkgray": [
        169,
        169,
        169
    ],
    "darkgreen": [
        0,
        100,
        0
    ],
    "darkgrey": [
        169,
        169,
        169
    ],
    "darkkhaki": [
        189,
        183,
        107
    ],
    "darkmagenta": [
        139,
        0,
        139
    ],
    "darkolivegreen": [
        85,
        107,
        47
    ],
    "darkorange": [
        255,
        140,
        0
    ],
    "darkorchid": [
        153,
        50,
        204
    ],
    "darkred": [
        139,
        0,
        0
    ],
    "darksalmon": [
        233,
        150,
        122
    ],
    "darkseagreen": [
        143,
        188,
        143
    ],
    "darkslateblue": [
        72,
        61,
        139
    ],
    "darkslategray": [
        47,
        79,
        79
    ],
    "darkslategrey": [
        47,
        79,
        79
    ],
    "darkturquoise": [
        0,
        206,
        209
    ],
    "darkviolet": [
        148,
        0,
        211
    ],
    "deeppink": [
        255,
        20,
        147
    ],
    "deepskyblue": [
        0,
        191,
        255
    ],
    "dimgray": [
        105,
        105,
        105
    ],
    "dimgrey": [
        105,
        105,
        105
    ],
    "dodgerblue": [
        30,
        144,
        255
    ],
    "firebrick": [
        178,
        34,
        34
    ],
    "floralwhite": [
        255,
        250,
        240
    ],
    "forestgreen": [
        34,
        139,
        34
    ],
    "fuchsia": [
        255,
        0,
        255
    ],
    "gainsboro": [
        220,
        220,
        220
    ],
    "ghostwhite": [
        248,
        248,
        255
    ],
    "gold": [
        255,
        215,
        0
    ],
    "goldenrod": [
        218,
        165,
        32
    ],
    "gray": [
        128,
        128,
        128
    ],
    "green": [
        0,
        128,
        0
    ],
    "greenyellow": [
        173,
        255,
        47
    ],
    "grey": [
        128,
        128,
        128
    ],
    "honeydew": [
        240,
        255,
        240
    ],
    "hotpink": [
        255,
        105,
        180
    ],
    "indianred": [
        205,
        92,
        92
    ],
    "indigo": [
        75,
        0,
        130
    ],
    "ivory": [
        255,
        255,
        240
    ],
    "khaki": [
        240,
        230,
        140
    ],
    "lavender": [
        230,
        230,
        250
    ],
    "lavenderblush": [
        255,
        240,
        245
    ],
    "lawngreen": [
        124,
        252,
        0
    ],
    "lemonchiffon": [
        255,
        250,
        205
    ],
    "lightblue": [
        173,
        216,
        230
    ],
    "lightcoral": [
        240,
        128,
        128
    ],
    "lightcyan": [
        224,
        255,
        255
    ],
    "lightgoldenrodyellow": [
        250,
        250,
        210
    ],
    "lightgray": [
        211,
        211,
        211
    ],
    "lightgreen": [
        144,
        238,
        144
    ],
    "lightgrey": [
        211,
        211,
        211
    ],
    "lightpink": [
        255,
        182,
        193
    ],
    "lightsalmon": [
        255,
        160,
        122
    ],
    "lightseagreen": [
        32,
        178,
        170
    ],
    "lightskyblue": [
        135,
        206,
        250
    ],
    "lightslategray": [
        119,
        136,
        153
    ],
    "lightslategrey": [
        119,
        136,
        153
    ],
    "lightsteelblue": [
        176,
        196,
        222
    ],
    "lightyellow": [
        255,
        255,
        224
    ],
    "lime": [
        0,
        255,
        0
    ],
    "limegreen": [
        50,
        205,
        50
    ],
    "linen": [
        250,
        240,
        230
    ],
    "magenta": [
        255,
        0,
        255
    ],
    "maroon": [
        128,
        0,
        0
    ],
    "mediumaquamarine": [
        102,
        205,
        170
    ],
    "mediumblue": [
        0,
        0,
        205
    ],
    "mediumorchid": [
        186,
        85,
        211
    ],
    "mediumpurple": [
        147,
        112,
        219
    ],
    "mediumseagreen": [
        60,
        179,
        113
    ],
    "mediumslateblue": [
        123,
        104,
        238
    ],
    "mediumspringgreen": [
        0,
        250,
        154
    ],
    "mediumturquoise": [
        72,
        209,
        204
    ],
    "mediumvioletred": [
        199,
        21,
        133
    ],
    "midnightblue": [
        25,
        25,
        112
    ],
    "mintcream": [
        245,
        255,
        250
    ],
    "mistyrose": [
        255,
        228,
        225
    ],
    "moccasin": [
        255,
        228,
        181
    ],
    "navajowhite": [
        255,
        222,
        173
    ],
    "navy": [
        0,
        0,
        128
    ],
    "oldlace": [
        253,
        245,
        230
    ],
    "olive": [
        128,
        128,
        0
    ],
    "olivedrab": [
        107,
        142,
        35
    ],
    "orange": [
        255,
        165,
        0
    ],
    "orangered": [
        255,
        69,
        0
    ],
    "orchid": [
        218,
        112,
        214
    ],
    "palegoldenrod": [
        238,
        232,
        170
    ],
    "palegreen": [
        152,
        251,
        152
    ],
    "paleturquoise": [
        175,
        238,
        238
    ],
    "palevioletred": [
        219,
        112,
        147
    ],
    "papayawhip": [
        255,
        239,
        213
    ],
    "peachpuff": [
        255,
        218,
        185
    ],
    "peru": [
        205,
        133,
        63
    ],
    "pink": [
        255,
        192,
        203
    ],
    "plum": [
        221,
        160,
        221
    ],
    "powderblue": [
        176,
        224,
        230
    ],
    "purple": [
        128,
        0,
        128
    ],
    "rebeccapurple": [
        102,
        51,
        153
    ],
    "red": [
        255,
        0,
        0
    ],
    "rosybrown": [
        188,
        143,
        143
    ],
    "royalblue": [
        65,
        105,
        225
    ],
    "saddlebrown": [
        139,
        69,
        19
    ],
    "salmon": [
        250,
        128,
        114
    ],
    "sandybrown": [
        244,
        164,
        96
    ],
    "seagreen": [
        46,
        139,
        87
    ],
    "seashell": [
        255,
        245,
        238
    ],
    "sienna": [
        160,
        82,
        45
    ],
    "silver": [
        192,
        192,
        192
    ],
    "skyblue": [
        135,
        206,
        235
    ],
    "slateblue": [
        106,
        90,
        205
    ],
    "slategray": [
        112,
        128,
        144
    ],
    "slategrey": [
        112,
        128,
        144
    ],
    "snow": [
        255,
        250,
        250
    ],
    "springgreen": [
        0,
        255,
        127
    ],
    "steelblue": [
        70,
        130,
        180
    ],
    "tan": [
        210,
        180,
        140
    ],
    "teal": [
        0,
        128,
        128
    ],
    "thistle": [
        216,
        191,
        216
    ],
    "tomato": [
        255,
        99,
        71
    ],
    "turquoise": [
        64,
        224,
        208
    ],
    "violet": [
        238,
        130,
        238
    ],
    "wheat": [
        245,
        222,
        179
    ],
    "white": [
        255,
        255,
        255
    ],
    "whitesmoke": [
        245,
        245,
        245
    ],
    "yellow": [
        255,
        255,
        0
    ],
    "yellowgreen": [
        154,
        205,
        50
    ]
};
/* MIT license */ var cssKeywords = colorName;
// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)
var reverseKeywords = {};
for(var key in cssKeywords){
    if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
    }
}
var convert$2 = conversions$2.exports = {
    rgb: {
        channels: 3,
        labels: 'rgb'
    },
    hsl: {
        channels: 3,
        labels: 'hsl'
    },
    hsv: {
        channels: 3,
        labels: 'hsv'
    },
    hwb: {
        channels: 3,
        labels: 'hwb'
    },
    cmyk: {
        channels: 4,
        labels: 'cmyk'
    },
    xyz: {
        channels: 3,
        labels: 'xyz'
    },
    lab: {
        channels: 3,
        labels: 'lab'
    },
    lch: {
        channels: 3,
        labels: 'lch'
    },
    hex: {
        channels: 1,
        labels: [
            'hex'
        ]
    },
    keyword: {
        channels: 1,
        labels: [
            'keyword'
        ]
    },
    ansi16: {
        channels: 1,
        labels: [
            'ansi16'
        ]
    },
    ansi256: {
        channels: 1,
        labels: [
            'ansi256'
        ]
    },
    hcg: {
        channels: 3,
        labels: [
            'h',
            'c',
            'g'
        ]
    },
    apple: {
        channels: 3,
        labels: [
            'r16',
            'g16',
            'b16'
        ]
    },
    gray: {
        channels: 1,
        labels: [
            'gray'
        ]
    }
};
// hide .channels and .labels properties
for(var model in convert$2){
    if (convert$2.hasOwnProperty(model)) {
        if (!('channels' in convert$2[model])) {
            throw new Error('missing channels property: ' + model);
        }
        if (!('labels' in convert$2[model])) {
            throw new Error('missing channel labels property: ' + model);
        }
        if (convert$2[model].labels.length !== convert$2[model].channels) {
            throw new Error('channel and label counts mismatch: ' + model);
        }
        var channels = convert$2[model].channels;
        var labels = convert$2[model].labels;
        delete convert$2[model].channels;
        delete convert$2[model].labels;
        Object.defineProperty(convert$2[model], 'channels', {
            value: channels
        });
        Object.defineProperty(convert$2[model], 'labels', {
            value: labels
        });
    }
}
convert$2.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
        h = 0;
    } else if (r === max) {
        h = (g - b) / delta;
    } else if (g === max) {
        h = 2 + (b - r) / delta;
    } else if (b === max) {
        h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
        h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
        s = 0;
    } else if (l <= 0.5) {
        s = delta / (max + min);
    } else {
        s = delta / (2 - max - min);
    }
    return [
        h,
        s * 100,
        l * 100
    ];
};
convert$2.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
        h = s = 0;
    } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
            h = bdif - gdif;
        } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
            h += 1;
        } else if (h > 1) {
            h -= 1;
        }
    }
    return [
        h * 360,
        s * 100,
        v * 100
    ];
};
convert$2.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert$2.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [
        h,
        w * 100,
        b * 100
    ];
};
convert$2.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [
        c * 100,
        m * 100,
        y * 100,
        k * 100
    ];
};
/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */ function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}
convert$2.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
        return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for(var keyword in cssKeywords){
        if (cssKeywords.hasOwnProperty(keyword)) {
            var value = cssKeywords[keyword];
            // Compute comparative distance
            var distance = comparativeDistance(rgb, value);
            // Check if its less, if so set as closest
            if (distance < currentClosestDistance) {
                currentClosestDistance = distance;
                currentClosestKeyword = keyword;
            }
        }
    }
    return currentClosestKeyword;
};
convert$2.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
};
convert$2.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    // assume sRGB
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [
        x * 100,
        y * 100,
        z * 100
    ];
};
convert$2.rgb.lab = function(rgb) {
    var xyz = convert$2.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [
        l,
        a,
        b
    ];
};
convert$2.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
        val = l * 255;
        return [
            val,
            val,
            val
        ];
    }
    if (l < 0.5) {
        t2 = l * (1 + s);
    } else {
        t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [
        0,
        0,
        0
    ];
    for(var i = 0; i < 3; i++){
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
            t3++;
        }
        if (t3 > 1) {
            t3--;
        }
        if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
            val = t2;
        } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
            val = t1;
        }
        rgb[i] = val * 255;
    }
    return rgb;
};
convert$2.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [
        h,
        sv * 100,
        v * 100
    ];
};
convert$2.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch(hi){
        case 0:
            return [
                v,
                t,
                p
            ];
        case 1:
            return [
                q,
                v,
                p
            ];
        case 2:
            return [
                p,
                v,
                t
            ];
        case 3:
            return [
                p,
                q,
                v
            ];
        case 4:
            return [
                t,
                p,
                v
            ];
        case 5:
            return [
                v,
                p,
                q
            ];
    }
};
convert$2.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [
        h,
        sl * 100,
        l * 100
    ];
};
// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert$2.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    // wh + bl cant be > 1
    if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 0x01) !== 0) {
        f = 1 - f;
    }
    n = wh + f * (v - wh); // linear interpolation
    var r;
    var g;
    var b;
    switch(i){
        default:
        case 6:
        case 0:
            r = v;
            g = n;
            b = wh;
            break;
        case 1:
            r = n;
            g = v;
            b = wh;
            break;
        case 2:
            r = wh;
            g = v;
            b = n;
            break;
        case 3:
            r = wh;
            g = n;
            b = v;
            break;
        case 4:
            r = n;
            g = wh;
            b = v;
            break;
        case 5:
            r = v;
            g = wh;
            b = n;
            break;
    }
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert$2.cmyk.rgb = function(cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert$2.xyz.rgb = function(xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.2040 + z * 1.0570;
    // assume sRGB
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert$2.xyz.lab = function(xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [
        l,
        a,
        b
    ];
};
convert$2.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [
        x,
        y,
        z
    ];
};
convert$2.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
        h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [
        l,
        c,
        h
    ];
};
convert$2.lch.lab = function(lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [
        l,
        a,
        b
    ];
};
convert$2.rgb.ansi16 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert$2.rgb.hsv(args)[2]; // hsv -> ansi16 optimization
    value = Math.round(value / 50);
    if (value === 0) {
        return 30;
    }
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
        ansi += 60;
    }
    return ansi;
};
convert$2.hsv.ansi16 = function(args) {
    // optimization here; we already know the value and don't need to get
    // it converted for us.
    return convert$2.rgb.ansi16(convert$2.hsv.rgb(args), args[2]);
};
convert$2.rgb.ansi256 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    // we use the extended greyscale palette here, with the exception of
    // black and white. normal palette only has 4 greyscale shades.
    if (r === g && g === b) {
        if (r < 8) {
            return 16;
        }
        if (r > 248) {
            return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
};
convert$2.ansi16.rgb = function(args) {
    var color = args % 10;
    // handle greyscale
    if (color === 0 || color === 7) {
        if (args > 50) {
            color += 3.5;
        }
        color = color / 10.5 * 255;
        return [
            color,
            color,
            color
        ];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [
        r,
        g,
        b
    ];
};
convert$2.ansi256.rgb = function(args) {
    // handle greyscale
    if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [
            c,
            c,
            c
        ];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [
        r,
        g,
        b
    ];
};
convert$2.rgb.hex = function(args) {
    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
};
convert$2.hex.rgb = function(args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
        return [
            0,
            0,
            0
        ];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
        colorString = colorString.split('').map(function(char) {
            return char + char;
        }).join('');
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 0xFF;
    var g = integer >> 8 & 0xFF;
    var b = integer & 0xFF;
    return [
        r,
        g,
        b
    ];
};
convert$2.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
        grayscale = min / (1 - chroma);
    } else {
        grayscale = 0;
    }
    if (chroma <= 0) {
        hue = 0;
    } else if (max === r) {
        hue = (g - b) / chroma % 6;
    } else if (max === g) {
        hue = 2 + (b - r) / chroma;
    } else {
        hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [
        hue * 360,
        chroma * 100,
        grayscale * 100
    ];
};
convert$2.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) {
        c = 2.0 * s * l;
    } else {
        c = 2.0 * s * (1.0 - l);
    }
    if (c < 1.0) {
        f = (l - 0.5 * c) / (1.0 - c);
    }
    return [
        hsl[0],
        c * 100,
        f * 100
    ];
};
convert$2.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1.0) {
        f = (v - c) / (1 - c);
    }
    return [
        hsv[0],
        c * 100,
        f * 100
    ];
};
convert$2.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0.0) {
        return [
            g * 255,
            g * 255,
            g * 255
        ];
    }
    var pure = [
        0,
        0,
        0
    ];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch(Math.floor(hi)){
        case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
        case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
        case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
        case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
        case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
        default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
    }
    mg = (1.0 - c) * g;
    return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
    ];
};
convert$2.hcg.hsv = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    var f = 0;
    if (v > 0.0) {
        f = c / v;
    }
    return [
        hcg[0],
        f * 100,
        v * 100
    ];
};
convert$2.hcg.hsl = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1.0 - c) + 0.5 * c;
    var s = 0;
    if (l > 0.0 && l < 0.5) {
        s = c / (2 * l);
    } else if (l >= 0.5 && l < 1.0) {
        s = c / (2 * (1 - l));
    }
    return [
        hcg[0],
        s * 100,
        l * 100
    ];
};
convert$2.hcg.hwb = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    return [
        hcg[0],
        (v - c) * 100,
        (1 - v) * 100
    ];
};
convert$2.hwb.hcg = function(hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;
    if (c < 1) {
        g = (v - c) / (1 - c);
    }
    return [
        hwb[0],
        c * 100,
        g * 100
    ];
};
convert$2.apple.rgb = function(apple) {
    return [
        apple[0] / 65535 * 255,
        apple[1] / 65535 * 255,
        apple[2] / 65535 * 255
    ];
};
convert$2.rgb.apple = function(rgb) {
    return [
        rgb[0] / 255 * 65535,
        rgb[1] / 255 * 65535,
        rgb[2] / 255 * 65535
    ];
};
convert$2.gray.rgb = function(args) {
    return [
        args[0] / 100 * 255,
        args[0] / 100 * 255,
        args[0] / 100 * 255
    ];
};
convert$2.gray.hsl = convert$2.gray.hsv = function(args) {
    return [
        0,
        0,
        args[0]
    ];
};
convert$2.gray.hwb = function(gray) {
    return [
        0,
        100,
        gray[0]
    ];
};
convert$2.gray.cmyk = function(gray) {
    return [
        0,
        0,
        0,
        gray[0]
    ];
};
convert$2.gray.lab = function(gray) {
    return [
        gray[0],
        0,
        0
    ];
};
convert$2.gray.hex = function(gray) {
    var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
};
convert$2.rgb.gray = function(rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [
        val / 255 * 100
    ];
};
var conversions$1 = conversions$2.exports;
/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/ function buildGraph() {
    var graph = {};
    // https://jsperf.com/object-keys-vs-for-in-with-closure/3
    var models = Object.keys(conversions$1);
    for(var len = models.length, i = 0; i < len; i++){
        graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
        };
    }
    return graph;
}
// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [
        fromModel
    ]; // unshift -> queue -> pop
    graph[fromModel].distance = 0;
    while(queue.length){
        var current = queue.pop();
        var adjacents = Object.keys(conversions$1[current]);
        for(var len = adjacents.length, i = 0; i < len; i++){
            var adjacent = adjacents[i];
            var node = graph[adjacent];
            if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
            }
        }
    }
    return graph;
}
function link(from, to) {
    return function(args) {
        return to(from(args));
    };
}
function wrapConversion(toModel, graph) {
    var path = [
        graph[toModel].parent,
        toModel
    ];
    var fn = conversions$1[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while(graph[cur].parent){
        path.unshift(graph[cur].parent);
        fn = link(conversions$1[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
    }
    fn.conversion = path;
    return fn;
}
var route$1 = function(fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);
    for(var len = models.length, i = 0; i < len; i++){
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
            continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
};
var conversions = conversions$2.exports;
var route = route$1;
var convert$1 = {};
var models = Object.keys(conversions);
function wrapRaw(fn) {
    var wrappedFn = function(args) {
        if (args === undefined || args === null) {
            return args;
        }
        if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
    };
    // preserve .conversion property if there is one
    if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
}
function wrapRounded(fn) {
    var wrappedFn = function(args) {
        if (args === undefined || args === null) {
            return args;
        }
        if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        // we're assuming the result is an array here.
        // see notice in conversions.js; don't use box types
        // in conversion functions.
        if (typeof result === 'object') {
            for(var len = result.length, i = 0; i < len; i++){
                result[i] = Math.round(result[i]);
            }
        }
        return result;
    };
    // preserve .conversion property if there is one
    if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
}
models.forEach(function(fromModel) {
    convert$1[fromModel] = {};
    Object.defineProperty(convert$1[fromModel], 'channels', {
        value: conversions[fromModel].channels
    });
    Object.defineProperty(convert$1[fromModel], 'labels', {
        value: conversions[fromModel].labels
    });
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert$1[fromModel][toModel] = wrapRounded(fn);
        convert$1[fromModel][toModel].raw = wrapRaw(fn);
    });
});
var colorConvert = convert$1;
(function(module) {
    const colorConvert$1 = colorConvert;
    const wrapAnsi16 = (fn, offset)=>function() {
            const code = fn.apply(colorConvert$1, arguments);
            return `\u001B[${code + offset}m`;
        };
    const wrapAnsi256 = (fn, offset)=>function() {
            const code = fn.apply(colorConvert$1, arguments);
            return `\u001B[${38 + offset};5;${code}m`;
        };
    const wrapAnsi16m = (fn, offset)=>function() {
            const rgb = fn.apply(colorConvert$1, arguments);
            return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
        };
    function assembleStyles() {
        const codes = new Map();
        const styles = {
            modifier: {
                reset: [
                    0,
                    0
                ],
                // 21 isn't widely supported and 22 does the same thing
                bold: [
                    1,
                    22
                ],
                dim: [
                    2,
                    22
                ],
                italic: [
                    3,
                    23
                ],
                underline: [
                    4,
                    24
                ],
                inverse: [
                    7,
                    27
                ],
                hidden: [
                    8,
                    28
                ],
                strikethrough: [
                    9,
                    29
                ]
            },
            color: {
                black: [
                    30,
                    39
                ],
                red: [
                    31,
                    39
                ],
                green: [
                    32,
                    39
                ],
                yellow: [
                    33,
                    39
                ],
                blue: [
                    34,
                    39
                ],
                magenta: [
                    35,
                    39
                ],
                cyan: [
                    36,
                    39
                ],
                white: [
                    37,
                    39
                ],
                gray: [
                    90,
                    39
                ],
                // Bright color
                redBright: [
                    91,
                    39
                ],
                greenBright: [
                    92,
                    39
                ],
                yellowBright: [
                    93,
                    39
                ],
                blueBright: [
                    94,
                    39
                ],
                magentaBright: [
                    95,
                    39
                ],
                cyanBright: [
                    96,
                    39
                ],
                whiteBright: [
                    97,
                    39
                ]
            },
            bgColor: {
                bgBlack: [
                    40,
                    49
                ],
                bgRed: [
                    41,
                    49
                ],
                bgGreen: [
                    42,
                    49
                ],
                bgYellow: [
                    43,
                    49
                ],
                bgBlue: [
                    44,
                    49
                ],
                bgMagenta: [
                    45,
                    49
                ],
                bgCyan: [
                    46,
                    49
                ],
                bgWhite: [
                    47,
                    49
                ],
                // Bright color
                bgBlackBright: [
                    100,
                    49
                ],
                bgRedBright: [
                    101,
                    49
                ],
                bgGreenBright: [
                    102,
                    49
                ],
                bgYellowBright: [
                    103,
                    49
                ],
                bgBlueBright: [
                    104,
                    49
                ],
                bgMagentaBright: [
                    105,
                    49
                ],
                bgCyanBright: [
                    106,
                    49
                ],
                bgWhiteBright: [
                    107,
                    49
                ]
            }
        };
        // Fix humans
        styles.color.grey = styles.color.gray;
        for (const groupName of Object.keys(styles)){
            const group = styles[groupName];
            for (const styleName of Object.keys(group)){
                const style = group[styleName];
                styles[styleName] = {
                    open: `\u001B[${style[0]}m`,
                    close: `\u001B[${style[1]}m`
                };
                group[styleName] = styles[styleName];
                codes.set(style[0], style[1]);
            }
            Object.defineProperty(styles, groupName, {
                value: group,
                enumerable: false
            });
            Object.defineProperty(styles, 'codes', {
                value: codes,
                enumerable: false
            });
        }
        const ansi2ansi = (n)=>n;
        const rgb2rgb = (r, g, b)=>[
                r,
                g,
                b
            ];
        styles.color.close = '\u001B[39m';
        styles.bgColor.close = '\u001B[49m';
        styles.color.ansi = {
            ansi: wrapAnsi16(ansi2ansi, 0)
        };
        styles.color.ansi256 = {
            ansi256: wrapAnsi256(ansi2ansi, 0)
        };
        styles.color.ansi16m = {
            rgb: wrapAnsi16m(rgb2rgb, 0)
        };
        styles.bgColor.ansi = {
            ansi: wrapAnsi16(ansi2ansi, 10)
        };
        styles.bgColor.ansi256 = {
            ansi256: wrapAnsi256(ansi2ansi, 10)
        };
        styles.bgColor.ansi16m = {
            rgb: wrapAnsi16m(rgb2rgb, 10)
        };
        for (let key of Object.keys(colorConvert$1)){
            if (typeof colorConvert$1[key] !== 'object') {
                continue;
            }
            const suite = colorConvert$1[key];
            if (key === 'ansi16') {
                key = 'ansi';
            }
            if ('ansi16' in suite) {
                styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
                styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
            }
            if ('ansi256' in suite) {
                styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
                styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
            }
            if ('rgb' in suite) {
                styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
                styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
            }
        }
        return styles;
    }
    // Make the export immutable
    Object.defineProperty(module, 'exports', {
        enumerable: true,
        get: assembleStyles
    });
})(ansiStyles);
var hasFlag$1 = (flag, argv)=>{
    argv = argv || process.argv;
    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
    const pos = argv.indexOf(prefix + flag);
    const terminatorPos = argv.indexOf('--');
    return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};
const os = __TURBOPACK__external__os__["default"];
const hasFlag = hasFlag$1;
const env = process.env;
let forceColor;
if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
    forceColor = false;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
    forceColor = true;
}
if ('FORCE_COLOR' in env) {
    forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
}
function translateLevel(level) {
    if (level === 0) {
        return false;
    }
    return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
    };
}
function supportsColor(stream) {
    if (forceColor === false) {
        return 0;
    }
    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
        return 3;
    }
    if (hasFlag('color=256')) {
        return 2;
    }
    if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
    }
    const min = forceColor ? 1 : 0;
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    if ('CI' in env) {
        if ([
            'TRAVIS',
            'CIRCLECI',
            'APPVEYOR',
            'GITLAB_CI'
        ].some((sign)=>sign in env) || env.CI_NAME === 'codeship') {
            return 1;
        }
        return min;
    }
    if ('TEAMCITY_VERSION' in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === 'truecolor') {
        return 3;
    }
    if ('TERM_PROGRAM' in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
        switch(env.TERM_PROGRAM){
            case 'iTerm.app':
                return version >= 3 ? 3 : 2;
            case 'Apple_Terminal':
                return 2;
        }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
    }
    if ('COLORTERM' in env) {
        return 1;
    }
    if (env.TERM === 'dumb') {
        return min;
    }
    return min;
}
function getSupportLevel(stream) {
    const level = supportsColor(stream);
    return translateLevel(level);
}
var supportsColor_1 = {
    supportsColor: getSupportLevel,
    stdout: getSupportLevel(process.stdout),
    stderr: getSupportLevel(process.stderr)
};
const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
const ESCAPES = new Map([
    [
        'n',
        '\n'
    ],
    [
        'r',
        '\r'
    ],
    [
        't',
        '\t'
    ],
    [
        'b',
        '\b'
    ],
    [
        'f',
        '\f'
    ],
    [
        'v',
        '\v'
    ],
    [
        '0',
        '\0'
    ],
    [
        '\\',
        '\\'
    ],
    [
        'e',
        '\u001B'
    ],
    [
        'a',
        '\u0007'
    ]
]);
function unescape(c) {
    if (c[0] === 'u' && c.length === 5 || c[0] === 'x' && c.length === 3) {
        return String.fromCharCode(parseInt(c.slice(1), 16));
    }
    return ESCAPES.get(c) || c;
}
function parseArguments(name, args) {
    const results = [];
    const chunks = args.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks){
        if (!isNaN(chunk)) {
            results.push(Number(chunk));
        } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr)=>escape ? unescape(escape) : chr));
        } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
        }
    }
    return results;
}
function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while((matches = STYLE_REGEX.exec(style)) !== null){
        const name = matches[1];
        if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([
                name
            ].concat(args));
        } else {
            results.push([
                name
            ]);
        }
    }
    return results;
}
function buildStyle(chalk, styles) {
    const enabled = {};
    for (const layer of styles){
        for (const style of layer.styles){
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
        }
    }
    let current = chalk;
    for (const styleName of Object.keys(enabled)){
        if (Array.isArray(enabled[styleName])) {
            if (!(styleName in current)) {
                throw new Error(`Unknown Chalk style: ${styleName}`);
            }
            if (enabled[styleName].length > 0) {
                current = current[styleName].apply(current, enabled[styleName]);
            } else {
                current = current[styleName];
            }
        }
    }
    return current;
}
var templates = (chalk, tmp)=>{
    const styles = [];
    const chunks = [];
    let chunk = [];
    // eslint-disable-next-line max-params
    tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr)=>{
        if (escapeChar) {
            chunk.push(unescape(escapeChar));
        } else if (style) {
            const str = chunk.join('');
            chunk = [];
            chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
            styles.push({
                inverse,
                styles: parseStyle(style)
            });
        } else if (close) {
            if (styles.length === 0) {
                throw new Error('Found extraneous } in Chalk template literal');
            }
            chunks.push(buildStyle(chalk, styles)(chunk.join('')));
            chunk = [];
            styles.pop();
        } else {
            chunk.push(chr);
        }
    });
    chunks.push(chunk.join(''));
    if (styles.length > 0) {
        const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
        throw new Error(errMsg);
    }
    return chunks.join('');
};
(function(module) {
    const escapeStringRegexp$1 = escapeStringRegexp;
    const ansiStyles$1 = ansiStyles.exports;
    const stdoutColor = supportsColor_1.stdout;
    const template = templates;
    const isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');
    // `supportsColor.level` → `ansiStyles.color[name]` mapping
    const levelMapping = [
        'ansi',
        'ansi',
        'ansi256',
        'ansi16m'
    ];
    // `color-convert` models to exclude from the Chalk API due to conflicts and such
    const skipModels = new Set([
        'gray'
    ]);
    const styles = Object.create(null);
    function applyOptions(obj, options) {
        options = options || {};
        // Detect level if not set manually
        const scLevel = stdoutColor ? stdoutColor.level : 0;
        obj.level = options.level === undefined ? scLevel : options.level;
        obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;
    }
    function Chalk(options) {
        // We check for this.template here since calling `chalk.constructor()`
        // by itself will have a `this` of a previously constructed chalk object
        if (!this || !(this instanceof Chalk) || this.template) {
            const chalk = {};
            applyOptions(chalk, options);
            chalk.template = function() {
                const args = [].slice.call(arguments);
                return chalkTag.apply(null, [
                    chalk.template
                ].concat(args));
            };
            Object.setPrototypeOf(chalk, Chalk.prototype);
            Object.setPrototypeOf(chalk.template, chalk);
            chalk.template.constructor = Chalk;
            return chalk.template;
        }
        applyOptions(this, options);
    }
    // Use bright blue on Windows as the normal blue color is illegible
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    for (const key of Object.keys(ansiStyles$1)){
        ansiStyles$1[key].closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$1[key].close), 'g');
        styles[key] = {
            get () {
                const codes = ansiStyles$1[key];
                return build.call(this, this._styles ? this._styles.concat(codes) : [
                    codes
                ], this._empty, key);
            }
        };
    }
    styles.visible = {
        get () {
            return build.call(this, this._styles || [], true, 'visible');
        }
    };
    ansiStyles$1.color.closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$1.color.close), 'g');
    for (const model of Object.keys(ansiStyles$1.color.ansi)){
        if (skipModels.has(model)) {
            continue;
        }
        styles[model] = {
            get () {
                const level = this.level;
                return function() {
                    const open = ansiStyles$1.color[levelMapping[level]][model].apply(null, arguments);
                    const codes = {
                        open,
                        close: ansiStyles$1.color.close,
                        closeRe: ansiStyles$1.color.closeRe
                    };
                    return build.call(this, this._styles ? this._styles.concat(codes) : [
                        codes
                    ], this._empty, model);
                };
            }
        };
    }
    ansiStyles$1.bgColor.closeRe = new RegExp(escapeStringRegexp$1(ansiStyles$1.bgColor.close), 'g');
    for (const model of Object.keys(ansiStyles$1.bgColor.ansi)){
        if (skipModels.has(model)) {
            continue;
        }
        const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
            get () {
                const level = this.level;
                return function() {
                    const open = ansiStyles$1.bgColor[levelMapping[level]][model].apply(null, arguments);
                    const codes = {
                        open,
                        close: ansiStyles$1.bgColor.close,
                        closeRe: ansiStyles$1.bgColor.closeRe
                    };
                    return build.call(this, this._styles ? this._styles.concat(codes) : [
                        codes
                    ], this._empty, model);
                };
            }
        };
    }
    const proto = Object.defineProperties(()=>{}, styles);
    function build(_styles, _empty, key) {
        const builder = function() {
            return applyStyle.apply(builder, arguments);
        };
        builder._styles = _styles;
        builder._empty = _empty;
        const self = this;
        Object.defineProperty(builder, 'level', {
            enumerable: true,
            get () {
                return self.level;
            },
            set (level) {
                self.level = level;
            }
        });
        Object.defineProperty(builder, 'enabled', {
            enumerable: true,
            get () {
                return self.enabled;
            },
            set (enabled) {
                self.enabled = enabled;
            }
        });
        // See below for fix regarding invisible grey/dim combination on Windows
        builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';
        // `__proto__` is used because we must return a function, but there is
        // no way to create a function with a different prototype
        builder.__proto__ = proto; // eslint-disable-line no-proto
        return builder;
    }
    function applyStyle() {
        // Support varags, but simply cast to string in case there's only one arg
        const args = arguments;
        const argsLen = args.length;
        let str = String(arguments[0]);
        if (argsLen === 0) {
            return '';
        }
        if (argsLen > 1) {
            // Don't slice `arguments`, it prevents V8 optimizations
            for(let a = 1; a < argsLen; a++){
                str += ' ' + args[a];
            }
        }
        if (!this.enabled || this.level <= 0 || !str) {
            return this._empty ? '' : str;
        }
        // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
        // see https://github.com/chalk/chalk/issues/58
        // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
        const originalDim = ansiStyles$1.dim.open;
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        for (const code of this._styles.slice().reverse()){
            // Replace any instances already present with a re-opening code
            // otherwise only the part of the string until said closing code
            // will be colored, and the rest will simply be 'plain'.
            str = code.open + str.replace(code.closeRe, code.open) + code.close;
            // Close the styling before a linebreak and reopen
            // after next line to fix a bleed issue on macOS
            // https://github.com/chalk/chalk/pull/92
            str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
        }
        // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
        ansiStyles$1.dim.open = originalDim;
        return str;
    }
    function chalkTag(chalk, strings) {
        if (!Array.isArray(strings)) {
            // If chalk() was called by itself or with a string,
            // return the string itself as a string.
            return [].slice.call(arguments, 1).join(' ');
        }
        const args = [].slice.call(arguments, 2);
        const parts = [
            strings.raw[0]
        ];
        for(let i = 1; i < strings.length; i++){
            parts.push(String(args[i - 1]).replace(/[{}\\]/g, '\\$&'));
            parts.push(String(strings.raw[i]));
        }
        return template(chalk, parts.join(''));
    }
    Object.defineProperties(Chalk.prototype, styles);
    module.exports = Chalk(); // eslint-disable-line new-cap
    module.exports.supportsColor = stdoutColor;
    module.exports.default = module.exports; // For TypeScript
})(chalk);
Object.defineProperty(lib$1, "__esModule", {
    value: true
});
lib$1.default = highlight;
lib$1.getChalk = getChalk;
lib$1.shouldHighlight = shouldHighlight;
var _jsTokens = jsTokens;
var _helperValidatorIdentifier = lib;
var _chalk = chalk.exports;
const sometimesKeywords = new Set([
    "as",
    "async",
    "from",
    "get",
    "of",
    "set"
]);
function getDefs$1(chalk) {
    return {
        keyword: chalk.cyan,
        capitalized: chalk.yellow,
        jsxIdentifier: chalk.yellow,
        punctuator: chalk.yellow,
        number: chalk.magenta,
        string: chalk.green,
        regex: chalk.magenta,
        comment: chalk.grey,
        invalid: chalk.white.bgRed.bold
    };
}
const NEWLINE$1 = /\r\n|[\n\r\u2028\u2029]/;
const BRACKET = /^[()[\]{}]$/;
let tokenize;
{
    const JSX_TAG = /^[a-z][\w-]*$/i;
    const getTokenType = function(token, offset, text) {
        if (token.type === "name") {
            if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
                return "keyword";
            }
            if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")) {
                return "jsxIdentifier";
            }
            if (token.value[0] !== token.value[0].toLowerCase()) {
                return "capitalized";
            }
        }
        if (token.type === "punctuator" && BRACKET.test(token.value)) {
            return "bracket";
        }
        if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
            return "punctuator";
        }
        return token.type;
    };
    tokenize = function*(text) {
        let match;
        while(match = _jsTokens.default.exec(text)){
            const token = _jsTokens.matchToToken(match);
            yield {
                type: getTokenType(token, match.index, text),
                value: token.value
            };
        }
    };
}function highlightTokens(defs, text) {
    let highlighted = "";
    for (const { type, value } of tokenize(text)){
        const colorize = defs[type];
        if (colorize) {
            highlighted += value.split(NEWLINE$1).map((str)=>colorize(str)).join("\n");
        } else {
            highlighted += value;
        }
    }
    return highlighted;
}
function shouldHighlight(options) {
    return !!_chalk.supportsColor || options.forceColor;
}
function getChalk(options) {
    return options.forceColor ? new _chalk.constructor({
        enabled: true,
        level: 1
    }) : _chalk;
}
function highlight(code, options = {}) {
    if (shouldHighlight(options)) {
        const chalk = getChalk(options);
        const defs = getDefs$1(chalk);
        return highlightTokens(defs, code);
    } else {
        return code;
    }
}
Object.defineProperty(lib$2, "__esModule", {
    value: true
});
var codeFrameColumns_1 = lib$2.codeFrameColumns = codeFrameColumns;
lib$2.default = _default;
var _highlight = lib$1;
let deprecationWarningShown = false;
function getDefs(chalk) {
    return {
        gutter: chalk.grey,
        marker: chalk.red.bold,
        message: chalk.red.bold
    };
}
const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
function getMarkerLines(loc, source, opts) {
    const startLoc = Object.assign({
        column: 0,
        line: -1
    }, loc.start);
    const endLoc = Object.assign({}, startLoc, loc.end);
    const { linesAbove = 2, linesBelow = 3 } = opts || {};
    const startLine = startLoc.line;
    const startColumn = startLoc.column;
    const endLine = endLoc.line;
    const endColumn = endLoc.column;
    let start = Math.max(startLine - (linesAbove + 1), 0);
    let end = Math.min(source.length, endLine + linesBelow);
    if (startLine === -1) {
        start = 0;
    }
    if (endLine === -1) {
        end = source.length;
    }
    const lineDiff = endLine - startLine;
    const markerLines = {};
    if (lineDiff) {
        for(let i = 0; i <= lineDiff; i++){
            const lineNumber = i + startLine;
            if (!startColumn) {
                markerLines[lineNumber] = true;
            } else if (i === 0) {
                const sourceLength = source[lineNumber - 1].length;
                markerLines[lineNumber] = [
                    startColumn,
                    sourceLength - startColumn + 1
                ];
            } else if (i === lineDiff) {
                markerLines[lineNumber] = [
                    0,
                    endColumn
                ];
            } else {
                const sourceLength = source[lineNumber - i].length;
                markerLines[lineNumber] = [
                    0,
                    sourceLength
                ];
            }
        }
    } else {
        if (startColumn === endColumn) {
            if (startColumn) {
                markerLines[startLine] = [
                    startColumn,
                    0
                ];
            } else {
                markerLines[startLine] = true;
            }
        } else {
            markerLines[startLine] = [
                startColumn,
                endColumn - startColumn
            ];
        }
    }
    return {
        start,
        end,
        markerLines
    };
}
function codeFrameColumns(rawLines, loc, opts = {}) {
    const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
    const chalk = (0, _highlight.getChalk)(opts);
    const defs = getDefs(chalk);
    const maybeHighlight = (chalkFn, string)=>{
        return highlighted ? chalkFn(string) : string;
    };
    const lines = rawLines.split(NEWLINE);
    const { start, end, markerLines } = getMarkerLines(loc, lines, opts);
    const hasColumns = loc.start && typeof loc.start.column === "number";
    const numberMaxWidth = String(end).length;
    const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
    let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index)=>{
        const number = start + 1 + index;
        const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
        const gutter = ` ${paddedNumber} |`;
        const hasMarker = markerLines[number];
        const lastMarkerLine = !markerLines[number + 1];
        if (hasMarker) {
            let markerLine = "";
            if (Array.isArray(hasMarker)) {
                const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
                const numberOfMarkers = hasMarker[1] || 1;
                markerLine = [
                    "\n ",
                    maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")),
                    " ",
                    markerSpacing,
                    maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)
                ].join("");
                if (lastMarkerLine && opts.message) {
                    markerLine += " " + maybeHighlight(defs.message, opts.message);
                }
            }
            return [
                maybeHighlight(defs.marker, ">"),
                maybeHighlight(defs.gutter, gutter),
                line.length > 0 ? ` ${line}` : "",
                markerLine
            ].join("");
        } else {
            return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
        }
    }).join("\n");
    if (opts.message && !hasColumns) {
        frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}\n${frame}`;
    }
    if (highlighted) {
        return chalk.reset(frame);
    } else {
        return frame;
    }
}
function _default(rawLines, lineNumber, colNumber, opts = {}) {
    if (!deprecationWarningShown) {
        deprecationWarningShown = true;
        const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
        if (process.emitWarning) {
            process.emitWarning(message, "DeprecationWarning");
        } else {
            const deprecationError = new Error(message);
            deprecationError.name = "DeprecationWarning";
            console.warn(new Error(message));
        }
    }
    colNumber = Math.max(colNumber, 0);
    const location = {
        start: {
            column: colNumber,
            line: lineNumber
        }
    };
    return codeFrameColumns(rawLines, location, opts);
}
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */ /**
 * Attempt to parse position information from an error message originating from the MDX compiler.
 * Only used if the error object doesn't contain
 */ function parsePositionInformationFromErrorMessage(message) {
    const positionInfoPattern = /\d+:\d+(-\d+:\d+)/g;
    const match = message.match(positionInfoPattern);
    if (match) {
        // take the last match, that seems to be the most reliable source of the error.
        const lastMatch = match.slice(-1)[0];
        const [line, column] = lastMatch.split('-')[0].split(':');
        return {
            start: {
                line: Number.parseInt(line, 10),
                column: Number.parseInt(column, 10)
            }
        };
    }
}
/**
 * Prints a nicely formatted error message from an error caught during MDX compilation.
 *
 * @param error - Error caught from the mdx compiler
 * @param source - Raw MDX string
 * @returns Error
 */ function createFormattedMDXError(error, source) {
    const position = error?.position ?? parsePositionInformationFromErrorMessage(error?.message);
    const codeFrames = position ? codeFrameColumns_1(source, {
        start: {
            line: position.start.line,
            column: position.start.column ?? 0
        }
    }, {
        linesAbove: 2,
        linesBelow: 2
    }) : '';
    const formattedError = new Error(`[next-mdx-remote] error compiling MDX:
${error?.message}
${codeFrames ? '\n' + codeFrames + '\n' : ''}
More information: https://mdxjs.com/docs/troubleshooting-mdx`);
    formattedError.stack = '';
    return formattedError;
}
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 *
 * @typedef {string} Type
 * @typedef {Object<string, unknown>} Props
 */ var convert = /**
     * Generate an assertion from a check.
     * @param {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} [test]
     * When nullish, checks if `node` is a `Node`.
     * When `string`, works like passing `function (node) {return node.type === test}`.
     * When `function` checks if function passed the node is true.
     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
     * When `array`, checks any one of the subtests pass.
     * @returns {AssertAnything}
     */ function(test) {
    if (test === undefined || test === null) {
        return ok;
    }
    if (typeof test === 'string') {
        return typeFactory(test);
    }
    if (typeof test === 'object') {
        // @ts-ignore looks like a list of tests / partial test object.
        return 'length' in test ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === 'function') {
        return castFactory(test);
    }
    throw new Error('Expected function, string, or object as test');
};
/**
 * @param {Array.<Type|Props|TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */ function anyFactory(tests) {
    /** @type {Array.<AssertAnything>} */ var checks = [];
    var index = -1;
    while(++index < tests.length){
        checks[index] = convert(tests[index]);
    }
    return castFactory(any);
    /**
   * @this {unknown}
   * @param {unknown[]} parameters
   * @returns {boolean}
   */ function any(...parameters) {
        var index = -1;
        while(++index < checks.length){
            if (checks[index].call(this, ...parameters)) return true;
        }
    }
}
/**
 * Utility to assert each property in `test` is represented in `node`, and each
 * values are strictly equal.
 *
 * @param {Props} check
 * @returns {AssertAnything}
 */ function propsFactory(check) {
    return castFactory(all);
    /**
   * @param {Node} node
   * @returns {boolean}
   */ function all(node) {
        /** @type {string} */ var key;
        for(key in check){
            if (node[key] !== check[key]) return;
        }
        return true;
    }
}
/**
 * Utility to convert a string into a function which checks a given node’s type
 * for said string.
 *
 * @param {Type} check
 * @returns {AssertAnything}
 */ function typeFactory(check) {
    return castFactory(type);
    /**
   * @param {Node} node
   */ function type(node) {
        return node && node.type === check;
    }
}
/**
 * Utility to convert a string into a function which checks a given node’s type
 * for said string.
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */ function castFactory(check) {
    return assertion;
    /**
   * @this {unknown}
   * @param {Array.<unknown>} parameters
   * @returns {boolean}
   */ function assertion(...parameters) {
        return Boolean(check.call(this, ...parameters));
    }
}
// Utility to return true.
function ok() {
    return true;
}
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 *
 * @typedef {import('unist-util-is').Type} Type
 * @typedef {import('unist-util-is').Props} Props
 */ /** @type {Array.<Node>} */ const empty = [];
const remove = /**
     * Mutate the given tree by removing all nodes that pass `test`.
     * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.
     *
     * @param {Node} tree Tree to filter
     * @param {RemoveOptions} options Whether to drop parent nodes if they had children, but all their children were filtered out. Default is `{cascade: true}`
     * @param {Type|Props|TestFunction<Node>|Array<Type|Props|TestFunction<Node>>} test is-compatible test (such as a type)
     * @returns {Node|null}
     */ function(tree, options, test) {
    const is = convert(test || options);
    const cascade = options.cascade === undefined || options.cascade === null ? true : options.cascade;
    return preorder(tree);
    /**
       * Check and remove nodes recursively in preorder.
       * For each composite node, modify its children array in-place.
       *
       * @param {Node} node
       * @param {number|undefined} [index]
       * @param {Parent|undefined} [parent]
       * @returns {Node|null}
       */ function preorder(node, index, parent) {
        /** @type {Array.<Node>} */ // @ts-expect-error looks like a parent.
        const children = node.children || empty;
        let childIndex = -1;
        let position = 0;
        if (is(node, index, parent)) {
            return null;
        }
        if (children.length > 0) {
            // Move all living children to the beginning of the children array.
            while(++childIndex < children.length){
                // @ts-expect-error looks like a parent.
                if (preorder(children[childIndex], childIndex, node)) {
                    children[position++] = children[childIndex];
                }
            }
            // Cascade delete.
            if (cascade && !position) {
                return null;
            }
            // Drop other nodes.
            children.length = position;
        }
        return node;
    }
};
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */ /**
 * remark plugin which removes all import and export statements
 */ function removeImportsExportsPlugin() {
    return (tree)=>remove(tree, 'mdxjsEsm');
}
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */ function getCompileOptions(mdxOptions = {}, rsc = false) {
    const areImportsEnabled = mdxOptions?.useDynamicImport;
    // don't modify the original object when adding our own plugin
    // this allows code to reuse the same options object
    const remarkPlugins = [
        ...mdxOptions.remarkPlugins || [],
        ...areImportsEnabled ? [] : [
            removeImportsExportsPlugin
        ]
    ];
    return {
        ...mdxOptions,
        remarkPlugins,
        outputFormat: 'function-body',
        // Disable the importSource option for RSC to ensure there's no `useMDXComponents` implemented.
        providerImportSource: rsc ? undefined : '@mdx-js/react'
    };
}
/**
 * Parses and compiles the provided MDX string. Returns a result which can be passed into <MDXRemote /> to be rendered.
 */ async function serialize(source, { scope = {}, mdxOptions = {}, parseFrontmatter = false } = {}, rsc = false) {
    const vfile = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$40$5$2e$3$2e$7$2f$node_modules$2f$vfile$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFile"](source);
    // makes frontmatter available via vfile.data.matter
    if (parseFrontmatter) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$matter$40$3$2e$0$2e$1$2f$node_modules$2f$vfile$2d$matter$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["matter"](vfile, {
            strip: true
        });
    }
    let compiledMdx;
    try {
        compiledMdx = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f40$mdx$2d$js$2b$mdx$40$2$2e$3$2e$0$2f$node_modules$2f40$mdx$2d$js$2f$mdx$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["compile"](vfile, getCompileOptions(mdxOptions, rsc));
    } catch (error) {
        throw createFormattedMDXError(error, String(vfile));
    }
    let compiledSource = String(compiledMdx);
    return {
        compiledSource,
        frontmatter: vfile.data.matter ?? {},
        scope: scope
    };
}
;

})()),
"[project]/node_modules/.pnpm/next-mdx-remote@4.4.1_react-dom@18.2.0_react@18.2.0/node_modules/next-mdx-remote/serialize.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */ __turbopack_esm__({
    "serialize": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$2d$mdx$2d$remote$40$4$2e$4$2e$1_react$2d$dom$40$18$2e$2$2e$0_react$40$18$2e$2$2e$0$2f$node_modules$2f$next$2d$mdx$2d$remote$2f$dist$2f$serialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["serialize"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$2d$mdx$2d$remote$40$4$2e$4$2e$1_react$2d$dom$40$18$2e$2$2e$0_react$40$18$2e$2$2e$0$2f$node_modules$2f$next$2d$mdx$2d$remote$2f$dist$2f$serialize$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/next-mdx-remote@4.4.1_react-dom@18.2.0_react@18.2.0/node_modules/next-mdx-remote/dist/serialize.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),

};

//# sourceMappingURL=node_modules__pnpm_86d319._.js.map