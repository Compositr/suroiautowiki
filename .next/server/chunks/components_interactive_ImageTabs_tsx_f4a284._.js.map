{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/interactive/ImageTabs.tsx"],"sourcesContent":["\"use client\";\n\nimport { ImageTab } from \"@/lib/util/types\";\nimport { cp } from \"fs\";\nimport Image from \"next/image\";\nimport { useState } from \"react\";\n\nconst BackgroundMode = [\"transparent\", \"white\", \"black\", \"checker\"];\n\nexport default function ImageTabs({ images }: ImageTabsProps) {\n  const [currentTab, setCurrentTab] = useState(0);\n  const [backgroundMode, setBackgroundMode] = useState(\"transparent\");\n  const currentImage = images[currentTab];\n  return (\n    <div\n      className={`flex flex-col items-center justify-start gap-2 bg-white/5 rounded-md`}\n    >\n      {images.length > 1 && (\n        <div className=\"flex flex-row flex-wrap w-full justify-around gap-2 items-center p-1\">\n          {images.map((image, index) => (\n            <button\n              key={index}\n              onClick={() => setCurrentTab(index)}\n              className={`flex justify-center grow rounded-md min-w-[7ch] hover:bg-white/5 cursor-pointer text-muted-foreground hover:text-white ${\n                currentTab === index\n                  ? \"!text-white bg-white/10 ring-primary ring\"\n                  : \"\"\n              } p-2`}\n            >\n              {image.title ?? index + 1}\n            </button>\n          ))}\n        </div>\n      )}\n      {(currentImage && (\n        <Image\n          src={currentImage.url}\n          alt={currentImage.alt ?? currentImage.title ?? currentImage.url}\n          width={128}\n          height={128}\n          className={`w-40 h-40 my-4 p-4 ${getColor(\n            backgroundMode\n          )} bg-repeat bg-[length:1rem]`}\n        />\n      )) || <h1>(No image available)</h1>}\n      <div className=\"flex flex-row gap-2 mb-4\">\n        {BackgroundMode.map((color, i) => (\n          <button\n            key={i}\n            className={`${getColor(color)} border ${\n              color === backgroundMode ? \"border-primary\" : \"border-white\"\n            } flex w-8 h-8 rounded-md`}\n            onClick={() => setBackgroundMode(color)}\n          ></button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction getColor(color: string) {\n  return color === \"transparent\"\n    ? \"bg-transparent\"\n    : color === \"white\"\n    ? \"bg-white\"\n    : color === \"black\"\n    ? \"bg-black\"\n    : color === \"checker\"\n    ? \"bg-checker bg-white\"\n    : \"\";\n}\n\nexport interface ImageTabsProps extends React.PropsWithChildren {\n  images: ImageTab[];\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;;;AAOA,MAAM,iBAAiB;IAAC;IAAe;IAAS;IAAS;CAAU;AAEpD,SAAS,UAAU,EAAE,MAAM,EAAkB;IAC1D,MAAM,CAAC,YAAY,cAAc,GAAG,0TAAS;IAC7C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,0TAAS;IACrD,MAAM,eAAe,MAAM,CAAC,WAAW;IACvC,qBACE,iVAAC;QACC,WAAW,CAAC,oEAAoE,CAAC;;YAEhF,OAAO,MAAM,GAAG,mBACf,iVAAC;gBAAI,WAAU;0BACZ,OAAO,GAAG,CAAC,CAAC,OAAO,sBAClB,iVAAC;wBAEC,SAAS,IAAM,cAAc;wBAC7B,WAAW,CAAC,uHAAuH,EACjI,eAAe,QACX,8CACA,GACL,IAAI,CAAC;kCAEL,MAAM,KAAK,IAAI,QAAQ;uBARnB;;;;;;;;;;YAaX,8BACA;gBACE,KAAK,aAAa,GAAG;gBACrB,KAAK,aAAa,GAAG,IAAI,aAAa,KAAK,IAAI,aAAa,GAAG;gBAC/D,OAAO;gBACP,QAAQ;gBACR,WAAW,CAAC,mBAAmB,EAAE,SAC/B,gBACA,2BAA2B,CAAC;;;;;sCAE5B,iVAAC;0BAAG;;;;;;0BACV,iVAAC;gBAAI,WAAU;0BACZ,eAAe,GAAG,CAAC,CAAC,OAAO,kBAC1B,iVAAC;wBAEC,WAAW,CAAC,EAAE,SAAS,OAAO,QAAQ,EACpC,UAAU,iBAAiB,mBAAmB,eAC/C,wBAAwB,CAAC;wBAC1B,SAAS,IAAM,kBAAkB;uBAJ5B;;;;;;;;;;;;;;;;AAUjB;AAEA,SAAS,SAAS,KAAa;IAC7B,OAAO,UAAU,gBACb,mBACA,UAAU,UACV,aACA,UAAU,UACV,aACA,UAAU,YACV,wBACA;AACN"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}