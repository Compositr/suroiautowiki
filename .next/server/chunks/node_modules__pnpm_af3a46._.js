module.exports = {

"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/root.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('estree-jsx').JSXFragment} JsxFragment
 * @typedef {JsxFragment['children'][number]} JsxChild
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "root": ()=>root
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$2$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-whitespace@2.0.1/node_modules/hast-util-whitespace/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function root(node, state) {
    const children = state.all(node);
    /** @type {Array<JsxChild>} */ const cleanChildren = [];
    let index = -1;
    /** @type {Array<JsxChild> | undefined} */ let queue;
    // Remove surrounding whitespace nodes from the fragment.
    while(++index < children.length){
        const child = children[index];
        if (child.type === 'JSXExpressionContainer' && child.expression.type === 'Literal' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$2$2e$0$2e$1$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["whitespace"](child.expression.value)) {
            if (queue) queue.push(child);
        } else {
            if (queue) cleanChildren.push(...queue);
            cleanChildren.push(child);
            queue = [];
        }
    }
    /** @type {JsxFragment} */ const result = {
        type: 'JSXFragment',
        openingFragment: {
            type: 'JSXOpeningFragment'
        },
        closingFragment: {
            type: 'JSXClosingFragment'
        },
        children: cleanChildren
    };
    state.inherit(node, result);
    return result;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/text.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('hast').Text} Text
 * @typedef {import('estree').Literal} Literal
 * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn a hast text node into an estree node.
 *
 * @param {Text} node
 *   hast node to transform.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {JsxExpressionContainer | void}
 *   JSX expression.
 */ __turbopack_esm__({
    "text": ()=>text
});
function text(node, state) {
    const value = String(node.value || '');
    if (value) {
        /** @type {Literal} */ const result = {
            type: 'Literal',
            value
        };
        state.inherit(node, result);
        /** @type {JsxExpressionContainer} */ const container = {
            type: 'JSXExpressionContainer',
            expression: result
        };
        state.patch(node, container);
        return container;
    }
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsm} MdxjsEsm
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "mdxjsEsm": ()=>mdxjsEsm
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-attach-comments@2.1.1/node_modules/estree-util-attach-comments/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function mdxjsEsm(node, state) {
    const estree = node.data && node.data.estree;
    const comments = estree && estree.comments || [];
    if (estree) {
        state.comments.push(...comments);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"](estree, comments);
        state.esm.push(...estree.body);
    }
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElement} MdxJsxFlowElement
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElement} MdxJsxTextElement
 * @typedef {import('estree').Expression} Expression
 * @typedef {import('estree-jsx').JSXElement} JsxElement
 * @typedef {import('estree-jsx').JSXFragment} JsxFragment
 * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute
 * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "mdxJsxElement": ()=>mdxJsxElement
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-attach-comments@2.1.1/node_modules/estree-util-attach-comments/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function mdxJsxElement(node, state) {
    const parentSchema = state.schema;
    let schema = parentSchema;
    const attrs = node.attributes || [];
    let index = -1;
    if (node.name && parentSchema.space === 'html' && node.name.toLowerCase() === 'svg') {
        schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["svg"];
        state.schema = schema;
    }
    const children = state.all(node);
    /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */ const attributes = [];
    while(++index < attrs.length){
        const attr = attrs[index];
        const value = attr.value;
        /** @type {JsxAttribute['value']} */ let attributeValue;
        if (attr.type === 'mdxJsxAttribute') {
            if (value === undefined || value === null) {
                attributeValue = null;
            // Empty.
            } else if (typeof value === 'object') {
                const estree = value.data && value.data.estree;
                const comments = estree && estree.comments || [];
                /** @type {Expression | undefined} */ let expression;
                if (estree) {
                    state.comments.push(...comments);
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"](estree, estree.comments);
                    // Should exist.
                    /* c8 ignore next 5 */ expression = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression || undefined;
                }
                attributeValue = {
                    type: 'JSXExpressionContainer',
                    expression: expression || {
                        type: 'JSXEmptyExpression'
                    }
                };
                state.inherit(value, attributeValue);
            } else {
                attributeValue = {
                    type: 'Literal',
                    value: String(value)
                };
            }
            /** @type {JsxAttribute} */ const attribute = {
                type: 'JSXAttribute',
                name: state.createJsxAttributeName(attr.name),
                value: attributeValue
            };
            state.inherit(attr, attribute);
            attributes.push(attribute);
        } else {
            const estree = attr.data && attr.data.estree;
            const comments = estree && estree.comments || [];
            /** @type {JsxSpreadAttribute['argument'] | undefined} */ let argumentValue;
            if (estree) {
                state.comments.push(...comments);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"](estree, estree.comments);
                // Should exist.
                /* c8 ignore next 10 */ argumentValue = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression && estree.body[0].expression.type === 'ObjectExpression' && estree.body[0].expression.properties && estree.body[0].expression.properties[0] && estree.body[0].expression.properties[0].type === 'SpreadElement' && estree.body[0].expression.properties[0].argument || undefined;
            }
            /** @type {JsxSpreadAttribute} */ const attribute = {
                type: 'JSXSpreadAttribute',
                argument: argumentValue || {
                    type: 'ObjectExpression',
                    properties: []
                }
            };
            state.inherit(attr, attribute);
            attributes.push(attribute);
        }
    }
    // Restore parent schema.
    state.schema = parentSchema;
    /** @type {JsxElement | JsxFragment} */ const result = node.name ? {
        type: 'JSXElement',
        openingElement: {
            type: 'JSXOpeningElement',
            attributes,
            name: state.createJsxElementName(node.name),
            selfClosing: children.length === 0
        },
        closingElement: children.length > 0 ? {
            type: 'JSXClosingElement',
            name: state.createJsxElementName(node.name)
        } : null,
        children
    } : {
        type: 'JSXFragment',
        openingFragment: {
            type: 'JSXOpeningFragment'
        },
        closingFragment: {
            type: 'JSXClosingFragment'
        },
        children
    };
    state.inherit(node, result);
    return result;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-mdx-expression').MdxFlowExpression} MdxFlowExpression
 * @typedef {import('mdast-util-mdx-expression').MdxTextExpression} MdxTextExpression
 * @typedef {import('estree').Expression} Expression
 * @typedef {import('estree-jsx').JSXEmptyExpression} JsxEmptyExpression
 * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "mdxExpression": ()=>mdxExpression
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-attach-comments@2.1.1/node_modules/estree-util-attach-comments/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function mdxExpression(node, state) {
    const estree = node.data && node.data.estree;
    const comments = estree && estree.comments || [];
    /** @type {Expression | JsxEmptyExpression | undefined} */ let expression;
    if (estree) {
        state.comments.push(...comments);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$2$2e$1$2e$1$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"](estree, estree.comments);
        expression = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression || undefined;
    }
    if (!expression) {
        expression = {
            type: 'JSXEmptyExpression'
        };
        state.patch(node, expression);
    }
    /** @type {JsxExpressionContainer} */ const result = {
        type: 'JSXExpressionContainer',
        expression
    };
    state.inherit(node, result);
    return result;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/element.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('estree').Property} Property
 * @typedef {import('estree-jsx').JSXElement} JsxElement
 * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute
 * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute
 * @typedef {import('../state.js').State} State
 */ /**
 * @typedef {Record<string, string>} Style
 */ __turbopack_esm__({
    "element": ()=>element
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$comma$2d$separated$2d$tokens$40$2$2e$0$2e$3$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$space$2d$separated$2d$tokens$40$2$2e$0$2e$2$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@2.1.0/node_modules/estree-util-is-identifier-name/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$style$2d$to$2d$object$40$0$2e$4$2e$4$2f$node_modules$2f$style$2d$to$2d$object$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/style-to-object@0.4.4/node_modules/style-to-object/index.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
const own = {}.hasOwnProperty;
const cap = /[A-Z]/g;
const dashSomething = /-([a-z])/g;
function element(node, state) {
    const parentSchema = state.schema;
    let schema = parentSchema;
    const props = node.properties || {};
    if (parentSchema.space === 'html' && node.tagName.toLowerCase() === 'svg') {
        schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["svg"];
        state.schema = schema;
    }
    const children = state.all(node);
    /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */ const attributes = [];
    /** @type {string} */ let prop;
    for(prop in props){
        if (own.call(props, prop)) {
            let value = props[prop];
            const info = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["find"](schema, prop);
            /** @type {JsxAttribute['value']} */ let attributeValue;
            // Ignore nullish and `NaN` values.
            // Ignore `false` and falsey known booleans.
            if (value === undefined || value === null || typeof value === 'number' && Number.isNaN(value) || value === false || !value && info.boolean) {
                continue;
            }
            prop = state.elementAttributeNameCase === 'react' && info.space ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["hastToReact"][info.property] || info.property : info.attribute;
            if (Array.isArray(value)) {
                // Accept `array`.
                // Most props are space-separated.
                value = info.commaSeparated ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$comma$2d$separated$2d$tokens$40$2$2e$0$2e$3$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringify"](value) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$space$2d$separated$2d$tokens$40$2$2e$0$2e$2$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringify"](value);
            }
            if (prop === 'style') {
                let styleObject = typeof value === 'object' ? value : parseStyle(String(value), node.tagName);
                if (state.stylePropertyNameCase === 'css') {
                    styleObject = transformStyleToCssCasing(styleObject);
                }
                /** @type {Array<Property>} */ const cssProperties = [];
                /** @type {string} */ let cssProp;
                for(cssProp in styleObject){
                    // eslint-disable-next-line max-depth
                    if (own.call(styleObject, cssProp)) {
                        cssProperties.push({
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"](cssProp) ? {
                                type: 'Identifier',
                                name: cssProp
                            } : {
                                type: 'Literal',
                                value: cssProp
                            },
                            value: {
                                type: 'Literal',
                                value: String(styleObject[cssProp])
                            },
                            kind: 'init'
                        });
                    }
                }
                attributeValue = {
                    type: 'JSXExpressionContainer',
                    expression: {
                        type: 'ObjectExpression',
                        properties: cssProperties
                    }
                };
            } else if (value === true) {
                attributeValue = null;
            } else {
                attributeValue = {
                    type: 'Literal',
                    value: String(value)
                };
            }
            if (jsxIdentifierName(prop)) {
                attributes.push({
                    type: 'JSXAttribute',
                    name: {
                        type: 'JSXIdentifier',
                        name: prop
                    },
                    value: attributeValue
                });
            } else {
                attributes.push({
                    type: 'JSXSpreadAttribute',
                    argument: {
                        type: 'ObjectExpression',
                        properties: [
                            {
                                type: 'Property',
                                method: false,
                                shorthand: false,
                                computed: false,
                                key: {
                                    type: 'Literal',
                                    value: String(prop)
                                },
                                // @ts-expect-error No need to worry about `style` (which has a
                                // `JSXExpressionContainer` value) because that’s a valid identifier.
                                value: attributeValue || {
                                    type: 'Literal',
                                    value: true
                                },
                                kind: 'init'
                            }
                        ]
                    }
                });
            }
        }
    }
    // Restore parent schema.
    state.schema = parentSchema;
    /** @type {JsxElement} */ const result = {
        type: 'JSXElement',
        openingElement: {
            type: 'JSXOpeningElement',
            attributes,
            name: state.createJsxElementName(node.tagName),
            selfClosing: children.length === 0
        },
        closingElement: children.length > 0 ? {
            type: 'JSXClosingElement',
            name: state.createJsxElementName(node.tagName)
        } : null,
        children
    };
    state.inherit(node, result);
    return result;
}
/**
 * Parse CSS rules as a declaration.
 *
 * @param {string} value
 *   CSS text.
 * @param {string} tagName
 *   Element name.
 * @returns {Style}
 *   Props.
 */ function parseStyle(value, tagName) {
    /** @type {Style} */ const result = {};
    try {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$style$2d$to$2d$object$40$0$2e$4$2e$4$2f$node_modules$2f$style$2d$to$2d$object$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"](value, iterator);
    } catch (error) {
        const exception = error;
        exception.message = tagName + '[style]' + exception.message.slice('undefined'.length);
        throw error;
    }
    return result;
    /**
   * Add `name`, as a CSS prop, to `result`.
   *
   * @param {string} name
   *   Key.
   * @param {string} value
   *   Value.
   * @returns {void}
   *   Nothing.
   */ function iterator(name, value) {
        let key = name;
        if (key.slice(0, 2) !== '--') {
            // See: <https://alanhogan.com/code/vendor-prefixed-css-property-names-in-javascript>
            if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4);
            key = key.replace(dashSomething, toCamel);
        }
        result[key] = value;
    }
}
/**
 * Transform a DOM casing style object to a CSS casing style object.
 *
 * @param {Style} domCasing
 * @returns {Style}
 */ function transformStyleToCssCasing(domCasing) {
    /** @type {Style} */ const cssCasing = {};
    /** @type {string} */ let from;
    for(from in domCasing){
        if (own.call(domCasing, from)) {
            let to = from.replace(cap, toDash);
            // Handle `ms-xxx` -> `-ms-xxx`.
            if (to.slice(0, 3) === 'ms-') to = '-' + to;
            cssCasing[to] = domCasing[from];
        }
    }
    return cssCasing;
}
/**
 * Make `$1` capitalized.
 *
 * @param {string} _
 *   Whatever.
 * @param {string} $1
 *   Single ASCII alphabetical.
 * @returns {string}
 *   Capitalized `$1`.
 */ function toCamel(_, $1) {
    return $1.toUpperCase();
}
/**
 * Make `$0` dash cased.
 *
 * @param {string} $0
 *   Capitalized ASCII leter.
 * @returns {string}
 *   Dash and lower letter.
 */ function toDash($0) {
    return '-' + $0.toLowerCase();
}
/**
 * Checks if the given string is a valid identifier name.
 *
 * Allows dashes, so it’s actually JSX identifier names.
 *
 * @param {string} name
 *   Whatever.
 * @returns {boolean}
 *   Whether `name` is a valid JSX identifier.
 */ function jsxIdentifierName(name) {
    let index = -1;
    while(++index < name.length){
        if (!(index ? cont : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"])(name.charCodeAt(index))) return false;
    }
    // `false` if `name` is empty.
    return index > 0;
    /**
   * @param {number} code
   * @returns {boolean}
   */ function cont(code) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code) || code === 45 /* `-` */ ;
    }
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/comment.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Comment} Comment
 * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer
 * @typedef {import('estree-jsx').JSXEmptyExpression} JsxEmptyExpression
 * @typedef {import('../state.js').State} State
 */ /**
 * Turn a hast comment into an estree node.
 *
 * @param {import('hast').Comment} node
 *   hast node to transform.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {JsxExpressionContainer}
 *   estree expression.
 */ __turbopack_esm__({
    "comment": ()=>comment
});
function comment(node, state) {
    /** @type {Comment} */ const result = {
        type: 'Block',
        value: node.value
    };
    state.inherit(node, result);
    state.comments.push(result);
    /** @type {JsxEmptyExpression} */ const expression = {
        type: 'JSXEmptyExpression',
        // @ts-expect-error: `comments` is custom.
        comments: [
            Object.assign({}, result, {
                leading: false,
                trailing: true
            })
        ]
    };
    state.patch(node, expression);
    /** @type {JsxExpressionContainer} */ const container = {
        type: 'JSXExpressionContainer',
        expression
    };
    state.patch(node, container);
    return container;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "handlers": ()=>handlers
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$comment$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/comment.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/element.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdxjs$2d$esm$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$text$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/text.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$root$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/root.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
const handlers = {
    comment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$comment$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["comment"],
    doctype: ignore,
    element: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["element"],
    mdxFlowExpression: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpression"],
    mdxTextExpression: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpression"],
    mdxJsxFlowElement: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxElement"],
    mdxJsxTextElement: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxElement"],
    mdxjsEsm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdxjs$2d$esm$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsm"],
    text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$text$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["text"],
    root: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$root$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["root"]
};
/**
 * Handle a node that is ignored.
 *
 * @returns {void}
 *   Nothing.
 */ function ignore() {}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/state.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Comment} Comment
 * @typedef {import('estree').Directive} Directive
 * @typedef {import('estree').ModuleDeclaration} ModuleDeclaration
 * @typedef {import('estree').Node} EstreeNode
 * @typedef {import('estree').Statement} Statement
 *
 * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute
 * @typedef {import('estree-jsx').JSXElement} JsxElement
 * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier
 * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression
 * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName
 *
 * @typedef {import('hast').Content} Content
 * @typedef {import('hast').Root} Root
 *
 * @typedef {import('mdast-util-mdx-expression').MdxFlowExpression} MdxFlowExpression
 * @typedef {import('mdast-util-mdx-expression').MdxTextExpression} MdxTextExpression
 *
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttribute} MdxJsxAttribute
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElement} MdxJsxFlowElement
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElement} MdxJsxTextElement
 *
 * @typedef {import('property-information').Schema} Schema
 *
 * @typedef {import('unist').Parent} UnistParent
 */ /**
 * @typedef {Content | MdxJsxAttributeValueExpression | MdxJsxAttribute | MdxJsxExpressionAttribute | MdxJsxFlowElement | MdxJsxTextElement | MdxFlowExpression | MdxTextExpression | Root} Node
 * @typedef {Extract<Node, UnistParent>} Parent
 * @typedef {JsxElement['openingElement']['name']} JsxElementName
 * @typedef {JsxAttribute['name']} JsxAttributeName
 * @typedef {JsxElement['children'][number]} JsxChild
 *
 * @typedef {'html' | 'svg'} Space
 *   Namespace.
 *
 * @callback Handle
 *   Turn a hast node into an estree node.
 * @param {any} node
 *   Expected hast node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {JsxChild | null | undefined | void}
 *   estree node.
 *
 * @typedef {'html' | 'react'} ElementAttributeNameCase
 *   Specify casing to use for attribute names.
 *
 *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.
 *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.
 *
 * @typedef {'css' | 'dom'} StylePropertyNameCase
 *   Casing to use for property names in `style` objects.
 *
 *   CSS casing is for example `background-color` and `-webkit-line-clamp`.
 *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.
 *
 * @typedef Options
 *   Configuration.
 * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']
 *   Specify casing to use for attribute names.
 *
 *   This casing is used for hast elements, not for embedded MDX JSX nodes
 *   (components that someone authored manually).
 * @property {Record<string, Handle | null | undefined> | null | undefined} [handlers={}]
 *   Custom handlers.
 * @property {Space | null | undefined} [space='html']
 *   Which space the document is in.
 *
 *   When an `<svg>` element is found in the HTML space, this package already
 *   automatically switches to and from the SVG space when entering and exiting
 *   it.
 * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']
 *   Specify casing to use for property names in `style` objects.
 *
 *   This casing is used for hast elements, not for embedded MDX JSX nodes
 *   (components that someone authored manually).
 *
 * @typedef State
 *   Info passed around about the current state.
 * @property {Schema} schema
 *   Current schema.
 * @property {ElementAttributeNameCase} elementAttributeNameCase
 *   Casing to use for attribute names.
 * @property {StylePropertyNameCase} stylePropertyNameCase
 *   Casing to use for property names in `style` objects.
 * @property {Array<Comment>} comments
 *   List of estree comments.
 * @property {Array<Directive | Statement | ModuleDeclaration>} esm
 *   List of top-level estree nodes.
 * @property {(node: any) => JsxChild | null | undefined | void} handle
 *   Transform a hast node to estree.
 * @property {(parent: Parent) => Array<JsxChild>} all
 *   Transform children of a hast parent to estree.
 * @property {(from: Node, to: EstreeNode | Comment) => void} patch
 *   Take positional info from `from` (use `inherit` if you also want data).
 * @property {(from: Node, to: EstreeNode | Comment) => void} inherit
 *   Take positional info and data from `from` (use `patch` if you don’t want data).
 * @property {(name: string) => JsxAttributeName} createJsxAttributeName
 *   Create a JSX attribute name.
 * @property {(name: string) => JsxElementName} createJsxElementName
 *   Create a JSX element name.
 */ __turbopack_esm__({
    "createState": ()=>createState
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$4$2e$0$2e$4$2f$node_modules$2f$unist$2d$util$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position@4.0.4/node_modules/unist-util-position/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$zwitch$40$2$2e$0$2e$4$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
const own = {}.hasOwnProperty;
// `react-dom` triggers a warning for *any* white space in tables.
// To follow GFM, `mdast-util-to-hast` injects line endings between elements.
// Other tools might do so too, but they don’t do here, so we remove all of
// that.
//
// See: <https://github.com/facebook/react/pull/7081>.
// See: <https://github.com/facebook/react/pull/7515>.
// See: <https://github.com/remarkjs/remark-react/issues/64>.
// See: <https://github.com/rehypejs/rehype-react/pull/29>.
// See: <https://github.com/rehypejs/rehype-react/pull/32>.
// See: <https://github.com/rehypejs/rehype-react/pull/45>.
// See: <https://github.com/mdx-js/mdx/issues/2000>
const tableElements = new Set([
    'table',
    'thead',
    'tbody',
    'tfoot',
    'tr'
]);
function createState(options) {
    /** @type {Handle} */ const one = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$zwitch$40$2$2e$0$2e$4$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["zwitch"]('type', {
        invalid,
        unknown,
        handlers: {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["handlers"],
            ...options.handlers
        }
    });
    return {
        // Current space.
        schema: options.space === 'svg' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["svg"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["html"],
        elementAttributeNameCase: options.elementAttributeNameCase || 'react',
        stylePropertyNameCase: options.stylePropertyNameCase || 'dom',
        // Results.
        comments: [],
        esm: [],
        // Useful functions.
        handle,
        all,
        patch,
        inherit,
        createJsxAttributeName,
        createJsxElementName
    };
    /**
   * @this {State}
   * @param {any} node
   * @returns {JsxChild | null | undefined | void}
   */ function handle(node) {
        return one(node, this);
    }
}
/**
 * Crash on an invalid value.
 *
 * @param {unknown} value
 *   Non-node.
 * @returns {never}
 *   Nothing (crashes).
 */ function invalid(value) {
    throw new Error('Cannot handle value `' + value + '`, expected node');
}
/**
 * Crash on an unknown node.
 *
 * @param {unknown} node
 *   Unknown node.
 * @returns {never}
 *   Nothing (crashes).
 */ function unknown(node) {
    // @ts-expect-error: JS guarantees there’s a `type`.
    throw new Error('Cannot handle unknown node `' + node.type + '`');
}
/**
 * @this {State} state
 *   Info passed around about the current state.
 * @param {Parent | MdxJsxFlowElement | MdxJsxTextElement} parent
 *   hast node whose children to transform.
 * @returns {Array<JsxChild>}
 *   estree nodes.
 */ function all(parent) {
    const children = parent.children || [];
    let index = -1;
    /** @type {Array<JsxChild>} */ const results = [];
    const ignoreLineBreak = this.schema.space === 'html' && parent.type === 'element' && tableElements.has(parent.tagName.toLowerCase());
    while(++index < children.length){
        const child = children[index];
        if (ignoreLineBreak && child.type === 'text' && child.value === '\n') {
            continue;
        }
        const result = this.handle(child);
        if (Array.isArray(result)) {
            results.push(...result);
        } else if (result) {
            results.push(result);
        }
    }
    return results;
}
/**
 * Take positional info and data from `hast`.
 *
 * Use `patch` if you don’t want data.
 *
 * @param {Node | MdxJsxAttributeValueExpression | MdxJsxAttribute | MdxJsxExpressionAttribute | MdxJsxFlowElement | MdxJsxTextElement | MdxFlowExpression | MdxTextExpression} from
 *   hast node to take positional info and data from.
 * @param {EstreeNode | Comment} to
 *   estree node to add positional info and data to.
 * @returns {void}
 *   Nothing.
 */ function inherit(from, to) {
    /** @type {Record<string, unknown> | undefined} */ const left = from.data;
    /** @type {Record<string, unknown> | undefined} */ let right;
    /** @type {string} */ let key;
    patch(from, to);
    if (left) {
        for(key in left){
            if (own.call(left, key) && key !== 'estree') {
                if (!right) right = {};
                right[key] = left[key];
            }
        }
        if (right) {
            // @ts-expect-error `esast` extension.
            to.data = right;
        }
    }
}
/**
 * Take positional info from `from`.
 *
 * Use `inherit` if you also want data.
 *
 * @param {Node | MdxJsxAttributeValueExpression | MdxJsxAttribute | MdxJsxExpressionAttribute | MdxJsxFlowElement | MdxJsxTextElement | MdxFlowExpression | MdxTextExpression} from
 *   hast node to take positional info from.
 * @param {EstreeNode | Comment} to
 *   estree node to add positional info to.
 * @returns {void}
 *   Nothing.
 */ function patch(from, to) {
    const p = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$4$2e$0$2e$4$2f$node_modules$2f$unist$2d$util$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["position"](from);
    if (p.start.line && p.start.offset !== undefined && p.end.offset !== undefined) {
        // @ts-expect-error acorn-style.
        to.start = p.start.offset;
        // @ts-expect-error acorn-style.
        to.end = p.end.offset;
        to.loc = {
            start: {
                line: p.start.line,
                column: p.start.column - 1
            },
            end: {
                line: p.end.line,
                column: p.end.column - 1
            }
        };
        to.range = [
            p.start.offset,
            p.end.offset
        ];
    }
}
/**
 * Create a JSX attribute name.
 *
 * @param {string} name
 * @returns {JsxAttributeName}
 */ function createJsxAttributeName(name) {
    const node = createJsxNameFromString(name);
    // MDX never generates this.
    /* c8 ignore next 3 */ if (node.type === 'JSXMemberExpression') {
        throw new Error('Member expressions in attribute names are not supported');
    }
    return node;
}
/**
 * Create a JSX element name.
 *
 * @param {string} name
 * @returns {JsxElementName}
 */ function createJsxElementName(name) {
    return createJsxNameFromString(name);
}
/**
 * Create a JSX name from a string.
 *
 * @param {string} name
 *   Name.
 * @returns {JsxMemberExpression | JsxNamespacedName | JsxIdentifier}
 *   Node.
 */ function createJsxNameFromString(name) {
    if (name.includes('.')) {
        const names = name.split('.');
        let part = names.shift();
        /** @type {JsxMemberExpression} */ // @ts-expect-error: hush, the first is always defined.
        let node = {
            type: 'JSXIdentifier',
            name: part
        };
        while(part = names.shift()){
            node = {
                type: 'JSXMemberExpression',
                object: node,
                property: {
                    type: 'JSXIdentifier',
                    name: part
                }
            };
        }
        return node;
    }
    if (name.includes(':')) {
        const parts = name.split(':');
        return {
            type: 'JSXNamespacedName',
            namespace: {
                type: 'JSXIdentifier',
                name: parts[0]
            },
            name: {
                type: 'JSXIdentifier',
                name: parts[1]
            }
        };
    }
    return {
        type: 'JSXIdentifier',
        name
    };
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('hast').Content} Content
 * @typedef {import('hast').Root} Root
 *
 * @typedef {import('estree').ExpressionStatement} ExpressionStatement
 * @typedef {import('estree').Program} Program
 *
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttribute} MdxJsxAttribute
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElement} MdxJsxFlowElement
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElement} MdxJsxTextElement
 *
 * @typedef {import('mdast-util-mdx-expression').MdxFlowExpression} MdxFlowExpression
 * @typedef {import('mdast-util-mdx-expression').MdxTextExpression} MdxTextExpression
 *
 * @typedef {import('./state.js').Options} Options
 */ /**
 * @typedef {Root | Content | MdxJsxAttributeValueExpression | MdxJsxAttribute | MdxJsxExpressionAttribute | MdxJsxFlowElement | MdxJsxTextElement | MdxFlowExpression | MdxTextExpression} Node
 */ __turbopack_esm__({
    "toEstree": ()=>toEstree
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$state$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/state.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function toEstree(tree, options) {
    const state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$state$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["createState"](options || {});
    let result = state.handle(tree);
    const body = state.esm;
    if (result) {
        if (result.type !== 'JSXFragment' && result.type !== 'JSXElement') {
            result = {
                type: 'JSXFragment',
                openingFragment: {
                    type: 'JSXOpeningFragment'
                },
                closingFragment: {
                    type: 'JSXClosingFragment'
                },
                children: [
                    result
                ]
            };
            state.patch(tree, result);
        }
        /** @type {ExpressionStatement} */ // @ts-expect-error Types are wrong (`expression` *can* be JSX).
        const statement = {
            type: 'ExpressionStatement',
            expression: result
        };
        state.patch(tree, statement);
        body.push(statement);
    }
    /** @type {Program} */ const program = {
        type: 'Program',
        body,
        sourceType: 'module',
        comments: state.comments
    };
    state.patch(tree, program);
    return program;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/state.js').ElementAttributeNameCase} ElementAttributeNameCase
 * @typedef {import('./lib/state.js').Handle} Handle
 * @typedef {import('./lib/state.js').Options} Options
 * @typedef {import('./lib/state.js').Space} Space
 * @typedef {import('./lib/state.js').State} State
 * @typedef {import('./lib/state.js').StylePropertyNameCase} StylePropertyNameCase
 */ __turbopack_esm__({
    "defaultHandlers": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["handlers"],
    "toEstree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toEstree"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/handlers/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$2$2e$3$2e$3$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@2.3.3/node_modules/hast-util-to-estree/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/text.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Literal} Literal
 *
 * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer
 *
 * @typedef {import('hast').Text} HastText
 *
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "text": ()=>text
});
'';
function text(node, state) {
    const value = String(node.value || '');
    if (value) {
        /** @type {Literal} */ const result = {
            type: 'Literal',
            value
        };
        state.inherit(node, result);
        /** @type {JsxExpressionContainer} */ const container = {
            type: 'JSXExpressionContainer',
            expression: result
        };
        state.patch(node, container);
        return container;
    }
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/root.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree-jsx').JSXFragment} JsxFragment
 *
 * @typedef {import('hast').Root} HastRoot
 *
 * @typedef {import('../state.js').State} State
 */ /**
 * @typedef {JsxFragment['children'][number]} JsxChild
 */ __turbopack_esm__({
    "root": ()=>root
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function root(node, state) {
    const children = state.all(node);
    /** @type {Array<JsxChild>} */ const cleanChildren = [];
    let index = -1;
    /** @type {Array<JsxChild> | undefined} */ let queue;
    // Remove surrounding whitespace nodes from the fragment.
    while(++index < children.length){
        const child = children[index];
        if (child.type === 'JSXExpressionContainer' && child.expression.type === 'Literal' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$whitespace$40$3$2e$0$2e$0$2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["whitespace"](String(child.expression.value))) {
            if (queue) queue.push(child);
        } else {
            if (queue) cleanChildren.push(...queue);
            cleanChildren.push(child);
            queue = [];
        }
    }
    /** @type {JsxFragment} */ const result = {
        type: 'JSXFragment',
        openingFragment: {
            type: 'JSXOpeningFragment'
        },
        closingFragment: {
            type: 'JSXClosingFragment'
        },
        children: cleanChildren
    };
    state.inherit(node, result);
    return result;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm
 *
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "mdxjsEsm": ()=>mdxjsEsm
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-attach-comments@3.0.0/node_modules/estree-util-attach-comments/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function mdxjsEsm(node, state) {
    const estree = node.data && node.data.estree;
    const comments = estree && estree.comments || [];
    if (estree) {
        state.comments.push(...comments);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"](estree, comments);
        state.esm.push(...estree.body);
    }
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Expression} Expression
 *
 * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute
 * @typedef {import('estree-jsx').JSXElement} JsxElement
 * @typedef {import('estree-jsx').JSXFragment} JsxFragment
 * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute
 *
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement
 *
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "mdxJsxElement": ()=>mdxJsxElement
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-attach-comments@3.0.0/node_modules/estree-util-attach-comments/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
function mdxJsxElement(node, state) {
    const parentSchema = state.schema;
    let schema = parentSchema;
    const attrs = node.attributes || [];
    let index = -1;
    if (node.name && parentSchema.space === 'html' && node.name.toLowerCase() === 'svg') {
        schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["svg"];
        state.schema = schema;
    }
    const children = state.all(node);
    /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */ const attributes = [];
    while(++index < attrs.length){
        const attr = attrs[index];
        const value = attr.value;
        /** @type {JsxAttribute['value']} */ let attributeValue;
        if (attr.type === 'mdxJsxAttribute') {
            if (value === null || value === undefined) {
                attributeValue = null;
            // Empty.
            } else if (typeof value === 'object') {
                const estree = value.data && value.data.estree;
                const comments = estree && estree.comments || [];
                /** @type {Expression | undefined} */ let expression;
                if (estree) {
                    state.comments.push(...comments);
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"](estree, estree.comments);
                    // Should exist.
                    /* c8 ignore next 5 */ expression = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression || undefined;
                }
                attributeValue = {
                    type: 'JSXExpressionContainer',
                    expression: expression || {
                        type: 'JSXEmptyExpression'
                    }
                };
                state.inherit(value, attributeValue);
            } else {
                attributeValue = {
                    type: 'Literal',
                    value: String(value)
                };
            }
            /** @type {JsxAttribute} */ const attribute = {
                type: 'JSXAttribute',
                name: state.createJsxAttributeName(attr.name),
                value: attributeValue
            };
            state.inherit(attr, attribute);
            attributes.push(attribute);
        } else {
            const estree = attr.data && attr.data.estree;
            const comments = estree && estree.comments || [];
            /** @type {JsxSpreadAttribute['argument'] | undefined} */ let argumentValue;
            if (estree) {
                state.comments.push(...comments);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"](estree, estree.comments);
                // Should exist.
                /* c8 ignore next 10 */ argumentValue = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression && estree.body[0].expression.type === 'ObjectExpression' && estree.body[0].expression.properties && estree.body[0].expression.properties[0] && estree.body[0].expression.properties[0].type === 'SpreadElement' && estree.body[0].expression.properties[0].argument || undefined;
            }
            /** @type {JsxSpreadAttribute} */ const attribute = {
                type: 'JSXSpreadAttribute',
                argument: argumentValue || {
                    type: 'ObjectExpression',
                    properties: []
                }
            };
            state.inherit(attr, attribute);
            attributes.push(attribute);
        }
    }
    // Restore parent schema.
    state.schema = parentSchema;
    /** @type {JsxElement | JsxFragment} */ const result = node.name ? {
        type: 'JSXElement',
        openingElement: {
            type: 'JSXOpeningElement',
            attributes,
            name: state.createJsxElementName(node.name),
            selfClosing: children.length === 0
        },
        closingElement: children.length > 0 ? {
            type: 'JSXClosingElement',
            name: state.createJsxElementName(node.name)
        } : null,
        children
    } : {
        type: 'JSXFragment',
        openingFragment: {
            type: 'JSXOpeningFragment'
        },
        closingFragment: {
            type: 'JSXClosingFragment'
        },
        children
    };
    state.inherit(node, result);
    return result;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Expression} Expression
 *
 * @typedef {import('estree-jsx').JSXEmptyExpression} JsxEmptyExpression
 * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer
 *
 * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression
 * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression
 *
 * @typedef {import('../state.js').State} State
 */ __turbopack_esm__({
    "mdxExpression": ()=>mdxExpression
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-attach-comments@3.0.0/node_modules/estree-util-attach-comments/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function mdxExpression(node, state) {
    const estree = node.data && node.data.estree;
    const comments = estree && estree.comments || [];
    /** @type {Expression | JsxEmptyExpression | undefined} */ let expression;
    if (estree) {
        state.comments.push(...comments);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$attach$2d$comments$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$attach$2d$comments$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["attachComments"](estree, estree.comments);
        expression = estree.body[0] && estree.body[0].type === 'ExpressionStatement' && estree.body[0].expression || undefined;
    }
    if (!expression) {
        expression = {
            type: 'JSXEmptyExpression'
        };
        state.patch(node, expression);
    }
    /** @type {JsxExpressionContainer} */ const result = {
        type: 'JSXExpressionContainer',
        expression
    };
    state.inherit(node, result);
    return result;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/element.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Property} Property
 *
 * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute
 * @typedef {import('estree-jsx').JSXElement} JsxElement
 * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute
 *
 * @typedef {import('hast').Element} HastElement
 *
 * @typedef {import('../state.js').State} State
 */ /**
 * @typedef {Record<string, string>} Style
 */ __turbopack_esm__({
    "element": ()=>element
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$comma$2d$separated$2d$tokens$40$2$2e$0$2e$3$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$space$2d$separated$2d$tokens$40$2$2e$0$2e$2$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$style$2d$to$2d$object$40$0$2e$4$2e$4$2f$node_modules$2f$style$2d$to$2d$object$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/style-to-object@0.4.4/node_modules/style-to-object/index.mjs [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
const own = {}.hasOwnProperty;
const cap = /[A-Z]/g;
const dashSomething = /-([a-z])/g;
const tableCellElement = new Set([
    'td',
    'th'
]);
function element(node, state) {
    const parentSchema = state.schema;
    let schema = parentSchema;
    const props = node.properties || {};
    if (parentSchema.space === 'html' && node.tagName.toLowerCase() === 'svg') {
        schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["svg"];
        state.schema = schema;
    }
    const children = state.all(node);
    /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */ const attributes = [];
    /** @type {string} */ let prop;
    /** @type {string | undefined} */ let alignValue;
    /** @type {Array<Property> | undefined} */ let styleProperties;
    for(prop in props){
        if (own.call(props, prop)) {
            let value = props[prop];
            const info = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["find"](schema, prop);
            /** @type {JsxAttribute['value']} */ let attributeValue;
            // Ignore nullish and `NaN` values.
            // Ignore `false` and falsey known booleans.
            if (value === null || value === undefined || value === false || typeof value === 'number' && Number.isNaN(value) || !value && info.boolean) {
                continue;
            }
            prop = state.elementAttributeNameCase === 'react' && info.space ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["hastToReact"][info.property] || info.property : info.attribute;
            if (Array.isArray(value)) {
                // Accept `array`.
                // Most props are space-separated.
                value = info.commaSeparated ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$comma$2d$separated$2d$tokens$40$2$2e$0$2e$3$2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringify"](value) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$space$2d$separated$2d$tokens$40$2$2e$0$2e$2$2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["stringify"](value);
            }
            if (prop === 'style') {
                let styleObject = typeof value === 'object' ? value : parseStyle(String(value), node.tagName);
                if (state.stylePropertyNameCase === 'css') {
                    styleObject = transformStylesToCssCasing(styleObject);
                }
                /** @type {Array<Property>} */ const cssProperties = [];
                /** @type {string} */ let cssProp;
                for(cssProp in styleObject){
                    // eslint-disable-next-line max-depth
                    if (own.call(styleObject, cssProp)) {
                        cssProperties.push({
                            type: 'Property',
                            method: false,
                            shorthand: false,
                            computed: false,
                            key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"](cssProp) ? {
                                type: 'Identifier',
                                name: cssProp
                            } : {
                                type: 'Literal',
                                value: cssProp
                            },
                            value: {
                                type: 'Literal',
                                value: String(styleObject[cssProp])
                            },
                            kind: 'init'
                        });
                    }
                }
                styleProperties = cssProperties;
                attributeValue = {
                    type: 'JSXExpressionContainer',
                    expression: {
                        type: 'ObjectExpression',
                        properties: cssProperties
                    }
                };
            } else if (value === true) {
                attributeValue = null;
            } else if (state.tableCellAlignToStyle && tableCellElement.has(node.tagName) && prop === 'align') {
                alignValue = String(value);
                continue;
            } else {
                attributeValue = {
                    type: 'Literal',
                    value: String(value)
                };
            }
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"](prop, {
                jsx: true
            })) {
                attributes.push({
                    type: 'JSXAttribute',
                    name: {
                        type: 'JSXIdentifier',
                        name: prop
                    },
                    value: attributeValue
                });
            } else {
                attributes.push({
                    type: 'JSXSpreadAttribute',
                    argument: {
                        type: 'ObjectExpression',
                        properties: [
                            {
                                type: 'Property',
                                method: false,
                                shorthand: false,
                                computed: false,
                                key: {
                                    type: 'Literal',
                                    value: String(prop)
                                },
                                // @ts-expect-error No need to worry about `style` (which has a
                                // `JSXExpressionContainer` value) because that’s a valid identifier.
                                value: attributeValue || {
                                    type: 'Literal',
                                    value: true
                                },
                                kind: 'init'
                            }
                        ]
                    }
                });
            }
        }
    }
    if (alignValue !== undefined) {
        if (!styleProperties) {
            styleProperties = [];
            attributes.push({
                type: 'JSXAttribute',
                name: {
                    type: 'JSXIdentifier',
                    name: 'style'
                },
                value: {
                    type: 'JSXExpressionContainer',
                    expression: {
                        type: 'ObjectExpression',
                        properties: styleProperties
                    }
                }
            });
        }
        const cssProp = state.stylePropertyNameCase === 'css' ? transformStyleToCssCasing('textAlign') : 'textAlign';
        styleProperties.push({
            type: 'Property',
            method: false,
            shorthand: false,
            computed: false,
            key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["name"](cssProp) ? {
                type: 'Identifier',
                name: cssProp
            } : {
                type: 'Literal',
                value: cssProp
            },
            value: {
                type: 'Literal',
                value: alignValue
            },
            kind: 'init'
        });
    }
    // Restore parent schema.
    state.schema = parentSchema;
    /** @type {JsxElement} */ const result = {
        type: 'JSXElement',
        openingElement: {
            type: 'JSXOpeningElement',
            attributes,
            name: state.createJsxElementName(node.tagName),
            selfClosing: children.length === 0
        },
        closingElement: children.length > 0 ? {
            type: 'JSXClosingElement',
            name: state.createJsxElementName(node.tagName)
        } : null,
        children
    };
    state.inherit(node, result);
    return result;
}
/**
 * Parse CSS rules as a declaration.
 *
 * @param {string} value
 *   CSS text.
 * @param {string} tagName
 *   Element name.
 * @returns {Style}
 *   Props.
 */ function parseStyle(value, tagName) {
    /** @type {Style} */ const result = {};
    try {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$style$2d$to$2d$object$40$0$2e$4$2e$4$2f$node_modules$2f$style$2d$to$2d$object$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["default"](value, iterator);
    } catch (error) {
        const cause = error;
        const exception = new Error('Could not parse `style` attribute on `' + tagName + '`', {
            cause
        });
        throw exception;
    }
    return result;
    /**
   * Add `name`, as a CSS prop, to `result`.
   *
   * @param {string} name
   *   Key.
   * @param {string} value
   *   Value.
   * @returns {undefined}
   *   Nothing.
   */ function iterator(name, value) {
        let key = name;
        if (key.slice(0, 2) !== '--') {
            // See: <https://alanhogan.com/code/vendor-prefixed-css-property-names-in-javascript>
            if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4);
            key = key.replace(dashSomething, toCamel);
        }
        result[key] = value;
    }
}
/**
 * Transform a DOM casing style object to a CSS casing style object.
 *
 * @param {Style} domCasing
 * @returns {Style}
 */ function transformStylesToCssCasing(domCasing) {
    /** @type {Style} */ const cssCasing = {};
    /** @type {string} */ let from;
    for(from in domCasing){
        if (own.call(domCasing, from)) {
            cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
        }
    }
    return cssCasing;
}
/**
 * Transform a DOM casing style prop to a CSS casing style prop.
 *
 * @param {string} from
 * @returns {string}
 */ function transformStyleToCssCasing(from) {
    let to = from.replace(cap, toDash);
    // Handle `ms-xxx` -> `-ms-xxx`.
    if (to.slice(0, 3) === 'ms-') to = '-' + to;
    return to;
}
/**
 * Make `$1` capitalized.
 *
 * @param {string} _
 *   Whatever.
 * @param {string} $1
 *   Single ASCII alphabetical.
 * @returns {string}
 *   Capitalized `$1`.
 */ function toCamel(_, $1) {
    return $1.toUpperCase();
}
/**
 * Make `$0` dash cased.
 *
 * @param {string} $0
 *   Capitalized ASCII leter.
 * @returns {string}
 *   Dash and lower letter.
 */ function toDash($0) {
    return '-' + $0.toLowerCase();
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/comment.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Comment} Comment
 *
 * @typedef {import('estree-jsx').JSXEmptyExpression} JsxEmptyExpression
 * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer
 *
 * @typedef {import('hast').Comment} HastComment
 *
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
__turbopack_esm__({
    "comment": ()=>comment
});
'';
function comment(node, state) {
    /** @type {Comment} */ const result = {
        type: 'Block',
        value: node.value
    };
    state.inherit(node, result);
    state.comments.push(result);
    /** @type {JsxEmptyExpression} */ const expression = {
        type: 'JSXEmptyExpression',
        // @ts-expect-error: `comments` is custom.
        comments: [
            Object.assign({}, result, {
                leading: false,
                trailing: true
            })
        ]
    };
    state.patch(node, expression);
    /** @type {JsxExpressionContainer} */ const container = {
        type: 'JSXExpressionContainer',
        expression
    };
    state.patch(node, container);
    return container;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "handlers": ()=>handlers
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$comment$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/comment.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/element.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdxjs$2d$esm$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$root$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/root.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$text$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/text.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
const handlers = {
    comment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$comment$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["comment"],
    doctype: ignore,
    element: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["element"],
    mdxFlowExpression: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpression"],
    mdxJsxFlowElement: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxElement"],
    mdxJsxTextElement: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$jsx$2d$element$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsxElement"],
    mdxTextExpression: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdx$2d$expression$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxExpression"],
    mdxjsEsm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$mdxjs$2d$esm$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxjsEsm"],
    root: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$root$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["root"],
    text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$text$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["text"]
};
/**
 * Handle a node that is ignored.
 *
 * @returns {undefined}
 *   Nothing.
 */ function ignore() {}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/state.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('estree').Comment} Comment
 * @typedef {import('estree').Directive} Directive
 * @typedef {import('estree').ModuleDeclaration} ModuleDeclaration
 * @typedef {import('estree').Node} EstreeNode
 * @typedef {import('estree').Statement} Statement
 *
 * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute
 * @typedef {import('estree-jsx').JSXElement} JsxElement
 * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier
 * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression
 * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName
 *
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttribute} MdxJsxAttribute
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression
 * @typedef {import('mdast-util-mdx-jsx').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute
 *
 * @typedef {import('hast').Nodes} HastNodes
 * @typedef {import('hast').Parents} HastParents
 *
 * @typedef {import('property-information').Schema} Schema
 */ /**
 * @typedef {JsxElement['openingElement']['name']} JsxElementName
 * @typedef {JsxAttribute['name']} JsxAttributeName
 * @typedef {JsxElement['children'][number]} JsxChild
 */ /**
 * @typedef {'html' | 'react'} ElementAttributeNameCase
 *   Specify casing to use for attribute names.
 *
 *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.
 *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.
 *
 * @callback Handle
 *   Turn a hast node into an estree node.
 * @param {any} node
 *   Expected hast node.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {JsxChild | null | undefined}
 *   estree node.
 *
 * @typedef Options
 *   Configuration.
 * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']
 *   Specify casing to use for attribute names (default: `'react'`).
 *
 *   This casing is used for hast elements, not for embedded MDX JSX nodes
 *   (components that someone authored manually).
 * @property {Record<string, Handle | null | undefined> | null | undefined} [handlers={}]
 *   Custom handlers (optional).
 * @property {Space | null | undefined} [space='html']
 *   Which space the document is in (default: `'html'`).
 *
 *   When an `<svg>` element is found in the HTML space, this package already
 *   automatically switches to and from the SVG space when entering and exiting
 *   it.
 * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']
 *   Specify casing to use for property names in `style` objects (default: `'dom'`).
 *
 *   This casing is used for hast elements, not for embedded MDX JSX nodes
 *   (components that someone authored manually).
 * @property {boolean | null | undefined} [tableCellAlignToStyle=true]
 *   Turn obsolete `align` props on `td` and `th` into CSS `style` props
 *   (default: `true`).
 *
 * @typedef {'html' | 'svg'} Space
 *   Namespace.
 *
 * @typedef {'css' | 'dom'} StylePropertyNameCase
 *   Casing to use for property names in `style` objects.
 *
 *   CSS casing is for example `background-color` and `-webkit-line-clamp`.
 *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.
 *
 * @typedef State
 *   Info passed around about the current state.
 * @property {(parent: HastParents) => Array<JsxChild>} all
 *   Transform children of a hast parent to estree.
 * @property {Array<Comment>} comments
 *   List of estree comments.
 * @property {(name: string) => JsxAttributeName} createJsxAttributeName
 *   Create a JSX attribute name.
 * @property {(name: string) => JsxElementName} createJsxElementName
 *   Create a JSX element name.
 * @property {ElementAttributeNameCase} elementAttributeNameCase
 *   Casing to use for attribute names.
 * @property {Array<Directive | ModuleDeclaration | Statement>} esm
 *   List of top-level estree nodes.
 * @property {(node: any) => JsxChild | null | undefined} handle
 *   Transform a hast node to estree.
 * @property {(from: HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute, to: Comment | EstreeNode) => undefined} inherit
 *   Take positional info and data from `from` (use `patch` if you don’t want data).
 * @property {(from: HastNodes, to: Comment | EstreeNode) => undefined} patch
 *   Take positional info from `from` (use `inherit` if you also want data).
 * @property {Schema} schema
 *   Current schema.
 * @property {StylePropertyNameCase} stylePropertyNameCase
 *   Casing to use for property names in `style` objects.
 * @property {boolean} tableCellAlignToStyle
 *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.
 */ __turbopack_esm__({
    "createState": ()=>createState
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/property-information@6.4.0/node_modules/property-information/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$zwitch$40$2$2e$0$2e$4$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
const own = {}.hasOwnProperty;
// `react-dom` triggers a warning for *any* white space in tables.
// To follow GFM, `mdast-util-to-hast` injects line endings between elements.
// Other tools might do so too, but they don’t do here, so we remove all of
// that.
//
// See: <https://github.com/facebook/react/pull/7081>.
// See: <https://github.com/facebook/react/pull/7515>.
// See: <https://github.com/remarkjs/remark-react/issues/64>.
// See: <https://github.com/rehypejs/rehype-react/pull/29>.
// See: <https://github.com/rehypejs/rehype-react/pull/32>.
// See: <https://github.com/rehypejs/rehype-react/pull/45>.
// See: <https://github.com/mdx-js/mdx/issues/2000>
const tableElements = new Set([
    'table',
    'tbody',
    'thead',
    'tfoot',
    'tr'
]);
function createState(options) {
    /** @type {Handle} */ const one = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$zwitch$40$2$2e$0$2e$4$2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["zwitch"]('type', {
        invalid,
        unknown,
        handlers: {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["handlers"],
            ...options.handlers
        }
    });
    return {
        // Current space.
        elementAttributeNameCase: options.elementAttributeNameCase || 'react',
        schema: options.space === 'svg' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["svg"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$property$2d$information$40$6$2e$4$2e$0$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["html"],
        stylePropertyNameCase: options.stylePropertyNameCase || 'dom',
        tableCellAlignToStyle: options.tableCellAlignToStyle !== false,
        // Results.
        comments: [],
        esm: [],
        // Useful functions.
        all,
        createJsxAttributeName,
        createJsxElementName,
        handle,
        inherit,
        patch
    };
    /**
   * @this {State}
   * @param {any} node
   * @returns {JsxChild | null | undefined}
   */ function handle(node) {
        return one(node, this);
    }
}
/**
 * Crash on an invalid value.
 *
 * @param {unknown} value
 *   Non-node.
 * @returns {never}
 *   Nothing (crashes).
 */ function invalid(value) {
    throw new Error('Cannot handle value `' + value + '`, expected node');
}
/**
 * Crash on an unknown node.
 *
 * @param {unknown} node
 *   Unknown node.
 * @returns {never}
 *   Nothing (crashes).
 */ function unknown(node) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](node && typeof node === 'object');
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"]('type' in node);
    throw new Error('Cannot handle unknown node `' + node.type + '`');
}
/**
 * @this {State} state
 *   Info passed around about the current state.
 * @param {HastParents} parent
 *   hast node whose children to transform.
 * @returns {Array<JsxChild>}
 *   estree nodes.
 */ function all(parent) {
    const children = parent.children || [];
    let index = -1;
    /** @type {Array<JsxChild>} */ const results = [];
    const ignoreLineBreak = this.schema.space === 'html' && parent.type === 'element' && tableElements.has(parent.tagName.toLowerCase());
    while(++index < children.length){
        const child = children[index];
        if (ignoreLineBreak && child.type === 'text' && child.value === '\n') {
            continue;
        }
        const result = this.handle(child);
        if (Array.isArray(result)) {
            results.push(...result);
        } else if (result) {
            results.push(result);
        }
    }
    return results;
}
/**
 * Take positional info and data from `hast`.
 *
 * Use `patch` if you don’t want data.
 *
 * @param {HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute} from
 *   hast node to take positional info and data from.
 * @param {Comment | EstreeNode} to
 *   estree node to add positional info and data to.
 * @returns {undefined}
 *   Nothing.
 */ function inherit(from, to) {
    const left = from.data;
    /** @type {Record<string, unknown> | undefined} */ let right;
    /** @type {string} */ let key;
    patch(from, to);
    if (left) {
        for(key in left){
            if (own.call(left, key) && key !== 'estree') {
                if (!right) right = {};
                right[key] = left[key];
            }
        }
        if (right) {
            // @ts-expect-error `esast` extension.
            to.data = right;
        }
    }
}
/**
 * Take positional info from `from`.
 *
 * Use `inherit` if you also want data.
 *
 * @param {HastNodes | MdxJsxAttribute | MdxJsxAttributeValueExpression | MdxJsxExpressionAttribute} from
 *   hast node to take positional info from.
 * @param {Comment | EstreeNode} to
 *   estree node to add positional info to.
 * @returns {undefined}
 *   Nothing.
 */ function patch(from, to) {
    const p = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$unist$2d$util$2d$position$40$5$2e$0$2e$0$2f$node_modules$2f$unist$2d$util$2d$position$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["position"](from);
    if (p && p.start.offset !== undefined && p.end.offset !== undefined) {
        // @ts-expect-error acorn-style.
        to.start = p.start.offset;
        // @ts-expect-error acorn-style.
        to.end = p.end.offset;
        to.loc = {
            start: {
                line: p.start.line,
                column: p.start.column - 1
            },
            end: {
                line: p.end.line,
                column: p.end.column - 1
            }
        };
        to.range = [
            p.start.offset,
            p.end.offset
        ];
    }
}
/**
 * Create a JSX attribute name.
 *
 * @param {string} name
 * @returns {JsxAttributeName}
 */ function createJsxAttributeName(name) {
    const node = createJsxNameFromString(name);
    // MDX never generates this.
    /* c8 ignore next 3 */ if (node.type === 'JSXMemberExpression') {
        throw new Error('Member expressions in attribute names are not supported');
    }
    return node;
}
/**
 * Create a JSX element name.
 *
 * @param {string} name
 * @returns {JsxElementName}
 */ function createJsxElementName(name) {
    return createJsxNameFromString(name);
}
/**
 * Create a JSX name from a string.
 *
 * @param {string} name
 *   Name.
 * @returns {JsxIdentifier | JsxMemberExpression | JsxNamespacedName}
 *   Node.
 */ function createJsxNameFromString(name) {
    if (name.includes('.')) {
        const names = name.split('.');
        let part = names.shift();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](part, 'Expected `part` to be defined');
        /** @type {JsxIdentifier | JsxMemberExpression} */ let node = {
            type: 'JSXIdentifier',
            name: part
        };
        while(part = names.shift()){
            node = {
                type: 'JSXMemberExpression',
                object: node,
                property: {
                    type: 'JSXIdentifier',
                    name: part
                }
            };
        }
        return node;
    }
    if (name.includes(':')) {
        const parts = name.split(':');
        return {
            type: 'JSXNamespacedName',
            namespace: {
                type: 'JSXIdentifier',
                name: parts[0]
            },
            name: {
                type: 'JSXIdentifier',
                name: parts[1]
            }
        };
    }
    return {
        type: 'JSXIdentifier',
        name
    };
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * Register MDX nodes in tree:
 *
 * @typedef {import('mdast-util-mdx-expression')}
 * @typedef {import('mdast-util-mdx-jsx')}
 * @typedef {import('mdast-util-mdxjs-esm')}
 */ /**
 * @typedef {import('estree').ExpressionStatement} ExpressionStatement
 * @typedef {import('estree').Program} Program
 *
 * @typedef {import('hast').Nodes} HastNodes
 *
 * @typedef {import('./state.js').Options} Options
 */ __turbopack_esm__({
    "toEstree": ()=>toEstree
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$state$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/state.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function toEstree(tree, options) {
    const state = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$state$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["createState"](options || {});
    let result = state.handle(tree);
    const body = state.esm;
    if (result) {
        if (result.type !== 'JSXFragment' && result.type !== 'JSXElement') {
            result = {
                type: 'JSXFragment',
                openingFragment: {
                    type: 'JSXOpeningFragment'
                },
                closingFragment: {
                    type: 'JSXClosingFragment'
                },
                children: [
                    result
                ]
            };
            state.patch(tree, result);
        }
        /** @type {ExpressionStatement} */ // @ts-expect-error: `estree` types don’t allow JSX.
        const statement = {
            type: 'ExpressionStatement',
            expression: result
        };
        state.patch(tree, statement);
        body.push(statement);
    }
    /** @type {Program} */ const program = {
        type: 'Program',
        body,
        sourceType: 'module',
        comments: state.comments
    };
    state.patch(tree, program);
    return program;
}

})()),
"[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('./lib/state.js').ElementAttributeNameCase} ElementAttributeNameCase
 * @typedef {import('./lib/state.js').Handle} Handle
 * @typedef {import('./lib/state.js').Options} Options
 * @typedef {import('./lib/state.js').Space} Space
 * @typedef {import('./lib/state.js').State} State
 * @typedef {import('./lib/state.js').StylePropertyNameCase} StylePropertyNameCase
 */ __turbopack_esm__({
    "defaultHandlers": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["handlers"],
    "toEstree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["toEstree"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$handlers$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/handlers/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$hast$2d$util$2d$to$2d$estree$40$3$2e$1$2e$0$2f$node_modules$2f$hast$2d$util$2d$to$2d$estree$2f$lib$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/hast-util-to-estree@3.1.0/node_modules/hast-util-to-estree/lib/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;

})()),

};

//# sourceMappingURL=node_modules__pnpm_af3a46._.js.map