module.exports = {

"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn
 * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factoryTag": ()=>factoryTag
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@2.1.0/node_modules/estree-util-is-identifier-name/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$1$2e$0$2e$9$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-mdx-expression@1.0.9/node_modules/micromark-factory-mdx-expression/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/constants.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
function factoryTag(effects, ok, nok, acorn, acornOptions, addResult, allowLazy, tagType, tagMarkerType, tagClosingMarkerType, tagSelfClosingMarker, tagNameType, tagNamePrimaryType, tagNameMemberMarkerType, tagNameMemberType, tagNamePrefixMarkerType, tagNameLocalType, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, tagAttributeType, tagAttributeNameType, tagAttributeNamePrimaryType, tagAttributeNamePrefixMarkerType, tagAttributeNameLocalType, tagAttributeInitializerMarkerType, tagAttributeValueLiteralType, tagAttributeValueLiteralMarkerType, tagAttributeValueLiteralValueType, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType) {
    const self = this;
    /** @type {State} */ let returnState;
    /** @type {NonNullable<Code> | undefined} */ let marker;
    return start;
    /**
   * Start of MDX: JSX.
   *
   * ```markdown
   * > | a <B /> c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan, 'expected `<`');
        effects.enter(tagType);
        effects.enter(tagMarkerType);
        effects.consume(code);
        effects.exit(tagMarkerType);
        return startAfter;
    }
    /**
   * After `<`.
   *
   * ```markdown
   * > | a <B /> c
   *        ^
   * ```
   *
   * @type {State}
   */ function startAfter(code) {
        // Deviate from JSX, which allows arbitrary whitespace.
        // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code)) {
            return nok(code);
        }
        // Any other ES whitespace does not get this treatment.
        returnState = nameBefore;
        return esWhitespaceStart(code);
    }
    /**
   * Before name, self slash, or end of tag for fragments.
   *
   * ```markdown
   * > | a <B> c
   *        ^
   * > | a </B> c
   *        ^
   * > | a <> b
   *        ^
   * ```
   *
   * @type {State}
   */ function nameBefore(code) {
        // Closing tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash) {
            effects.enter(tagClosingMarkerType);
            effects.consume(code);
            effects.exit(tagClosingMarkerType);
            returnState = closingTagNameBefore;
            return esWhitespaceStart;
        }
        // Fragment opening tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Start of a name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagNameType);
            effects.enter(tagNamePrimaryType);
            effects.consume(code);
            return primaryName;
        }
        crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].exclamationMark ? ' (note: to create a comment in MDX, use `{/* text */}`)' : ''));
    }
    /**
   * Before name of closing tag or end of closing fragment tag.
   *
   * ```markdown
   * > | a </> b
   *         ^
   * > | a </B> c
   *         ^
   * ```
   *
   * @type {State}
   */ function closingTagNameBefore(code) {
        // Fragment closing tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Start of a closing tag name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagNameType);
            effects.enter(tagNamePrimaryType);
            effects.consume(code);
            return primaryName;
        }
        crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));
    }
    /**
   * In primary name.
   *
   * ```markdown
   * > | a <Bc> d
   *         ^
   * ```
   *
   * @type {State}
   */ function primaryName(code) {
        // Continuation of name: remain.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dash || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code)) {
            effects.consume(code);
            return primaryName;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagNamePrimaryType);
            returnState = primaryNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].atSign ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * After primary name.
   *
   * ```markdown
   * > | a <b.c> d
   *         ^
   * > | a <b:c> d
   *         ^
   * ```
   *
   * @type {State}
   */ function primaryNameAfter(code) {
        // Start of a member name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot) {
            effects.enter(tagNameMemberMarkerType);
            effects.consume(code);
            effects.exit(tagNameMemberMarkerType);
            returnState = memberNameBefore;
            return esWhitespaceStart;
        }
        // Start of a local name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            effects.enter(tagNamePrefixMarkerType);
            effects.consume(code);
            effects.exit(tagNamePrefixMarkerType);
            returnState = localNameBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Before member name.
   *
   * ```markdown
   * > | a <b.c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function memberNameBefore(code) {
        // Start of a member name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagNameMemberType);
            effects.consume(code);
            return memberName;
        }
        crash(code, 'before member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * In member name.
   *
   * ```markdown
   * > | a <b.cd> e
   *           ^
   * ```
   *
   * @type {State}
   */ function memberName(code) {
        // Continuation of name: remain.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dash || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code)) {
            effects.consume(code);
            return memberName;
        }
        // End of name.
        // Note: no `:` allowed here.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagNameMemberType);
            returnState = memberNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in member name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].atSign ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * After member name.
   *
   * ```markdown
   * > | a <b.c> d
   *           ^
   * > | a <b.c.d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function memberNameAfter(code) {
        // Start another member name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot) {
            effects.enter(tagNameMemberMarkerType);
            effects.consume(code);
            effects.exit(tagNameMemberMarkerType);
            returnState = memberNameBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Local member name.
   *
   * ```markdown
   * > | a <b:c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function localNameBefore(code) {
        // Start of a local name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagNameLocalType);
            effects.consume(code);
            return localName;
        }
        crash(code, 'before local name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].plusSign || code !== null && code > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot && code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * In local name.
   *
   * ```markdown
   * > | a <b:cd> e
   *           ^
   * ```
   *
   * @type {State}
   */ function localName(code) {
        // Continuation of name: remain.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dash || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code)) {
            effects.consume(code);
            return localName;
        }
        // End of local name (note that we don’t expect another colon, or a member).
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagNameLocalType);
            returnState = localNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in local name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * After local name.
   *
   * This is like as `primary_name_after`, but we don’t expect colons or
   * periods.
   *
   * ```markdown
   * > | a <b.c> d
   *           ^
   * > | a <b.c.d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function localNameAfter(code) {
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after local name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Before attribute.
   *
   * ```markdown
   * > | a <b /> c
   *          ^
   * > | a <b > c
   *          ^
   * > | a <b {...c}> d
   *          ^
   * > | a <b c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function attributeBefore(code) {
        // Self-closing.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash) {
            effects.enter(tagSelfClosingMarker);
            effects.consume(code);
            effects.exit(tagSelfClosingMarker);
            returnState = selfClosing;
            return esWhitespaceStart;
        }
        // End of tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Attribute expression.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$1$2e$0$2e$9$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, attributeExpressionAfter, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, acorn, acornOptions, addResult, true, false, allowLazy)(code);
        }
        // Start of an attribute name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagAttributeType);
            effects.enter(tagAttributeNameType);
            effects.enter(tagAttributeNamePrimaryType);
            effects.consume(code);
            return attributePrimaryName;
        }
        crash(code, 'before attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * After attribute expression.
   *
   * ```markdown
   * > | a <b {c} d/> e
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeExpressionAfter(code) {
        returnState = attributeBefore;
        return esWhitespaceStart(code);
    }
    /**
   * In primary attribute name.
   *
   * ```markdown
   * > | a <b cd/> e
   *           ^
   * > | a <b c:d> e
   *           ^
   * > | a <b c=d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function attributePrimaryName(code) {
        // Continuation of name: remain.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dash || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code)) {
            effects.consume(code);
            return attributePrimaryName;
        }
        // End of attribute name or tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagAttributeNamePrimaryType);
            returnState = attributePrimaryNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');
    }
    /**
   * After primary attribute name.
   *
   * ```markdown
   * > | a <b c/> d
   *           ^
   * > | a <b c:d> e
   *           ^
   * > | a <b c=d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function attributePrimaryNameAfter(code) {
        // Start of a local name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            effects.enter(tagAttributeNamePrefixMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeNamePrefixMarkerType);
            returnState = attributeLocalNameBefore;
            return esWhitespaceStart;
        }
        // Initializer: start of an attribute value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo) {
            effects.exit(tagAttributeNameType);
            effects.enter(tagAttributeInitializerMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeInitializerMarkerType);
            returnState = attributeValueBefore;
            return esWhitespaceStart;
        }
        // End of tag / new attribute.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code) || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagAttributeNameType);
            effects.exit(tagAttributeType);
            returnState = attributeBefore;
            return esWhitespaceStart(code);
        }
        crash(code, 'after attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * Before local attribute name.
   *
   * ```markdown
   * > | a <b c:d/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeLocalNameBefore(code) {
        // Start of a local name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagAttributeNameLocalType);
            effects.consume(code);
            return attributeLocalName;
        }
        crash(code, 'before local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * In local attribute name.
   *
   * ```markdown
   * > | a <b c:de/> f
   *             ^
   * > | a <b c:d=e/> f
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeLocalName(code) {
        // Continuation of name: remain.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dash || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code)) {
            effects.consume(code);
            return attributeLocalName;
        }
        // End of local name (note that we don’t expect another colon).
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagAttributeNameLocalType);
            effects.exit(tagAttributeNameType);
            returnState = attributeLocalNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in local attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');
    }
    /**
   * After local attribute name.
   *
   * ```markdown
   * > | a <b c:d/> f
   *             ^
   * > | a <b c:d=e/> f
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeLocalNameAfter(code) {
        // Start of an attribute value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo) {
            effects.enter(tagAttributeInitializerMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeInitializerMarkerType);
            returnState = attributeValueBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$2$2e$1$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagAttributeType);
            return attributeBefore(code);
        }
        crash(code, 'after local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * After `=`, before value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *            ^
   * > | a <b c={d}/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeValueBefore(code) {
        // Start of double- or single quoted value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].quotationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].apostrophe) {
            effects.enter(tagAttributeValueLiteralType);
            effects.enter(tagAttributeValueLiteralMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeValueLiteralMarkerType);
            marker = code;
            return attributeValueQuotedStart;
        }
        // Attribute value expression.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$1$2e$0$2e$9$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, attributeValueExpressionAfter, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType, acorn, acornOptions, addResult, false, false, allowLazy)(code);
        }
        crash(code, 'before attribute value', 'a character that can start an attribute value, such as `"`, `\'`, or `{`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)' : ''));
    }
    /**
   * After attribute value expression.
   *
   * ```markdown
   * > | a <b c={d} e/> f
   *               ^
   * ```
   *
   * @type {State}
   */ function attributeValueExpressionAfter(code) {
        effects.exit(tagAttributeType);
        returnState = attributeBefore;
        return esWhitespaceStart(code);
    }
    /**
   * Before quoted literal attribute value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeValueQuotedStart(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](marker !== undefined, 'expected `marker` to be defined');
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            crash(code, 'in attribute value', 'a corresponding closing quote `' + String.fromCodePoint(marker) + '`');
        }
        if (code === marker) {
            effects.enter(tagAttributeValueLiteralMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeValueLiteralMarkerType);
            effects.exit(tagAttributeValueLiteralType);
            effects.exit(tagAttributeType);
            marker = undefined;
            returnState = attributeBefore;
            return esWhitespaceStart;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            returnState = attributeValueQuotedStart;
            return esWhitespaceStart(code);
        }
        effects.enter(tagAttributeValueLiteralValueType);
        return attributeValueQuoted(code);
    }
    /**
   * In quoted literal attribute value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeValueQuoted(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === marker || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.exit(tagAttributeValueLiteralValueType);
            return attributeValueQuotedStart(code);
        }
        effects.consume(code);
        return attributeValueQuoted;
    }
    /**
   * After self-closing slash.
   *
   * ```markdown
   * > | a <b/> c
   *          ^
   * ```
   *
   * @type {State}
   */ function selfClosing(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        crash(code, 'after self-closing slash', '`>` to end the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));
    }
    /**
   * At final `>`.
   *
   * ```markdown
   * > | a <b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function tagEnd(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan, 'expected `>`');
        effects.enter(tagMarkerType);
        effects.consume(code);
        effects.exit(tagMarkerType);
        effects.exit(tagType);
        return ok;
    }
    /**
   * Before optional ECMAScript whitespace.
   *
   * ```markdown
   * > | a <a b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceStart(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return esWhitespaceEolAfter;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.enter('esWhitespace');
            return esWhitespaceInside(code);
        }
        return returnState(code);
    }
    /**
   * In ECMAScript whitespace.
   *
   * ```markdown
   * > | a <a  b> c
   *          ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceInside(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.exit('esWhitespace');
            return esWhitespaceStart(code);
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.consume(code);
            return esWhitespaceInside;
        }
        effects.exit('esWhitespace');
        return returnState(code);
    }
    /**
   * After eol in whitespace.
   *
   * ```markdown
   * > | a <a\nb> c
   *          ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceEolAfter(code) {
        // Lazy continuation in a flow tag is a syntax error.
        if (!allowLazy && self.parser.lazy[self.now().line]) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc', self.now(), 'micromark-extension-mdx-jsx:unexpected-eof');
        }
        return esWhitespaceStart(code);
    }
    /**
   * Crash at a nonconforming character.
   *
   * @param {Code} code
   * @param {string} at
   * @param {string} expect
   */ function crash(code, at, expect) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$3$2e$1$2e$4$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected ' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? 'end of file' : 'character `' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].graveAccent ? '` ` `' : String.fromCodePoint(code)) + '` (' + serializeCharCode(code) + ')') + ' ' + at + ', expected ' + expect, self.now(), 'micromark-extension-mdx-jsx:unexpected-' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? 'eof' : 'character'));
    }
}
/**
 * @param {NonNullable<Code>} code
 * @returns {string}
 */ function serializeCharCode(code) {
    return 'U+' + code.toString(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$constants$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseHexadecimal).toUpperCase().padStart(4, '0');
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn
 * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ __turbopack_esm__({
    "jsxFlow": ()=>jsxFlow
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-space@1.1.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/types.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/uvu@0.5.6/node_modules/uvu/assert/index.mjs [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
function jsxFlow(acorn, acornOptions, addResult) {
    return {
        tokenize: tokenizeJsxFlow,
        concrete: true
    };
    /**
   * MDX JSX (flow).
   *
   * ```markdown
   * > | <A />
   *     ^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeJsxFlow(effects, ok, nok) {
        const self = this;
        return start;
        /**
     * Start of MDX: JSX (flow).
     *
     * ```markdown
     * > | <A />
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            // To do: in `markdown-rs`, constructs need to parse the indent themselves.
            // This should also be introduced in `micromark-js`.
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$uvu$40$0$2e$5$2e$6$2f$node_modules$2f$uvu$2f$assert$2f$index$2e$mjs__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan, 'expected `<`');
            return before(code);
        }
        /**
     * After optional whitespace, before of MDX JSX (flow).
     *
     * ```markdown
     * > | <A />
     *     ^
     * ```
     *
     * @type {State}
     */ function before(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryTag"].call(self, effects, after, nok, acorn, acornOptions, addResult, false, 'mdxJsxFlowTag', 'mdxJsxFlowTagMarker', 'mdxJsxFlowTagClosingMarker', 'mdxJsxFlowTagSelfClosingMarker', 'mdxJsxFlowTagName', 'mdxJsxFlowTagNamePrimary', 'mdxJsxFlowTagNameMemberMarker', 'mdxJsxFlowTagNameMember', 'mdxJsxFlowTagNamePrefixMarker', 'mdxJsxFlowTagNameLocal', 'mdxJsxFlowTagExpressionAttribute', 'mdxJsxFlowTagExpressionAttributeMarker', 'mdxJsxFlowTagExpressionAttributeValue', 'mdxJsxFlowTagAttribute', 'mdxJsxFlowTagAttributeName', 'mdxJsxFlowTagAttributeNamePrimary', 'mdxJsxFlowTagAttributeNamePrefixMarker', 'mdxJsxFlowTagAttributeNameLocal', 'mdxJsxFlowTagAttributeInitializerMarker', 'mdxJsxFlowTagAttributeValueLiteral', 'mdxJsxFlowTagAttributeValueLiteralMarker', 'mdxJsxFlowTagAttributeValueLiteralValue', 'mdxJsxFlowTagAttributeValueExpression', 'mdxJsxFlowTagAttributeValueExpressionMarker', 'mdxJsxFlowTagAttributeValueExpressionValue')(code);
        }
        /**
     * After an MDX JSX (flow) tag.
     *
     * ```markdown
     * > | <A>
     *        ^
     * ```
     *
     * @type {State}
     */ function after(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factorySpace"](effects, end, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$types$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code) : end(code);
        }
        /**
     * After an MDX JSX (flow) tag, after optional whitespace.
     *
     * ```markdown
     * > | <A> <B>
     *         ^
     * ```
     *
     * @type {State}
     */ function end(code) {
            // Another tag.
            return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan ? start(code) : code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$1$2e$2$2e$0$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code) ? ok(code) : nok(code);
        }
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn
 * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ __turbopack_esm__({
    "jsxText": ()=>jsxText
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function jsxText(acorn, acornOptions, addResult) {
    return {
        tokenize: tokenizeJsxText
    };
    /**
   * MDX JSX (text).
   *
   * ```markdown
   * > | a <b />.
   *       ^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeJsxText(effects, ok, nok) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryTag"].call(this, effects, ok, nok, acorn, acornOptions, addResult, true, 'mdxJsxTextTag', 'mdxJsxTextTagMarker', 'mdxJsxTextTagClosingMarker', 'mdxJsxTextTagSelfClosingMarker', 'mdxJsxTextTagName', 'mdxJsxTextTagNamePrimary', 'mdxJsxTextTagNameMemberMarker', 'mdxJsxTextTagNameMember', 'mdxJsxTextTagNamePrefixMarker', 'mdxJsxTextTagNameLocal', 'mdxJsxTextTagExpressionAttribute', 'mdxJsxTextTagExpressionAttributeMarker', 'mdxJsxTextTagExpressionAttributeValue', 'mdxJsxTextTagAttribute', 'mdxJsxTextTagAttributeName', 'mdxJsxTextTagAttributeNamePrimary', 'mdxJsxTextTagAttributeNamePrefixMarker', 'mdxJsxTextTagAttributeNameLocal', 'mdxJsxTextTagAttributeInitializerMarker', 'mdxJsxTextTagAttributeValueLiteral', 'mdxJsxTextTagAttributeValueLiteralMarker', 'mdxJsxTextTagAttributeValueLiteralValue', 'mdxJsxTextTagAttributeValueExpression', 'mdxJsxTextTagAttributeValueExpressionMarker', 'mdxJsxTextTagAttributeValueExpressionValue');
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn
 * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions
 */ /**
 * @typedef Options
 *   Configuration (optional).
 * @property {Acorn | null | undefined} [acorn]
 *   Acorn parser to use (optional).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for acorn (default: `{ecmaVersion: 2020, locations: true,
 *   sourceType: 'module'}`).
 *
 *   All fields except `locations` can be set.
 * @property {boolean | null | undefined} [addResult=false]
 *   Whether to add `estree` fields to tokens with results from acorn.
 */ __turbopack_esm__({
    "mdxJsx": ()=>mdxJsx
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@1.1.0/node_modules/micromark-util-symbol/codes.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$text$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$flow$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function mdxJsx(options) {
    const settings = options || {};
    const acorn = settings.acorn;
    /** @type {AcornOptions | undefined} */ let acornOptions;
    if (acorn) {
        if (!acorn.parse || !acorn.parseExpressionAt) {
            throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');
        }
        acornOptions = Object.assign({
            ecmaVersion: 2020,
            sourceType: 'module'
        }, settings.acornOptions, {
            locations: true
        });
    } else if (settings.acornOptions || settings.addResult) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan]: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$flow$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["jsxFlow"](acorn || undefined, acornOptions, settings.addResult || false)
        },
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$1$2e$1$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$codes$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan]: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$text$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["jsxText"](acorn || undefined, acornOptions, settings.addResult || false)
        }
    };
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: more types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxJsx": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsx"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$1$2e$0$2e$5$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@1.0.5/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn
 * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').TokenType} TokenType
 */ __turbopack_esm__({
    "factoryTag": ()=>factoryTag
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-mdx-expression@2.0.1/node_modules/micromark-factory-mdx-expression/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/index.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
const trouble = 'https://github.com/micromark/micromark-extension-mdx-jsx';
function factoryTag(effects, ok, nok, acorn, acornOptions, addResult, allowLazy, tagType, tagMarkerType, tagClosingMarkerType, tagSelfClosingMarker, tagNameType, tagNamePrimaryType, tagNameMemberMarkerType, tagNameMemberType, tagNamePrefixMarkerType, tagNameLocalType, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, tagAttributeType, tagAttributeNameType, tagAttributeNamePrimaryType, tagAttributeNamePrefixMarkerType, tagAttributeNameLocalType, tagAttributeInitializerMarkerType, tagAttributeValueLiteralType, tagAttributeValueLiteralMarkerType, tagAttributeValueLiteralValueType, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType) {
    const self = this;
    /** @type {State} */ let returnState;
    /** @type {NonNullable<Code> | undefined} */ let marker;
    return start;
    /**
   * Start of MDX: JSX.
   *
   * ```markdown
   * > | a <B /> c
   *       ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan, 'expected `<`');
        effects.enter(tagType);
        effects.enter(tagMarkerType);
        effects.consume(code);
        effects.exit(tagMarkerType);
        return startAfter;
    }
    /**
   * After `<`.
   *
   * ```markdown
   * > | a <B /> c
   *        ^
   * ```
   *
   * @type {State}
   */ function startAfter(code) {
        // Deviate from JSX, which allows arbitrary whitespace.
        // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code)) {
            return nok(code);
        }
        // Any other ES whitespace does not get this treatment.
        returnState = nameBefore;
        return esWhitespaceStart(code);
    }
    /**
   * Before name, self slash, or end of tag for fragments.
   *
   * ```markdown
   * > | a <B> c
   *        ^
   * > | a </B> c
   *        ^
   * > | a <> b
   *        ^
   * ```
   *
   * @type {State}
   */ function nameBefore(code) {
        // Closing tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash) {
            effects.enter(tagClosingMarkerType);
            effects.consume(code);
            effects.exit(tagClosingMarkerType);
            returnState = closingTagNameBefore;
            return esWhitespaceStart;
        }
        // Fragment opening tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Start of a name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagNameType);
            effects.enter(tagNamePrimaryType);
            effects.consume(code);
            return primaryName;
        }
        crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].exclamationMark ? ' (note: to create a comment in MDX, use `{/* text */}`)' : ''));
    }
    /**
   * Before name of closing tag or end of closing fragment tag.
   *
   * ```markdown
   * > | a </> b
   *         ^
   * > | a </B> c
   *         ^
   * ```
   *
   * @type {State}
   */ function closingTagNameBefore(code) {
        // Fragment closing tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Start of a closing tag name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagNameType);
            effects.enter(tagNamePrimaryType);
            effects.consume(code);
            return primaryName;
        }
        crash(code, 'before name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));
    }
    /**
   * In primary name.
   *
   * ```markdown
   * > | a <Bc> d
   *         ^
   * ```
   *
   * @type {State}
   */ function primaryName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code, {
            jsx: true
        })) {
            effects.consume(code);
            return primaryName;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagNamePrimaryType);
            returnState = primaryNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].atSign ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * After primary name.
   *
   * ```markdown
   * > | a <b.c> d
   *         ^
   * > | a <b:c> d
   *         ^
   * ```
   *
   * @type {State}
   */ function primaryNameAfter(code) {
        // Start of a member name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot) {
            effects.enter(tagNameMemberMarkerType);
            effects.consume(code);
            effects.exit(tagNameMemberMarkerType);
            returnState = memberNameBefore;
            return esWhitespaceStart;
        }
        // Start of a local name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            effects.enter(tagNamePrefixMarkerType);
            effects.consume(code);
            effects.exit(tagNamePrefixMarkerType);
            returnState = localNameBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Before member name.
   *
   * ```markdown
   * > | a <b.c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function memberNameBefore(code) {
        // Start of a member name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagNameMemberType);
            effects.consume(code);
            return memberName;
        }
        crash(code, 'before member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * In member name.
   *
   * ```markdown
   * > | a <b.cd> e
   *           ^
   * ```
   *
   * @type {State}
   */ function memberName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code, {
            jsx: true
        })) {
            effects.consume(code);
            return memberName;
        }
        // End of name.
        // Note: no `:` allowed here.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagNameMemberType);
            returnState = memberNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in member name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].atSign ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * After member name.
   *
   * ```markdown
   * > | a <b.c> d
   *           ^
   * > | a <b.c.d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function memberNameAfter(code) {
        // Start another member name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot) {
            effects.enter(tagNameMemberMarkerType);
            effects.consume(code);
            effects.exit(tagNameMemberMarkerType);
            returnState = memberNameBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after member name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Local member name.
   *
   * ```markdown
   * > | a <b:c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function localNameBefore(code) {
        // Start of a local name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagNameLocalType);
            effects.consume(code);
            return localName;
        }
        crash(code, 'before local name', 'a character that can start a name, such as a letter, `$`, or `_`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].plusSign || code !== null && code > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].dot && code < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon ? ' (note: to create a link in MDX, use `[text](url)`)' : ''));
    }
    /**
   * In local name.
   *
   * ```markdown
   * > | a <b:cd> e
   *           ^
   * ```
   *
   * @type {State}
   */ function localName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code, {
            jsx: true
        })) {
            effects.consume(code);
            return localName;
        }
        // End of local name (note that we don’t expect another colon, or a member).
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagNameLocalType);
            returnState = localNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in local name', 'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * After local name.
   *
   * This is like as `primary_name_after`, but we don’t expect colons or
   * periods.
   *
   * ```markdown
   * > | a <b.c> d
   *           ^
   * > | a <b.c.d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function localNameAfter(code) {
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagNameType);
            return attributeBefore(code);
        }
        crash(code, 'after local name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * Before attribute.
   *
   * ```markdown
   * > | a <b /> c
   *          ^
   * > | a <b > c
   *          ^
   * > | a <b {...c}> d
   *          ^
   * > | a <b c> d
   *          ^
   * ```
   *
   * @type {State}
   */ function attributeBefore(code) {
        // Self-closing.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash) {
            effects.enter(tagSelfClosingMarker);
            effects.consume(code);
            effects.exit(tagSelfClosingMarker);
            returnState = selfClosing;
            return esWhitespaceStart;
        }
        // End of tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        // Attribute expression.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, attributeExpressionAfter, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, acorn, acornOptions, addResult, true, false, allowLazy)(code);
        }
        // Start of an attribute name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagAttributeType);
            effects.enter(tagAttributeNameType);
            effects.enter(tagAttributeNamePrimaryType);
            effects.consume(code);
            return attributePrimaryName;
        }
        crash(code, 'before attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag');
    }
    /**
   * After attribute expression.
   *
   * ```markdown
   * > | a <b {c} d/> e
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeExpressionAfter(code) {
        returnState = attributeBefore;
        return esWhitespaceStart(code);
    }
    /**
   * In primary attribute name.
   *
   * ```markdown
   * > | a <b cd/> e
   *           ^
   * > | a <b c:d> e
   *           ^
   * > | a <b c=d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function attributePrimaryName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code, {
            jsx: true
        })) {
            effects.consume(code);
            return attributePrimaryName;
        }
        // End of attribute name or tag.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagAttributeNamePrimaryType);
            returnState = attributePrimaryNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');
    }
    /**
   * After primary attribute name.
   *
   * ```markdown
   * > | a <b c/> d
   *           ^
   * > | a <b c:d> e
   *           ^
   * > | a <b c=d> e
   *           ^
   * ```
   *
   * @type {State}
   */ function attributePrimaryNameAfter(code) {
        // Start of a local name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].colon) {
            effects.enter(tagAttributeNamePrefixMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeNamePrefixMarkerType);
            returnState = attributeLocalNameBefore;
            return esWhitespaceStart;
        }
        // Initializer: start of an attribute value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo) {
            effects.exit(tagAttributeNameType);
            effects.enter(tagAttributeInitializerMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeInitializerMarkerType);
            returnState = attributeValueBefore;
            return esWhitespaceStart;
        }
        // End of tag / new attribute.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code) || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagAttributeNameType);
            effects.exit(tagAttributeType);
            returnState = attributeBefore;
            return esWhitespaceStart(code);
        }
        crash(code, 'after attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * Before local attribute name.
   *
   * ```markdown
   * > | a <b c:d/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeLocalNameBefore(code) {
        // Start of a local name.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.enter(tagAttributeNameLocalType);
            effects.consume(code);
            return attributeLocalName;
        }
        crash(code, 'before local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * In local attribute name.
   *
   * ```markdown
   * > | a <b c:de/> f
   *             ^
   * > | a <b c:d=e/> f
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeLocalName(code) {
        // Continuation of name: remain.
        if (code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["cont"](code, {
            jsx: true
        })) {
            effects.consume(code);
            return attributeLocalName;
        }
        // End of local name (note that we don’t expect another colon).
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEndingOrSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.exit(tagAttributeNameLocalType);
            effects.exit(tagAttributeNameType);
            returnState = attributeLocalNameAfter;
            return esWhitespaceStart(code);
        }
        crash(code, 'in local attribute name', 'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag');
    }
    /**
   * After local attribute name.
   *
   * ```markdown
   * > | a <b c:d/> f
   *             ^
   * > | a <b c:d=e/> f
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeLocalNameAfter(code) {
        // Start of an attribute value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].equalsTo) {
            effects.enter(tagAttributeInitializerMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeInitializerMarkerType);
            returnState = attributeValueBefore;
            return esWhitespaceStart;
        }
        // End of name.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace || code !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof && code >= 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$estree$2d$util$2d$is$2d$identifier$2d$name$40$3$2e$0$2e$0$2f$node_modules$2f$estree$2d$util$2d$is$2d$identifier$2d$name$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["start"](code)) {
            effects.exit(tagAttributeType);
            return attributeBefore(code);
        }
        crash(code, 'after local attribute name', 'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag');
    }
    /**
   * After `=`, before value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *            ^
   * > | a <b c={d}/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeValueBefore(code) {
        // Start of double- or single quoted value.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].quotationMark || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].apostrophe) {
            effects.enter(tagAttributeValueLiteralType);
            effects.enter(tagAttributeValueLiteralMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeValueLiteralMarkerType);
            marker = code;
            return attributeValueQuotedStart;
        }
        // Attribute value expression.
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$mdx$2d$expression$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$factory$2d$mdx$2d$expression$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryMdxExpression"].call(self, effects, attributeValueExpressionAfter, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType, acorn, acornOptions, addResult, false, false, allowLazy)(code);
        }
        crash(code, 'before attribute value', 'a character that can start an attribute value, such as `"`, `\'`, or `{`' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)' : ''));
    }
    /**
   * After attribute value expression.
   *
   * ```markdown
   * > | a <b c={d} e/> f
   *               ^
   * ```
   *
   * @type {State}
   */ function attributeValueExpressionAfter(code) {
        effects.exit(tagAttributeType);
        returnState = attributeBefore;
        return esWhitespaceStart(code);
    }
    /**
   * Before quoted literal attribute value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *            ^
   * ```
   *
   * @type {State}
   */ function attributeValueQuotedStart(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](marker !== undefined, 'expected `marker` to be defined');
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof) {
            crash(code, 'in attribute value', 'a corresponding closing quote `' + String.fromCodePoint(marker) + '`');
        }
        if (code === marker) {
            effects.enter(tagAttributeValueLiteralMarkerType);
            effects.consume(code);
            effects.exit(tagAttributeValueLiteralMarkerType);
            effects.exit(tagAttributeValueLiteralType);
            effects.exit(tagAttributeType);
            marker = undefined;
            returnState = attributeBefore;
            return esWhitespaceStart;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            returnState = attributeValueQuotedStart;
            return esWhitespaceStart(code);
        }
        effects.enter(tagAttributeValueLiteralValueType);
        return attributeValueQuoted(code);
    }
    /**
   * In quoted literal attribute value.
   *
   * ```markdown
   * > | a <b c="d"/> e
   *             ^
   * ```
   *
   * @type {State}
   */ function attributeValueQuoted(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || code === marker || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.exit(tagAttributeValueLiteralValueType);
            return attributeValueQuotedStart(code);
        }
        effects.consume(code);
        return attributeValueQuoted;
    }
    /**
   * After self-closing slash.
   *
   * ```markdown
   * > | a <b/> c
   *          ^
   * ```
   *
   * @type {State}
   */ function selfClosing(code) {
        if (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan) {
            return tagEnd(code);
        }
        crash(code, 'after self-closing slash', '`>` to end the tag' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].asterisk || code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].slash ? ' (note: JS comments in JSX tags are not supported in MDX)' : ''));
    }
    /**
   * At final `>`.
   *
   * ```markdown
   * > | a <b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function tagEnd(code) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].greaterThan, 'expected `>`');
        effects.enter(tagMarkerType);
        effects.consume(code);
        effects.exit(tagMarkerType);
        effects.exit(tagType);
        return ok;
    }
    /**
   * Before optional ECMAScript whitespace.
   *
   * ```markdown
   * > | a <a b> c
   *         ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceStart(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.enter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            effects.consume(code);
            effects.exit(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].lineEnding);
            return esWhitespaceEolAfter;
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.enter('esWhitespace');
            return esWhitespaceInside(code);
        }
        return returnState(code);
    }
    /**
   * In ECMAScript whitespace.
   *
   * ```markdown
   * > | a <a  b> c
   *          ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceInside(code) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code)) {
            effects.exit('esWhitespace');
            return esWhitespaceStart(code);
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["unicodeWhitespace"](code)) {
            effects.consume(code);
            return esWhitespaceInside;
        }
        effects.exit('esWhitespace');
        return returnState(code);
    }
    /**
   * After eol in whitespace.
   *
   * ```markdown
   * > | a <a\nb> c
   *          ^
   * ```
   *
   * @type {State}
   */ function esWhitespaceEolAfter(code) {
        // Lazy continuation in a flow tag is a syntax error.
        if (!allowLazy && self.parser.lazy[self.now().line]) {
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc', self.now(), 'micromark-extension-mdx-jsx:unexpected-lazy');
            error.url = trouble + '#unexpected-lazy-line-in-container-expected-line-to-be';
            throw error;
        }
        return esWhitespaceStart(code);
    }
    /**
   * Crash at a nonconforming character.
   *
   * @param {Code} code
   * @param {string} at
   * @param {string} expect
   */ function crash(code, at, expect) {
        const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$vfile$2d$message$40$4$2e$0$2e$2$2f$node_modules$2f$vfile$2d$message$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["VFileMessage"]('Unexpected ' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? 'end of file' : 'character `' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].graveAccent ? '` ` `' : String.fromCodePoint(code)) + '` (' + serializeCharCode(code) + ')') + ' ' + at + ', expected ' + expect, self.now(), 'micromark-extension-mdx-jsx:unexpected-' + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? 'eof' : 'character'));
        error.url = trouble + (code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof ? '#unexpected-end-of-file-at-expected-expect' : '#unexpected-character-at-expected-expect');
        throw error;
    }
}
/**
 * @param {NonNullable<Code>} code
 * @returns {string}
 */ function serializeCharCode(code) {
    return 'U+' + code.toString(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["constants"].numericBaseHexadecimal).toUpperCase().padStart(4, '0');
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn
 * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef Options
 *   Configuration.
 * @property {AcornOptions | undefined} acornOptions
 *   Acorn options.
 * @property {boolean | undefined} addResult
 *   Whether to add `estree` fields to tokens with results from acorn.
 */ __turbopack_esm__({
    "jsxFlow": ()=>jsxFlow
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/dev/index.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
function jsxFlow(acorn, options) {
    return {
        name: 'mdxJsxFlowTag',
        tokenize: tokenizeJsxFlow,
        concrete: true
    };
    /**
   * MDX JSX (flow).
   *
   * ```markdown
   * > | <A />
   *     ^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeJsxFlow(effects, ok, nok) {
        const self = this;
        return start;
        /**
     * Start of MDX: JSX (flow).
     *
     * ```markdown
     * > | <A />
     *     ^
     * ```
     *
     * @type {State}
     */ function start(code) {
            // To do: in `markdown-rs`, constructs need to parse the indent themselves.
            // This should also be introduced in `micromark-js`.
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$devlop$40$1$2e$1$2e$0$2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["ok"](code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan, 'expected `<`');
            return before(code);
        }
        /**
     * After optional whitespace, before of MDX JSX (flow).
     *
     * ```markdown
     * > | <A />
     *     ^
     * ```
     *
     * @type {State}
     */ function before(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryTag"].call(self, effects, after, nok, acorn, options.acornOptions, options.addResult, false, 'mdxJsxFlowTag', 'mdxJsxFlowTagMarker', 'mdxJsxFlowTagClosingMarker', 'mdxJsxFlowTagSelfClosingMarker', 'mdxJsxFlowTagName', 'mdxJsxFlowTagNamePrimary', 'mdxJsxFlowTagNameMemberMarker', 'mdxJsxFlowTagNameMember', 'mdxJsxFlowTagNamePrefixMarker', 'mdxJsxFlowTagNameLocal', 'mdxJsxFlowTagExpressionAttribute', 'mdxJsxFlowTagExpressionAttributeMarker', 'mdxJsxFlowTagExpressionAttributeValue', 'mdxJsxFlowTagAttribute', 'mdxJsxFlowTagAttributeName', 'mdxJsxFlowTagAttributeNamePrimary', 'mdxJsxFlowTagAttributeNamePrefixMarker', 'mdxJsxFlowTagAttributeNameLocal', 'mdxJsxFlowTagAttributeInitializerMarker', 'mdxJsxFlowTagAttributeValueLiteral', 'mdxJsxFlowTagAttributeValueLiteralMarker', 'mdxJsxFlowTagAttributeValueLiteralValue', 'mdxJsxFlowTagAttributeValueExpression', 'mdxJsxFlowTagAttributeValueExpressionMarker', 'mdxJsxFlowTagAttributeValueExpressionValue')(code);
        }
        /**
     * After an MDX JSX (flow) tag.
     *
     * ```markdown
     * > | <A>
     *        ^
     * ```
     *
     * @type {State}
     */ function after(code) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownSpace"](code) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$factory$2d$space$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$factory$2d$space$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factorySpace"](effects, end, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["types"].whitespace)(code) : end(code);
        }
        /**
     * After an MDX JSX (flow) tag, after optional whitespace.
     *
     * ```markdown
     * > | <A> <B>
     *         ^
     * ```
     *
     * @type {State}
     */ function end(code) {
            // We want to allow expressions directly after tags.
            // See <https://github.com/micromark/micromark-extension-mdx-expression/blob/d5d92b9/packages/micromark-extension-mdx-expression/dev/lib/syntax.js#L183>
            // for more info.
            const leftBraceValue = self.parser.constructs.flow[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace];
            /* c8 ignore next 5 -- always a list when normalized. */ const constructs = Array.isArray(leftBraceValue) ? leftBraceValue : leftBraceValue ? [
                leftBraceValue
            ] : [];
            const expression = constructs.find((d)=>d.name === 'mdxFlowExpression');
            // Another tag.
            return code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan ? start(code) : code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].leftCurlyBrace && expression ? effects.attempt(expression, end, nok)(code) : code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].eof || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$character$40$2$2e$0$2e$1$2f$node_modules$2f$micromark$2d$util$2d$character$2f$dev$2f$index$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["markdownLineEnding"](code) ? ok(code) : nok(code);
        }
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn
 * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ /**
 * @typedef Options
 *   Configuration.
 * @property {AcornOptions | undefined} acornOptions
 *   Acorn options.
 * @property {boolean | undefined} addResult
 *   Whether to add `estree` fields to tokens with results from acorn.
 */ __turbopack_esm__({
    "jsxText": ()=>jsxText
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
function jsxText(acorn, options) {
    return {
        name: 'mdxJsxTextTag',
        tokenize: tokenizeJsxText
    };
    /**
   * MDX JSX (text).
   *
   * ```markdown
   * > | a <b />.
   *       ^^^^^
   * ```
   *
   * @this {TokenizeContext}
   * @type {Tokenizer}
   */ function tokenizeJsxText(effects, ok, nok) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$factory$2d$tag$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["factoryTag"].call(this, effects, ok, nok, acorn, options.acornOptions, options.addResult, true, 'mdxJsxTextTag', 'mdxJsxTextTagMarker', 'mdxJsxTextTagClosingMarker', 'mdxJsxTextTagSelfClosingMarker', 'mdxJsxTextTagName', 'mdxJsxTextTagNamePrimary', 'mdxJsxTextTagNameMemberMarker', 'mdxJsxTextTagNameMember', 'mdxJsxTextTagNamePrefixMarker', 'mdxJsxTextTagNameLocal', 'mdxJsxTextTagExpressionAttribute', 'mdxJsxTextTagExpressionAttributeMarker', 'mdxJsxTextTagExpressionAttributeValue', 'mdxJsxTextTagAttribute', 'mdxJsxTextTagAttributeName', 'mdxJsxTextTagAttributeNamePrimary', 'mdxJsxTextTagAttributeNamePrefixMarker', 'mdxJsxTextTagAttributeNameLocal', 'mdxJsxTextTagAttributeInitializerMarker', 'mdxJsxTextTagAttributeValueLiteral', 'mdxJsxTextTagAttributeValueLiteralMarker', 'mdxJsxTextTagAttributeValueLiteralValue', 'mdxJsxTextTagAttributeValueExpression', 'mdxJsxTextTagAttributeValueExpressionMarker', 'mdxJsxTextTagAttributeValueExpressionValue');
    }
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

/**
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn
 * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions
 */ /**
 * @typedef Options
 *   Configuration (optional).
 * @property {Acorn | null | undefined} [acorn]
 *   Acorn parser to use (optional).
 * @property {AcornOptions | null | undefined} [acornOptions]
 *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,
 *   sourceType: 'module'}`); all fields except `locations` can be set.
 * @property {boolean | null | undefined} [addResult=false]
 *   Whether to add `estree` fields to tokens with results from acorn
 *   (default: `false`).
 */ __turbopack_esm__({
    "mdxJsx": ()=>mdxJsx
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/default.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$text$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js [rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$flow$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function mdxJsx(options) {
    const settings = options || {};
    const acorn = settings.acorn;
    /** @type {AcornOptions | undefined} */ let acornOptions;
    if (acorn) {
        if (!acorn.parse || !acorn.parseExpressionAt) {
            throw new Error('Expected a proper `acorn` instance passed in as `options.acorn`');
        }
        acornOptions = Object.assign({
            ecmaVersion: 2024,
            sourceType: 'module'
        }, settings.acornOptions, {
            locations: true
        });
    } else if (settings.acornOptions || settings.addResult) {
        throw new Error('Expected an `acorn` instance passed in as `options.acorn`');
    }
    return {
        flow: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan]: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$flow$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["jsxFlow"](acorn || undefined, {
                acornOptions,
                addResult: settings.addResult || undefined
            })
        },
        text: {
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$util$2d$symbol$40$2$2e$0$2e$0$2f$node_modules$2f$micromark$2d$util$2d$symbol$2f$lib$2f$default$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["codes"].lessThan]: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$jsx$2d$text$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["jsxText"](acorn || undefined, {
                acornOptions,
                addResult: settings.addResult || undefined
            })
        }
    };
}

})()),
"[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/index.js [rsc] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

// Note: more types exposed from `index.d.ts`.
__turbopack_esm__({
    "mdxJsx": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__["mdxJsx"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$micromark$2d$extension$2d$mdx$2d$jsx$40$3$2e$0$2e$0$2f$node_modules$2f$micromark$2d$extension$2d$mdx$2d$jsx$2f$dev$2f$lib$2f$syntax$2e$js__$5b$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/.pnpm/micromark-extension-mdx-jsx@3.0.0/node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js [rsc] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;

})()),

};

//# sourceMappingURL=node_modules__pnpm_499ba6._.js.map